
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .text:

080000bc <__udivsi3>:
 80000bc:	2900      	cmp	r1, #0
 80000be:	d034      	beq.n	800012a <.udivsi3_skip_div0_test+0x6a>

080000c0 <.udivsi3_skip_div0_test>:
 80000c0:	2301      	movs	r3, #1
 80000c2:	2200      	movs	r2, #0
 80000c4:	b410      	push	{r4}
 80000c6:	4288      	cmp	r0, r1
 80000c8:	d32c      	bcc.n	8000124 <.udivsi3_skip_div0_test+0x64>
 80000ca:	2401      	movs	r4, #1
 80000cc:	0724      	lsls	r4, r4, #28
 80000ce:	42a1      	cmp	r1, r4
 80000d0:	d204      	bcs.n	80000dc <.udivsi3_skip_div0_test+0x1c>
 80000d2:	4281      	cmp	r1, r0
 80000d4:	d202      	bcs.n	80000dc <.udivsi3_skip_div0_test+0x1c>
 80000d6:	0109      	lsls	r1, r1, #4
 80000d8:	011b      	lsls	r3, r3, #4
 80000da:	e7f8      	b.n	80000ce <.udivsi3_skip_div0_test+0xe>
 80000dc:	00e4      	lsls	r4, r4, #3
 80000de:	42a1      	cmp	r1, r4
 80000e0:	d204      	bcs.n	80000ec <.udivsi3_skip_div0_test+0x2c>
 80000e2:	4281      	cmp	r1, r0
 80000e4:	d202      	bcs.n	80000ec <.udivsi3_skip_div0_test+0x2c>
 80000e6:	0049      	lsls	r1, r1, #1
 80000e8:	005b      	lsls	r3, r3, #1
 80000ea:	e7f8      	b.n	80000de <.udivsi3_skip_div0_test+0x1e>
 80000ec:	4288      	cmp	r0, r1
 80000ee:	d301      	bcc.n	80000f4 <.udivsi3_skip_div0_test+0x34>
 80000f0:	1a40      	subs	r0, r0, r1
 80000f2:	431a      	orrs	r2, r3
 80000f4:	084c      	lsrs	r4, r1, #1
 80000f6:	42a0      	cmp	r0, r4
 80000f8:	d302      	bcc.n	8000100 <.udivsi3_skip_div0_test+0x40>
 80000fa:	1b00      	subs	r0, r0, r4
 80000fc:	085c      	lsrs	r4, r3, #1
 80000fe:	4322      	orrs	r2, r4
 8000100:	088c      	lsrs	r4, r1, #2
 8000102:	42a0      	cmp	r0, r4
 8000104:	d302      	bcc.n	800010c <.udivsi3_skip_div0_test+0x4c>
 8000106:	1b00      	subs	r0, r0, r4
 8000108:	089c      	lsrs	r4, r3, #2
 800010a:	4322      	orrs	r2, r4
 800010c:	08cc      	lsrs	r4, r1, #3
 800010e:	42a0      	cmp	r0, r4
 8000110:	d302      	bcc.n	8000118 <.udivsi3_skip_div0_test+0x58>
 8000112:	1b00      	subs	r0, r0, r4
 8000114:	08dc      	lsrs	r4, r3, #3
 8000116:	4322      	orrs	r2, r4
 8000118:	2800      	cmp	r0, #0
 800011a:	d003      	beq.n	8000124 <.udivsi3_skip_div0_test+0x64>
 800011c:	091b      	lsrs	r3, r3, #4
 800011e:	d001      	beq.n	8000124 <.udivsi3_skip_div0_test+0x64>
 8000120:	0909      	lsrs	r1, r1, #4
 8000122:	e7e3      	b.n	80000ec <.udivsi3_skip_div0_test+0x2c>
 8000124:	0010      	movs	r0, r2
 8000126:	bc10      	pop	{r4}
 8000128:	4770      	bx	lr
 800012a:	b501      	push	{r0, lr}
 800012c:	2000      	movs	r0, #0
 800012e:	f000 f85f 	bl	80001f0 <__aeabi_idiv0>
 8000132:	bd02      	pop	{r1, pc}

08000134 <__aeabi_uidivmod>:
 8000134:	2900      	cmp	r1, #0
 8000136:	d0f8      	beq.n	800012a <.udivsi3_skip_div0_test+0x6a>
 8000138:	b503      	push	{r0, r1, lr}
 800013a:	f7ff ffc1 	bl	80000c0 <.udivsi3_skip_div0_test>
 800013e:	bc0e      	pop	{r1, r2, r3}
 8000140:	4342      	muls	r2, r0
 8000142:	1a89      	subs	r1, r1, r2
 8000144:	4718      	bx	r3
 8000146:	46c0      	nop			; (mov r8, r8)

08000148 <__divsi3>:
 8000148:	2900      	cmp	r1, #0
 800014a:	d041      	beq.n	80001d0 <.divsi3_skip_div0_test+0x84>

0800014c <.divsi3_skip_div0_test>:
 800014c:	b410      	push	{r4}
 800014e:	0004      	movs	r4, r0
 8000150:	404c      	eors	r4, r1
 8000152:	46a4      	mov	ip, r4
 8000154:	2301      	movs	r3, #1
 8000156:	2200      	movs	r2, #0
 8000158:	2900      	cmp	r1, #0
 800015a:	d500      	bpl.n	800015e <.divsi3_skip_div0_test+0x12>
 800015c:	4249      	negs	r1, r1
 800015e:	2800      	cmp	r0, #0
 8000160:	d500      	bpl.n	8000164 <.divsi3_skip_div0_test+0x18>
 8000162:	4240      	negs	r0, r0
 8000164:	4288      	cmp	r0, r1
 8000166:	d32c      	bcc.n	80001c2 <.divsi3_skip_div0_test+0x76>
 8000168:	2401      	movs	r4, #1
 800016a:	0724      	lsls	r4, r4, #28
 800016c:	42a1      	cmp	r1, r4
 800016e:	d204      	bcs.n	800017a <.divsi3_skip_div0_test+0x2e>
 8000170:	4281      	cmp	r1, r0
 8000172:	d202      	bcs.n	800017a <.divsi3_skip_div0_test+0x2e>
 8000174:	0109      	lsls	r1, r1, #4
 8000176:	011b      	lsls	r3, r3, #4
 8000178:	e7f8      	b.n	800016c <.divsi3_skip_div0_test+0x20>
 800017a:	00e4      	lsls	r4, r4, #3
 800017c:	42a1      	cmp	r1, r4
 800017e:	d204      	bcs.n	800018a <.divsi3_skip_div0_test+0x3e>
 8000180:	4281      	cmp	r1, r0
 8000182:	d202      	bcs.n	800018a <.divsi3_skip_div0_test+0x3e>
 8000184:	0049      	lsls	r1, r1, #1
 8000186:	005b      	lsls	r3, r3, #1
 8000188:	e7f8      	b.n	800017c <.divsi3_skip_div0_test+0x30>
 800018a:	4288      	cmp	r0, r1
 800018c:	d301      	bcc.n	8000192 <.divsi3_skip_div0_test+0x46>
 800018e:	1a40      	subs	r0, r0, r1
 8000190:	431a      	orrs	r2, r3
 8000192:	084c      	lsrs	r4, r1, #1
 8000194:	42a0      	cmp	r0, r4
 8000196:	d302      	bcc.n	800019e <.divsi3_skip_div0_test+0x52>
 8000198:	1b00      	subs	r0, r0, r4
 800019a:	085c      	lsrs	r4, r3, #1
 800019c:	4322      	orrs	r2, r4
 800019e:	088c      	lsrs	r4, r1, #2
 80001a0:	42a0      	cmp	r0, r4
 80001a2:	d302      	bcc.n	80001aa <.divsi3_skip_div0_test+0x5e>
 80001a4:	1b00      	subs	r0, r0, r4
 80001a6:	089c      	lsrs	r4, r3, #2
 80001a8:	4322      	orrs	r2, r4
 80001aa:	08cc      	lsrs	r4, r1, #3
 80001ac:	42a0      	cmp	r0, r4
 80001ae:	d302      	bcc.n	80001b6 <.divsi3_skip_div0_test+0x6a>
 80001b0:	1b00      	subs	r0, r0, r4
 80001b2:	08dc      	lsrs	r4, r3, #3
 80001b4:	4322      	orrs	r2, r4
 80001b6:	2800      	cmp	r0, #0
 80001b8:	d003      	beq.n	80001c2 <.divsi3_skip_div0_test+0x76>
 80001ba:	091b      	lsrs	r3, r3, #4
 80001bc:	d001      	beq.n	80001c2 <.divsi3_skip_div0_test+0x76>
 80001be:	0909      	lsrs	r1, r1, #4
 80001c0:	e7e3      	b.n	800018a <.divsi3_skip_div0_test+0x3e>
 80001c2:	0010      	movs	r0, r2
 80001c4:	4664      	mov	r4, ip
 80001c6:	2c00      	cmp	r4, #0
 80001c8:	d500      	bpl.n	80001cc <.divsi3_skip_div0_test+0x80>
 80001ca:	4240      	negs	r0, r0
 80001cc:	bc10      	pop	{r4}
 80001ce:	4770      	bx	lr
 80001d0:	b501      	push	{r0, lr}
 80001d2:	2000      	movs	r0, #0
 80001d4:	f000 f80c 	bl	80001f0 <__aeabi_idiv0>
 80001d8:	bd02      	pop	{r1, pc}
 80001da:	46c0      	nop			; (mov r8, r8)

080001dc <__aeabi_idivmod>:
 80001dc:	2900      	cmp	r1, #0
 80001de:	d0f7      	beq.n	80001d0 <.divsi3_skip_div0_test+0x84>
 80001e0:	b503      	push	{r0, r1, lr}
 80001e2:	f7ff ffb3 	bl	800014c <.divsi3_skip_div0_test>
 80001e6:	bc0e      	pop	{r1, r2, r3}
 80001e8:	4342      	muls	r2, r0
 80001ea:	1a89      	subs	r1, r1, r2
 80001ec:	4718      	bx	r3
 80001ee:	46c0      	nop			; (mov r8, r8)

080001f0 <__aeabi_idiv0>:
 80001f0:	4770      	bx	lr
 80001f2:	46c0      	nop			; (mov r8, r8)

080001f4 <strlen>:
 80001f4:	2300      	movs	r3, #0
 80001f6:	5cc2      	ldrb	r2, [r0, r3]
 80001f8:	3301      	adds	r3, #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1e58      	subs	r0, r3, #1
 8000200:	4770      	bx	lr
	...

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c06      	ldr	r4, [pc, #24]	; (8000220 <__do_global_dtors_aux+0x1c>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d107      	bne.n	800021e <__do_global_dtors_aux+0x1a>
 800020e:	4b05      	ldr	r3, [pc, #20]	; (8000224 <__do_global_dtors_aux+0x20>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d002      	beq.n	800021a <__do_global_dtors_aux+0x16>
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <__do_global_dtors_aux+0x24>)
 8000216:	e000      	b.n	800021a <__do_global_dtors_aux+0x16>
 8000218:	bf00      	nop
 800021a:	2301      	movs	r3, #1
 800021c:	7023      	strb	r3, [r4, #0]
 800021e:	bd10      	pop	{r4, pc}
 8000220:	2000000c 	.word	0x2000000c
 8000224:	00000000 	.word	0x00000000
 8000228:	08006308 	.word	0x08006308

0800022c <frame_dummy>:
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <frame_dummy+0x14>)
 800022e:	b510      	push	{r4, lr}
 8000230:	2b00      	cmp	r3, #0
 8000232:	d003      	beq.n	800023c <frame_dummy+0x10>
 8000234:	4903      	ldr	r1, [pc, #12]	; (8000244 <frame_dummy+0x18>)
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <frame_dummy+0x1c>)
 8000238:	e000      	b.n	800023c <frame_dummy+0x10>
 800023a:	bf00      	nop
 800023c:	bd10      	pop	{r4, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	00000000 	.word	0x00000000
 8000244:	20000010 	.word	0x20000010
 8000248:	08006308 	.word	0x08006308

0800024c <main>:
//static uint32_t   dog_tick;

static WWDG_HandleTypeDef Wwdg_Handler;

int main( void )
{
 800024c:	b500      	push	{lr}
 800024e:	b083      	sub	sp, #12
  HAL_Init(); /* initialization of HAL Library */
 8000250:	f000 fb72 	bl	8000938 <HAL_Init>
  static  Task_TypeDef tasks[ TASKS_N ];
 
  static  Timer_TypeDef timers[ 1 ];
  __GPIOC_CLK_ENABLE();
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <main+0xac>)
 8000256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000258:	4b27      	ldr	r3, [pc, #156]	; (80002f8 <main+0xac>)
 800025a:	2104      	movs	r1, #4
 800025c:	430a      	orrs	r2, r1
 800025e:	635a      	str	r2, [r3, #52]	; 0x34
 8000260:	4b25      	ldr	r3, [pc, #148]	; (80002f8 <main+0xac>)
 8000262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000264:	2204      	movs	r2, #4
 8000266:	4013      	ands	r3, r2
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	9b01      	ldr	r3, [sp, #4]
  
  Sche.tick     = TICK_VAL;
 800026c:	4b23      	ldr	r3, [pc, #140]	; (80002fc <main+0xb0>)
 800026e:	2201      	movs	r2, #1
 8000270:	605a      	str	r2, [r3, #4]
  Sche.tasks    = TASKS_N;
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <main+0xb0>)
 8000274:	2205      	movs	r2, #5
 8000276:	601a      	str	r2, [r3, #0]
  Sche.taskPtr  = tasks;
 8000278:	4b20      	ldr	r3, [pc, #128]	; (80002fc <main+0xb0>)
 800027a:	4a21      	ldr	r2, [pc, #132]	; (8000300 <main+0xb4>)
 800027c:	60da      	str	r2, [r3, #12]
  Sche.timers   = 1;
 800027e:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <main+0xb0>)
 8000280:	2201      	movs	r2, #1
 8000282:	615a      	str	r2, [r3, #20]
  Sche.timerPtr = timers;
 8000284:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <main+0xb0>)
 8000286:	4a1f      	ldr	r2, [pc, #124]	; (8000304 <main+0xb8>)
 8000288:	619a      	str	r2, [r3, #24]
  HIL_SCHEDULER_Init( &Sche );
 800028a:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <main+0xb0>)
 800028c:	0018      	movs	r0, r3
 800028e:	f005 fdcf 	bl	8005e30 <HIL_SCHEDULER_Init>
  
  /*register two task with thier corresponding init fucntions and their periodicyt, 100ms and 500ms*/
  (void)HIL_SCHEDULER_RegisterTask( &Sche,hearth_init , hearth_beat , Heart_BEAT_PERIOD );
 8000292:	2396      	movs	r3, #150	; 0x96
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	4a1c      	ldr	r2, [pc, #112]	; (8000308 <main+0xbc>)
 8000298:	491c      	ldr	r1, [pc, #112]	; (800030c <main+0xc0>)
 800029a:	4818      	ldr	r0, [pc, #96]	; (80002fc <main+0xb0>)
 800029c:	f005 fe38 	bl	8005f10 <HIL_SCHEDULER_RegisterTask>
  (void)HIL_SCHEDULER_RegisterTask( &Sche,Serial_Init , Serial_Task , SERIAL_PERIOD    );
 80002a0:	4a1b      	ldr	r2, [pc, #108]	; (8000310 <main+0xc4>)
 80002a2:	491c      	ldr	r1, [pc, #112]	; (8000314 <main+0xc8>)
 80002a4:	4815      	ldr	r0, [pc, #84]	; (80002fc <main+0xb0>)
 80002a6:	230a      	movs	r3, #10
 80002a8:	f005 fe32 	bl	8005f10 <HIL_SCHEDULER_RegisterTask>
  (void)HIL_SCHEDULER_RegisterTask( &Sche,Clock_Init  , Clock_Task  , CLOCK_PERIOD     );
 80002ac:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <main+0xcc>)
 80002ae:	491b      	ldr	r1, [pc, #108]	; (800031c <main+0xd0>)
 80002b0:	4812      	ldr	r0, [pc, #72]	; (80002fc <main+0xb0>)
 80002b2:	2332      	movs	r3, #50	; 0x32
 80002b4:	f005 fe2c 	bl	8005f10 <HIL_SCHEDULER_RegisterTask>
  (void)HIL_SCHEDULER_RegisterTask( &Sche,display_Init, display_Task, DISPLAY_PERIOD   );
 80002b8:	4a19      	ldr	r2, [pc, #100]	; (8000320 <main+0xd4>)
 80002ba:	491a      	ldr	r1, [pc, #104]	; (8000324 <main+0xd8>)
 80002bc:	480f      	ldr	r0, [pc, #60]	; (80002fc <main+0xb0>)
 80002be:	2364      	movs	r3, #100	; 0x64
 80002c0:	f005 fe26 	bl	8005f10 <HIL_SCHEDULER_RegisterTask>
  (void)HIL_SCHEDULER_RegisterTask( &Sche,dog_init    , peth_the_dog, 8 );
 80002c4:	4a18      	ldr	r2, [pc, #96]	; (8000328 <main+0xdc>)
 80002c6:	4919      	ldr	r1, [pc, #100]	; (800032c <main+0xe0>)
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <main+0xb0>)
 80002ca:	2308      	movs	r3, #8
 80002cc:	f005 fe20 	bl	8005f10 <HIL_SCHEDULER_RegisterTask>
  TimerId = HIL_SCHEDULER_RegisterTimer( &Sche, 1000u,&One_Secon_TimerCallback);
 80002d0:	4a17      	ldr	r2, [pc, #92]	; (8000330 <main+0xe4>)
 80002d2:	23fa      	movs	r3, #250	; 0xfa
 80002d4:	0099      	lsls	r1, r3, #2
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <main+0xb0>)
 80002d8:	0018      	movs	r0, r3
 80002da:	f005 fd3b 	bl	8005d54 <HIL_SCHEDULER_RegisterTimer>
 80002de:	0003      	movs	r3, r0
 80002e0:	001a      	movs	r2, r3
 80002e2:	4b14      	ldr	r3, [pc, #80]	; (8000334 <main+0xe8>)
 80002e4:	601a      	str	r2, [r3, #0]
 
  

  /*run the scheduler in a infinite loop*/
  (void)HIL_SCHEDULER_Start( &Sche );
 80002e6:	4b05      	ldr	r3, [pc, #20]	; (80002fc <main+0xb0>)
 80002e8:	0018      	movs	r0, r3
 80002ea:	f005 fe99 	bl	8006020 <HIL_SCHEDULER_Start>
 80002ee:	2300      	movs	r3, #0

}
 80002f0:	0018      	movs	r0, r3
 80002f2:	b003      	add	sp, #12
 80002f4:	bd00      	pop	{pc}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	40021000 	.word	0x40021000
 80002fc:	20000028 	.word	0x20000028
 8000300:	20000060 	.word	0x20000060
 8000304:	200000c4 	.word	0x200000c4
 8000308:	080003ad 	.word	0x080003ad
 800030c:	08000339 	.word	0x08000339
 8000310:	08002fc5 	.word	0x08002fc5
 8000314:	08002971 	.word	0x08002971
 8000318:	0800377d 	.word	0x0800377d
 800031c:	08003711 	.word	0x08003711
 8000320:	08005a89 	.word	0x08005a89
 8000324:	08005721 	.word	0x08005721
 8000328:	08000419 	.word	0x08000419
 800032c:	080003d1 	.word	0x080003d1
 8000330:	08003211 	.word	0x08003211
 8000334:	20000044 	.word	0x20000044

08000338 <hearth_init>:
/**
 * @brief  Fuction to initialize the resources necessaries for the use of the hearth beat
 */
static void hearth_init(void)
{
 8000338:	b500      	push	{lr}
 800033a:	b087      	sub	sp, #28
   GPIO_InitTypeDef GPIO_InitStruct; /* Structure for GPIO initialization*/
  /* Port C configuration */
  __HAL_RCC_GPIOC_CLK_ENABLE();        
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <hearth_init+0x68>)
 800033e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <hearth_init+0x68>)
 8000342:	2104      	movs	r1, #4
 8000344:	430a      	orrs	r2, r1
 8000346:	635a      	str	r2, [r3, #52]	; 0x34
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <hearth_init+0x68>)
 800034a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800034c:	2204      	movs	r2, #4
 800034e:	4013      	ands	r3, r2
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin =  0x7F;             
 8000354:	ab01      	add	r3, sp, #4
 8000356:	227f      	movs	r2, #127	; 0x7f
 8000358:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   
 800035a:	ab01      	add	r3, sp, #4
 800035c:	2201      	movs	r2, #1
 800035e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;           
 8000360:	ab01      	add	r3, sp, #4
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  
 8000366:	ab01      	add	r3, sp, #4
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 800036c:	ab01      	add	r3, sp, #4
 800036e:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <hearth_init+0x6c>)
 8000370:	0019      	movs	r1, r3
 8000372:	0010      	movs	r0, r2
 8000374:	f001 f978 	bl	8001668 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <hearth_init+0x6c>)
 800037a:	2200      	movs	r2, #0
 800037c:	2101      	movs	r1, #1
 800037e:	0018      	movs	r0, r3
 8000380:	f001 fadc 	bl	800193c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <hearth_init+0x6c>)
 8000386:	2200      	movs	r2, #0
 8000388:	2120      	movs	r1, #32
 800038a:	0018      	movs	r0, r3
 800038c:	f001 fad6 	bl	800193c <HAL_GPIO_WritePin>
  hearth_tick = HAL_GetTick(); /*Get the current tick of the system */
 8000390:	f000 fb4a 	bl	8000a28 <HAL_GetTick>
 8000394:	0002      	movs	r2, r0
 8000396:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <hearth_init+0x70>)
 8000398:	601a      	str	r2, [r3, #0]
}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	b007      	add	sp, #28
 800039e:	bd00      	pop	{pc}
 80003a0:	40021000 	.word	0x40021000
 80003a4:	50000800 	.word	0x50000800
 80003a8:	20000048 	.word	0x20000048

080003ac <hearth_beat>:
/**
 * @brief  This fuction toggles a led every 300 ms to indicate that the program is working
 */
static void hearth_beat(void)
{
 80003ac:	b510      	push	{r4, lr}
    hearth_tick = HAL_GetTick();
 80003ae:	f000 fb3b 	bl	8000a28 <HAL_GetTick>
 80003b2:	0002      	movs	r2, r0
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <hearth_beat+0x1c>)
 80003b6:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <hearth_beat+0x20>)
 80003ba:	2101      	movs	r1, #1
 80003bc:	0018      	movs	r0, r3
 80003be:	f001 fadc 	bl	800197a <HAL_GPIO_TogglePin>
}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	bd10      	pop	{r4, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	20000048 	.word	0x20000048
 80003cc:	50000800 	.word	0x50000800

080003d0 <dog_init>:
/**
 * @brief  Fuction to initialize the watchdog timer 
 */
static void dog_init(void)
{
 80003d0:	b510      	push	{r4, lr}
      counter is not reloaded.
      c) Time to enter inside window
      Window timeout (in ms) = (127 - 126 + 1) * 0.128
                             = 256 us */
  
  Wwdg_Handler.Instance        = WWDG;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <dog_init+0x3c>)
 80003d4:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <dog_init+0x40>)
 80003d6:	601a      	str	r2, [r3, #0]
  Wwdg_Handler.Init.Prescaler  = WWDG_PRESCALER_32;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <dog_init+0x3c>)
 80003da:	22a0      	movs	r2, #160	; 0xa0
 80003dc:	0192      	lsls	r2, r2, #6
 80003de:	605a      	str	r2, [r3, #4]
  Wwdg_Handler.Init.Window     = 126;
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <dog_init+0x3c>)
 80003e2:	227e      	movs	r2, #126	; 0x7e
 80003e4:	609a      	str	r2, [r3, #8]
  Wwdg_Handler.Init.Counter    = 127;
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <dog_init+0x3c>)
 80003e8:	227f      	movs	r2, #127	; 0x7f
 80003ea:	60da      	str	r2, [r3, #12]
  Wwdg_Handler.Init.EWIMode    = WWDG_EWI_DISABLE;
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <dog_init+0x3c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  HAL_WWDG_Init(&Wwdg_Handler);
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <dog_init+0x3c>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f005 fb7d 	bl	8005af4 <HAL_WWDG_Init>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,SET);
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <dog_init+0x44>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	2108      	movs	r1, #8
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fa9b 	bl	800193c <HAL_GPIO_WritePin>
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	2000004c 	.word	0x2000004c
 8000410:	40002c00 	.word	0x40002c00
 8000414:	50000800 	.word	0x50000800

08000418 <peth_the_dog>:

/**
 * @brief  Function to reset the watchdog 
 */
static void peth_the_dog(void)
{
 8000418:	b510      	push	{r4, lr}
    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_1);
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <peth_the_dog+0x18>)
 800041c:	2102      	movs	r1, #2
 800041e:	0018      	movs	r0, r3
 8000420:	f001 faab 	bl	800197a <HAL_GPIO_TogglePin>
    HAL_WWDG_Refresh(&Wwdg_Handler); 
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <peth_the_dog+0x1c>)
 8000426:	0018      	movs	r0, r3
 8000428:	f005 fb87 	bl	8005b3a <HAL_WWDG_Refresh>
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	bd10      	pop	{r4, pc}
 8000430:	50000800 	.word	0x50000800
 8000434:	2000004c 	.word	0x2000004c

08000438 <NMI_Handler>:
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void NMI_Handler( void )
{

}
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	4770      	bx	lr

0800043c <HardFault_Handler>:
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void HardFault_Handler( void )
{
    assert_param( 0u );
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	4770      	bx	lr

08000440 <SVC_Handler>:
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void SVC_Handler( void )
{

}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	4770      	bx	lr

08000444 <PendSV_Handler>:
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void PendSV_Handler( void )
{

}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	4770      	bx	lr

08000448 <SysTick_Handler>:

/**------------------------------------------------------------------------------------------------
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void SysTick_Handler( void )
{
 8000448:	b510      	push	{r4, lr}
    HAL_IncTick( );
 800044a:	f000 fadf 	bl	8000a0c <HAL_IncTick>
}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	bd10      	pop	{r4, pc}

08000452 <EXTI4_15_IRQHandler>:
/**------------------------------------------------------------------------------------------------
Brief.- Punto de entrada del programa
-------------------------------------------------------------------------------------------------*/
void EXTI4_15_IRQHandler( void )
{
 8000452:	b510      	push	{r4, lr}
    /*funcion que realiza las operaciones de interrupcion del gpio*/
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8000454:	2080      	movs	r0, #128	; 0x80
 8000456:	f001 faab 	bl	80019b0 <HAL_GPIO_EXTI_IRQHandler>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	bd10      	pop	{r4, pc}
	...

08000460 <TIM16_FDCAN_IT0_IRQHandler>:


    
void TIM16_FDCAN_IT0_IRQHandler( void )
{
 8000460:	b510      	push	{r4, lr}
    
    HAL_FDCAN_IRQHandler( &CANHandler );
 8000462:	4b03      	ldr	r3, [pc, #12]	; (8000470 <TIM16_FDCAN_IT0_IRQHandler+0x10>)
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fed9 	bl	800221c <HAL_FDCAN_IRQHandler>
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	200000f4 	.word	0x200000f4

08000474 <RTC_TAMP_IRQHandler>:



void RTC_TAMP_IRQHandler(void)
{
 8000474:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000476:	4b03      	ldr	r3, [pc, #12]	; (8000484 <RTC_TAMP_IRQHandler+0x10>)
 8000478:	0018      	movs	r0, r3
 800047a:	f003 fed5 	bl	8004228 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	2000023c 	.word	0x2000023c

08000488 <HAL_MspInit>:
#include "app_msps.h"
#include "app_serial.h"
#include "app_clock.h"
#include "hel_lcd.h"
void HAL_MspInit( void )
{
 8000488:	b500      	push	{lr}
 800048a:	b09d      	sub	sp, #116	; 0x74

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048c:	ab0d      	add	r3, sp, #52	; 0x34
 800048e:	0018      	movs	r0, r3
 8000490:	233c      	movs	r3, #60	; 0x3c
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f005 feeb 	bl	8006270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0}; 
 800049a:	ab09      	add	r3, sp, #36	; 0x24
 800049c:	0018      	movs	r0, r3
 800049e:	2310      	movs	r3, #16
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f005 fee4 	bl	8006270 <memset>
  
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a8:	4b4b      	ldr	r3, [pc, #300]	; (80005d8 <HAL_MspInit+0x150>)
 80004aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ac:	4b4a      	ldr	r3, [pc, #296]	; (80005d8 <HAL_MspInit+0x150>)
 80004ae:	2101      	movs	r1, #1
 80004b0:	430a      	orrs	r2, r1
 80004b2:	641a      	str	r2, [r3, #64]	; 0x40
 80004b4:	4b48      	ldr	r3, [pc, #288]	; (80005d8 <HAL_MspInit+0x150>)
 80004b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b8:	2201      	movs	r2, #1
 80004ba:	4013      	ands	r3, r2
 80004bc:	9303      	str	r3, [sp, #12]
 80004be:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c0:	4b45      	ldr	r3, [pc, #276]	; (80005d8 <HAL_MspInit+0x150>)
 80004c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004c4:	4b44      	ldr	r3, [pc, #272]	; (80005d8 <HAL_MspInit+0x150>)
 80004c6:	2180      	movs	r1, #128	; 0x80
 80004c8:	0549      	lsls	r1, r1, #21
 80004ca:	430a      	orrs	r2, r1
 80004cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80004ce:	4b42      	ldr	r3, [pc, #264]	; (80005d8 <HAL_MspInit+0x150>)
 80004d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004d2:	2380      	movs	r3, #128	; 0x80
 80004d4:	055b      	lsls	r3, r3, #21
 80004d6:	4013      	ands	r3, r2
 80004d8:	9302      	str	r3, [sp, #8]
 80004da:	9b02      	ldr	r3, [sp, #8]
  
  /** Configure the main internal regulator output voltage*/
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f003 ffdb 	bl	800449c <HAL_PWREx_ControlVoltageScaling>
  fVCO = fPLLIN x ( N / M ) = 16MHz x (8 / 1) = 128MHz
  fPLLP = fVCO / P = 128MHz / 2 = 64MHz
  fPLLQ = fVCO / Q = 128MHz / 2 = 64MHz
  fPLLR = fVCO / R = 128MHz / 2 = 64MHz
  */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80004e6:	ab0d      	add	r3, sp, #52	; 0x34
 80004e8:	2202      	movs	r2, #2
 80004ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80004ec:	ab0d      	add	r3, sp, #52	; 0x34
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	0052      	lsls	r2, r2, #1
 80004f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv              = RCC_HSI_DIV1;
 80004f4:	ab0d      	add	r3, sp, #52	; 0x34
 80004f6:	2200      	movs	r2, #0
 80004f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fa:	ab0d      	add	r3, sp, #52	; 0x34
 80004fc:	2240      	movs	r2, #64	; 0x40
 80004fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000500:	ab0d      	add	r3, sp, #52	; 0x34
 8000502:	2202      	movs	r2, #2
 8000504:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8000506:	ab0d      	add	r3, sp, #52	; 0x34
 8000508:	2202      	movs	r2, #2
 800050a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM            = RCC_PLLM_DIV1;
 800050c:	ab0d      	add	r3, sp, #52	; 0x34
 800050e:	2200      	movs	r2, #0
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN            = 8;
 8000512:	ab0d      	add	r3, sp, #52	; 0x34
 8000514:	2208      	movs	r2, #8
 8000516:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
 8000518:	ab0d      	add	r3, sp, #52	; 0x34
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	0292      	lsls	r2, r2, #10
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ            = RCC_PLLQ_DIV2;
 8000520:	ab0d      	add	r3, sp, #52	; 0x34
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	0492      	lsls	r2, r2, #18
 8000526:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR            = RCC_PLLR_DIV2;
 8000528:	ab0d      	add	r3, sp, #52	; 0x34
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	0592      	lsls	r2, r2, #22
 800052e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_RCC_OscConfig( &RCC_OscInitStruct );
 8000530:	ab0d      	add	r3, sp, #52	; 0x34
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fbb4 	bl	8000ca0 <HAL_RCC_OscConfig>
  
  /** Initializes the CPU, AHB and APB buses clocks*/
  RCC_ClkInitStruct.ClockType       = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000538:	ab09      	add	r3, sp, #36	; 0x24
 800053a:	2207      	movs	r2, #7
 800053c:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource    = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	ab09      	add	r3, sp, #36	; 0x24
 8000540:	2202      	movs	r2, #2
 8000542:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider   = RCC_SYSCLK_DIV1;
 8000544:	ab09      	add	r3, sp, #36	; 0x24
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider  = RCC_HCLK_DIV2;
 800054a:	ab09      	add	r3, sp, #36	; 0x24
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	01d2      	lsls	r2, r2, #7
 8000550:	60da      	str	r2, [r3, #12]
  HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 );
 8000552:	ab09      	add	r3, sp, #36	; 0x24
 8000554:	2102      	movs	r1, #2
 8000556:	0018      	movs	r0, r3
 8000558:	f000 ff00 	bl	800135c <HAL_RCC_ClockConfig>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <HAL_MspInit+0x150>)
 800055e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <HAL_MspInit+0x150>)
 8000562:	2102      	movs	r1, #2
 8000564:	430a      	orrs	r2, r1
 8000566:	635a      	str	r2, [r3, #52]	; 0x34
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <HAL_MspInit+0x150>)
 800056a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800056c:	2202      	movs	r2, #2
 800056e:	4013      	ands	r3, r2
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct; /* Structure for GPIO initialization*/
  GPIO_InitStruct.Pin   =  GPIO_PIN_14;             
 8000574:	ab04      	add	r3, sp, #16
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	01d2      	lsls	r2, r2, #7
 800057a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;   
 800057c:	ab04      	add	r3, sp, #16
 800057e:	2201      	movs	r2, #1
 8000580:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;           
 8000582:	ab04      	add	r3, sp, #16
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  
 8000588:	ab04      	add	r3, sp, #16
 800058a:	2202      	movs	r2, #2
 800058c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init( GPIOB, &GPIO_InitStruct );
 800058e:	ab04      	add	r3, sp, #16
 8000590:	4a12      	ldr	r2, [pc, #72]	; (80005dc <HAL_MspInit+0x154>)
 8000592:	0019      	movs	r1, r3
 8000594:	0010      	movs	r0, r2
 8000596:	f001 f867 	bl	8001668 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin   = GPIO_PIN_7;             /*pines a configurar*/
 800059a:	ab04      	add	r3, sp, #16
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING_FALLING;  /*interrupcion por flanco*/
 80005a0:	ab04      	add	r3, sp, #16
 80005a2:	22c4      	movs	r2, #196	; 0xc4
 80005a4:	0392      	lsls	r2, r2, #14
 80005a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;           /*pin sin pull-up ni pull-down*/
 80005a8:	ab04      	add	r3, sp, #16
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  /*pin a baja velocidad*/
 80005ae:	ab04      	add	r3, sp, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	ab04      	add	r3, sp, #16
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <HAL_MspInit+0x154>)
 80005b8:	0019      	movs	r1, r3
 80005ba:	0010      	movs	r0, r2
 80005bc:	f001 f854 	bl	8001668 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority( EXTI4_15_IRQn, 2, 0 );
 80005c0:	2200      	movs	r2, #0
 80005c2:	2102      	movs	r1, #2
 80005c4:	2007      	movs	r0, #7
 80005c6:	f000 fb2b 	bl	8000c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( EXTI4_15_IRQn );
 80005ca:	2007      	movs	r0, #7
 80005cc:	f000 fb3c 	bl	8000c48 <HAL_NVIC_EnableIRQ>
 
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	b01d      	add	sp, #116	; 0x74
 80005d4:	bd00      	pop	{pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40021000 	.word	0x40021000
 80005dc:	50000400 	.word	0x50000400

080005e0 <HAL_FDCAN_MspInit>:
/**
 * @brief  Configure the Gpio resources used for can communication
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *hfdcan)
{
 80005e0:	b500      	push	{lr}
 80005e2:	b08b      	sub	sp, #44	; 0x2c
 80005e4:	9001      	str	r0, [sp, #4]
    (void)hfdcan;
    GPIO_InitTypeDef GpioCanStruct;

    
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <HAL_FDCAN_MspInit+0x7c>)
 80005e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <HAL_FDCAN_MspInit+0x7c>)
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0149      	lsls	r1, r1, #5
 80005f0:	430a      	orrs	r2, r1
 80005f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <HAL_FDCAN_MspInit+0x7c>)
 80005f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	015b      	lsls	r3, r3, #5
 80005fc:	4013      	ands	r3, r2
 80005fe:	9304      	str	r3, [sp, #16]
 8000600:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <HAL_FDCAN_MspInit+0x7c>)
 8000604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_FDCAN_MspInit+0x7c>)
 8000608:	2108      	movs	r1, #8
 800060a:	430a      	orrs	r2, r1
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <HAL_FDCAN_MspInit+0x7c>)
 8000610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000612:	2208      	movs	r2, #8
 8000614:	4013      	ands	r3, r2
 8000616:	9303      	str	r3, [sp, #12]
 8000618:	9b03      	ldr	r3, [sp, #12]
    
    GpioCanStruct.Mode = GPIO_MODE_AF_PP;
 800061a:	ab05      	add	r3, sp, #20
 800061c:	2202      	movs	r2, #2
 800061e:	605a      	str	r2, [r3, #4]
    GpioCanStruct.Alternate = GPIO_AF3_FDCAN1;
 8000620:	ab05      	add	r3, sp, #20
 8000622:	2203      	movs	r2, #3
 8000624:	611a      	str	r2, [r3, #16]
    GpioCanStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000626:	ab05      	add	r3, sp, #20
 8000628:	2203      	movs	r2, #3
 800062a:	601a      	str	r2, [r3, #0]
    GpioCanStruct.Pull = GPIO_NOPULL;
 800062c:	ab05      	add	r3, sp, #20
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
    GpioCanStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000632:	ab05      	add	r3, sp, #20
 8000634:	2202      	movs	r2, #2
 8000636:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init( GPIOD, &GpioCanStruct );
 8000638:	ab05      	add	r3, sp, #20
 800063a:	4a09      	ldr	r2, [pc, #36]	; (8000660 <HAL_FDCAN_MspInit+0x80>)
 800063c:	0019      	movs	r1, r3
 800063e:	0010      	movs	r0, r2
 8000640:	f001 f812 	bl	8001668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 2, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	2102      	movs	r1, #2
 8000648:	2015      	movs	r0, #21
 800064a:	f000 fae9 	bl	8000c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800064e:	2015      	movs	r0, #21
 8000650:	f000 fafa 	bl	8000c48 <HAL_NVIC_EnableIRQ>
    
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	b00b      	add	sp, #44	; 0x2c
 8000658:	bd00      	pop	{pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40021000 	.word	0x40021000
 8000660:	50000c00 	.word	0x50000c00

08000664 <HAL_RTC_MspInit>:

/**
 * @brief  Makes the necessary configuration to use the rtc
 */
void HAL_RTC_MspInit( RTC_HandleTypeDef *rtc ) 
{
 8000664:	b500      	push	{lr}
 8000666:	b0a9      	sub	sp, #164	; 0xa4
 8000668:	9001      	str	r0, [sp, #4]
    (void)rtc;
    RCC_OscInitTypeDef        RCC_OscInitStruct = {0};
 800066a:	ab19      	add	r3, sp, #100	; 0x64
 800066c:	0018      	movs	r0, r3
 800066e:	233c      	movs	r3, #60	; 0x3c
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f005 fdfc 	bl	8006270 <memset>
    RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 8000678:	ab06      	add	r3, sp, #24
 800067a:	0018      	movs	r0, r3
 800067c:	234c      	movs	r3, #76	; 0x4c
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f005 fdf5 	bl	8006270 <memset>

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b37      	ldr	r3, [pc, #220]	; (8000764 <HAL_RTC_MspInit+0x100>)
 8000688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <HAL_RTC_MspInit+0x100>)
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	641a      	str	r2, [r3, #64]	; 0x40
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <HAL_RTC_MspInit+0x100>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	2201      	movs	r2, #1
 8000698:	4013      	ands	r3, r2
 800069a:	9305      	str	r3, [sp, #20]
 800069c:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <HAL_RTC_MspInit+0x100>)
 80006a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <HAL_RTC_MspInit+0x100>)
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	0549      	lsls	r1, r1, #21
 80006a8:	430a      	orrs	r2, r1
 80006aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ac:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <HAL_RTC_MspInit+0x100>)
 80006ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	055b      	lsls	r3, r3, #21
 80006b4:	4013      	ands	r3, r2
 80006b6:	9304      	str	r3, [sp, #16]
 80006b8:	9b04      	ldr	r3, [sp, #16]
    
    /*Eanlble backup domain*/
    HAL_PWREx_ControlVoltageScaling( PWR_REGULATOR_VOLTAGE_SCALE1 );
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	0018      	movs	r0, r3
 80006c0:	f003 feec 	bl	800449c <HAL_PWREx_ControlVoltageScaling>
    HAL_PWR_EnableBkUpAccess();
 80006c4:	f003 fede 	bl	8004484 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG( RCC_LSEDRIVE_LOW );
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <HAL_RTC_MspInit+0x100>)
 80006ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <HAL_RTC_MspInit+0x100>)
 80006ce:	2118      	movs	r1, #24
 80006d0:	438a      	bics	r2, r1
 80006d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /*reset previous RTC source clock*/
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006d4:	ab06      	add	r3, sp, #24
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	0292      	lsls	r2, r2, #10
 80006da:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_NONE;
 80006dc:	ab06      	add	r3, sp, #24
 80006de:	2200      	movs	r2, #0
 80006e0:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_RCCEx_PeriphCLKConfig( &PeriphClkInitStruct );
 80006e2:	ab06      	add	r3, sp, #24
 80006e4:	0018      	movs	r0, r3
 80006e6:	f003 ff17 	bl	8004518 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Configure LSE/LSI as RTC clock source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80006ea:	ab19      	add	r3, sp, #100	; 0x64
 80006ec:	2204      	movs	r2, #4
 80006ee:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f0:	ab19      	add	r3, sp, #100	; 0x64
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006f6:	ab19      	add	r3, sp, #100	; 0x64
 80006f8:	2201      	movs	r2, #1
 80006fa:	609a      	str	r2, [r3, #8]
     RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 80006fc:	ab19      	add	r3, sp, #100	; 0x64
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
    HAL_RCC_OscConfig( &RCC_OscInitStruct );
 8000702:	ab19      	add	r3, sp, #100	; 0x64
 8000704:	0018      	movs	r0, r3
 8000706:	f000 facb 	bl	8000ca0 <HAL_RCC_OscConfig>

    /*Set LSE as source clock*/
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800070a:	ab06      	add	r3, sp, #24
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	0292      	lsls	r2, r2, #10
 8000710:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000712:	ab06      	add	r3, sp, #24
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_RCCEx_PeriphCLKConfig( &PeriphClkInitStruct );
 800071a:	ab06      	add	r3, sp, #24
 800071c:	0018      	movs	r0, r3
 800071e:	f003 fefb 	bl	8004518 <HAL_RCCEx_PeriphCLKConfig>
      
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_RTC_MspInit+0x100>)
 8000724:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_RTC_MspInit+0x100>)
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	0209      	lsls	r1, r1, #8
 800072c:	430a      	orrs	r2, r1
 800072e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_RTC_MspInit+0x100>)
 8000732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <HAL_RTC_MspInit+0x100>)
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	00c9      	lsls	r1, r1, #3
 800073a:	430a      	orrs	r2, r1
 800073c:	63da      	str	r2, [r3, #60]	; 0x3c
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_RTC_MspInit+0x100>)
 8000740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	4013      	ands	r3, r2
 8000748:	9303      	str	r3, [sp, #12]
 800074a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2002      	movs	r0, #2
 8000752:	f000 fa65 	bl	8000c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000756:	2002      	movs	r0, #2
 8000758:	f000 fa76 	bl	8000c48 <HAL_NVIC_EnableIRQ>
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	b029      	add	sp, #164	; 0xa4
 8000760:	bd00      	pop	{pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_SPI_MspInit>:
void HAL_SPI_MspInit( SPI_HandleTypeDef *hspi )
{
 8000768:	b500      	push	{lr}
 800076a:	b08b      	sub	sp, #44	; 0x2c
 800076c:	9001      	str	r0, [sp, #4]
    (void)hspi;
    /*pines B13, B14 y B15 en funcion alterna spi1 */
    GPIO_InitTypeDef GPIO_InitStruct;
    __GPIOB_CLK_ENABLE();
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <HAL_SPI_MspInit+0x6c>)
 8000770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_SPI_MspInit+0x6c>)
 8000774:	2102      	movs	r1, #2
 8000776:	430a      	orrs	r2, r1
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <HAL_SPI_MspInit+0x6c>)
 800077c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800077e:	2202      	movs	r2, #2
 8000780:	4013      	ands	r3, r2
 8000782:	9304      	str	r3, [sp, #16]
 8000784:	9b04      	ldr	r3, [sp, #16]
    __SPI2_CLK_ENABLE();
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <HAL_SPI_MspInit+0x6c>)
 8000788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_SPI_MspInit+0x6c>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	01c9      	lsls	r1, r1, #7
 8000790:	430a      	orrs	r2, r1
 8000792:	63da      	str	r2, [r3, #60]	; 0x3c
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_SPI_MspInit+0x6c>)
 8000796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	01db      	lsls	r3, r3, #7
 800079c:	4013      	ands	r3, r2
 800079e:	9303      	str	r3, [sp, #12]
 80007a0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_11;
 80007a2:	ab05      	add	r3, sp, #20
 80007a4:	22a0      	movs	r2, #160	; 0xa0
 80007a6:	0192      	lsls	r2, r2, #6
 80007a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	ab05      	add	r3, sp, #20
 80007ac:	2202      	movs	r2, #2
 80007ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b0:	ab05      	add	r3, sp, #20
 80007b2:	2201      	movs	r2, #1
 80007b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b6:	ab05      	add	r3, sp, #20
 80007b8:	2202      	movs	r2, #2
 80007ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80007bc:	ab05      	add	r3, sp, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	ab05      	add	r3, sp, #20
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_SPI_MspInit+0x70>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f000 ff4d 	bl	8001668 <HAL_GPIO_Init>
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	b00b      	add	sp, #44	; 0x2c
 80007d2:	bd00      	pop	{pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	50000400 	.word	0x50000400

080007dc <HEL_LCD_MspInit>:

void HEL_LCD_MspInit( LCD_HandleTypeDef *hlcd ) /* cppcheck-suppress misra-c2012-8.6 ; Bug with weekly linked fuctions this is a false/positive */
{
 80007dc:	b500      	push	{lr}
 80007de:	b08b      	sub	sp, #44	; 0x2c
 80007e0:	9001      	str	r0, [sp, #4]
  (void)hlcd;
  __GPIOC_CLK_ENABLE();
 80007e2:	4b2e      	ldr	r3, [pc, #184]	; (800089c <HEL_LCD_MspInit+0xc0>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <HEL_LCD_MspInit+0xc0>)
 80007e8:	2104      	movs	r1, #4
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <HEL_LCD_MspInit+0xc0>)
 80007f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f2:	2204      	movs	r2, #4
 80007f4:	4013      	ands	r3, r2
 80007f6:	9304      	str	r3, [sp, #16]
 80007f8:	9b04      	ldr	r3, [sp, #16]
  __GPIOB_CLK_ENABLE();
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <HEL_LCD_MspInit+0xc0>)
 80007fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <HEL_LCD_MspInit+0xc0>)
 8000800:	2102      	movs	r1, #2
 8000802:	430a      	orrs	r2, r1
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <HEL_LCD_MspInit+0xc0>)
 8000808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080a:	2202      	movs	r2, #2
 800080c:	4013      	ands	r3, r2
 800080e:	9303      	str	r3, [sp, #12]
 8000810:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct; /* Structure for GPIO initialization*/
  GPIO_InitStruct.Pin   =  GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_12;             
 8000812:	ab05      	add	r3, sp, #20
 8000814:	2298      	movs	r2, #152	; 0x98
 8000816:	0152      	lsls	r2, r2, #5
 8000818:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;   
 800081a:	ab05      	add	r3, sp, #20
 800081c:	2201      	movs	r2, #1
 800081e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;           
 8000820:	ab05      	add	r3, sp, #20
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  
 8000826:	ab05      	add	r3, sp, #20
 8000828:	2202      	movs	r2, #2
 800082a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 800082c:	ab05      	add	r3, sp, #20
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <HEL_LCD_MspInit+0xc4>)
 8000830:	0019      	movs	r1, r3
 8000832:	0010      	movs	r0, r2
 8000834:	f000 ff18 	bl	8001668 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin   = GPIO_PIN_15;
 8000838:	ab05      	add	r3, sp, #20
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	0212      	lsls	r2, r2, #8
 800083e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000840:	ab05      	add	r3, sp, #20
 8000842:	2201      	movs	r2, #1
 8000844:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000846:	ab05      	add	r3, sp, #20
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084c:	ab05      	add	r3, sp, #20
 800084e:	2202      	movs	r2, #2
 8000850:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	ab05      	add	r3, sp, #20
 8000854:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <HEL_LCD_MspInit+0xc8>)
 8000856:	0019      	movs	r1, r3
 8000858:	0010      	movs	r0, r2
 800085a:	f000 ff05 	bl	8001668 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,SET);
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	4810      	ldr	r0, [pc, #64]	; (80008a4 <HEL_LCD_MspInit+0xc8>)
 8000864:	2201      	movs	r2, #1
 8000866:	0019      	movs	r1, r3
 8000868:	f001 f868 	bl	800193c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,RESET);
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	015b      	lsls	r3, r3, #5
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <HEL_LCD_MspInit+0xc4>)
 8000872:	2200      	movs	r2, #0
 8000874:	0019      	movs	r1, r3
 8000876:	f001 f861 	bl	800193c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,SET);
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4808      	ldr	r0, [pc, #32]	; (80008a0 <HEL_LCD_MspInit+0xc4>)
 8000880:	2201      	movs	r2, #1
 8000882:	0019      	movs	r1, r3
 8000884:	f001 f85a 	bl	800193c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,SET);
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <HEL_LCD_MspInit+0xc4>)
 800088e:	2201      	movs	r2, #1
 8000890:	0019      	movs	r1, r3
 8000892:	f001 f853 	bl	800193c <HAL_GPIO_WritePin>
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	b00b      	add	sp, #44	; 0x2c
 800089a:	bd00      	pop	{pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	50000800 	.word	0x50000800
 80008a4:	50000400 	.word	0x50000400

080008a8 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80008a8:	b084      	sub	sp, #16
 80008aa:	9001      	str	r0, [sp, #4]
  if(hwwdg->Instance==WWDG)
 80008ac:	9b01      	ldr	r3, [sp, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <HAL_WWDG_MspInit+0x30>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d10d      	bne.n	80008d2 <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_WWDG_MspInit+0x34>)
 80008b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_WWDG_MspInit+0x34>)
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	0109      	lsls	r1, r1, #4
 80008c0:	430a      	orrs	r2, r1
 80008c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_WWDG_MspInit+0x34>)
 80008c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4013      	ands	r3, r2
 80008ce:	9303      	str	r3, [sp, #12]
 80008d0:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	b004      	add	sp, #16
 80008d6:	4770      	bx	lr
 80008d8:	40002c00 	.word	0x40002c00
 80008dc:	40021000 	.word	0x40021000

080008e0 <Reset_Handler>:
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <LoopForever+0x2>)
 80008e2:	4685      	mov	sp, r0
 80008e4:	f000 f825 	bl	8000932 <SystemInit>
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <LoopForever+0x6>)
 80008ea:	490d      	ldr	r1, [pc, #52]	; (8000920 <LoopForever+0xa>)
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <LoopForever+0xe>)
 80008ee:	2300      	movs	r3, #0
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:
 80008f2:	58d4      	ldr	r4, [r2, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:
 80008f8:	18c4      	adds	r4, r0, r3
 80008fa:	428c      	cmp	r4, r1
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <LoopForever+0x12>)
 8000900:	4c0a      	ldr	r4, [pc, #40]	; (800092c <LoopForever+0x16>)
 8000902:	2300      	movs	r3, #0
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:
 800090a:	42a2      	cmp	r2, r4
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>
 800090e:	f005 fcc5 	bl	800629c <__libc_init_array>
 8000912:	f7ff fc9b 	bl	800024c <main>

08000916 <LoopForever>:
 8000916:	e7fe      	b.n	8000916 <LoopForever>
 8000918:	20024000 	.word	0x20024000
 800091c:	20000000 	.word	0x20000000
 8000920:	2000000c 	.word	0x2000000c
 8000924:	08006554 	.word	0x08006554
 8000928:	2000000c 	.word	0x2000000c
 800092c:	2000610c 	.word	0x2000610c

08000930 <ADC1_COMP_IRQHandler>:
 8000930:	e7fe      	b.n	8000930 <ADC1_COMP_IRQHandler>

08000932 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	4770      	bx	lr
	...

08000938 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b500      	push	{lr}
 800093a:	b083      	sub	sp, #12
  HAL_StatusTypeDef  status = HAL_OK;
 800093c:	466b      	mov	r3, sp
 800093e:	3307      	adds	r3, #7
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_Init+0x40>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_Init+0x40>)
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	0049      	lsls	r1, r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000952:	2000      	movs	r0, #0
 8000954:	f000 f812 	bl	800097c <HAL_InitTick>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d004      	beq.n	8000966 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800095c:	466b      	mov	r3, sp
 800095e:	3307      	adds	r3, #7
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e001      	b.n	800096a <HAL_Init+0x32>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000966:	f7ff fd8f 	bl	8000488 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096a:	466b      	mov	r3, sp
 800096c:	3307      	adds	r3, #7
 800096e:	781b      	ldrb	r3, [r3, #0]
}
 8000970:	0018      	movs	r0, r3
 8000972:	b003      	add	sp, #12
 8000974:	bd00      	pop	{pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b510      	push	{r4, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000982:	230f      	movs	r3, #15
 8000984:	446b      	add	r3, sp
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HAL_InitTick+0x84>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d02b      	beq.n	80009ea <HAL_InitTick+0x6e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_InitTick+0x88>)
 8000994:	681c      	ldr	r4, [r3, #0]
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <HAL_InitTick+0x84>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	0019      	movs	r1, r3
 800099c:	23fa      	movs	r3, #250	; 0xfa
 800099e:	0098      	lsls	r0, r3, #2
 80009a0:	f7ff fb8c 	bl	80000bc <__udivsi3>
 80009a4:	0003      	movs	r3, r0
 80009a6:	0019      	movs	r1, r3
 80009a8:	0020      	movs	r0, r4
 80009aa:	f7ff fb87 	bl	80000bc <__udivsi3>
 80009ae:	0003      	movs	r3, r0
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 f969 	bl	8000c88 <HAL_SYSTICK_Config>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d112      	bne.n	80009e0 <HAL_InitTick+0x64>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	9b01      	ldr	r3, [sp, #4]
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x5a>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	9901      	ldr	r1, [sp, #4]
 80009c2:	2301      	movs	r3, #1
 80009c4:	425b      	negs	r3, r3
 80009c6:	2200      	movs	r2, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 f929 	bl	8000c20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_InitTick+0x8c>)
 80009d0:	9a01      	ldr	r2, [sp, #4]
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e00d      	b.n	80009f2 <HAL_InitTick+0x76>
      }
      else
      {
        status = HAL_ERROR;
 80009d6:	230f      	movs	r3, #15
 80009d8:	446b      	add	r3, sp
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e008      	b.n	80009f2 <HAL_InitTick+0x76>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e0:	230f      	movs	r3, #15
 80009e2:	446b      	add	r3, sp
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e003      	b.n	80009f2 <HAL_InitTick+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ea:	230f      	movs	r3, #15
 80009ec:	446b      	add	r3, sp
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009f2:	230f      	movs	r3, #15
 80009f4:	446b      	add	r3, sp
 80009f6:	781b      	ldrb	r3, [r3, #0]
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	b004      	add	sp, #16
 80009fc:	bd10      	pop	{r4, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <HAL_IncTick+0x14>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	001a      	movs	r2, r3
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <HAL_IncTick+0x18>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	18d2      	adds	r2, r2, r3
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <HAL_IncTick+0x18>)
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	4770      	bx	lr
 8000a20:	20000008 	.word	0x20000008
 8000a24:	200000d4 	.word	0x200000d4

08000a28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a28:	4b01      	ldr	r3, [pc, #4]	; (8000a30 <HAL_GetTick+0x8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	4770      	bx	lr
 8000a30:	200000d4 	.word	0x200000d4

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b500      	push	{lr}
 8000a36:	b085      	sub	sp, #20
 8000a38:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3a:	f7ff fff5 	bl	8000a28 <HAL_GetTick>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	9302      	str	r3, [sp, #8]
  uint32_t wait = Delay;
 8000a42:	9b01      	ldr	r3, [sp, #4]
 8000a44:	9303      	str	r3, [sp, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	9b03      	ldr	r3, [sp, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	d005      	beq.n	8000a58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_Delay+0x40>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	001a      	movs	r2, r3
 8000a52:	9b03      	ldr	r3, [sp, #12]
 8000a54:	189b      	adds	r3, r3, r2
 8000a56:	9303      	str	r3, [sp, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	f7ff ffe5 	bl	8000a28 <HAL_GetTick>
 8000a5e:	0002      	movs	r2, r0
 8000a60:	9b02      	ldr	r3, [sp, #8]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	9a03      	ldr	r2, [sp, #12]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d8f7      	bhi.n	8000a5a <HAL_Delay+0x26>
  {
  }
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	b005      	add	sp, #20
 8000a70:	bd00      	pop	{pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	20000008 	.word	0x20000008

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b082      	sub	sp, #8
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	466b      	mov	r3, sp
 8000a7e:	3307      	adds	r3, #7
 8000a80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	466b      	mov	r3, sp
 8000a84:	3307      	adds	r3, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b7f      	cmp	r3, #127	; 0x7f
 8000a8a:	d80a      	bhi.n	8000aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8c:	466b      	mov	r3, sp
 8000a8e:	3307      	adds	r3, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	001a      	movs	r2, r3
 8000a94:	231f      	movs	r3, #31
 8000a96:	401a      	ands	r2, r3
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <__NVIC_EnableIRQ+0x30>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	000a      	movs	r2, r1
 8000aa0:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	b002      	add	sp, #8
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000aac:	b082      	sub	sp, #8
 8000aae:	0002      	movs	r2, r0
 8000ab0:	466b      	mov	r3, sp
 8000ab2:	3307      	adds	r3, #7
 8000ab4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	466b      	mov	r3, sp
 8000ab8:	3307      	adds	r3, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b7f      	cmp	r3, #127	; 0x7f
 8000abe:	d811      	bhi.n	8000ae4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac0:	466b      	mov	r3, sp
 8000ac2:	3307      	adds	r3, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	231f      	movs	r3, #31
 8000aca:	4013      	ands	r3, r2
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <__NVIC_DisableIRQ+0x40>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	409a      	lsls	r2, r3
 8000ad2:	0013      	movs	r3, r2
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ad8:	f3bf 8f4f 	dsb	sy
}
 8000adc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8000ade:	f3bf 8f6f 	isb	sy
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	b002      	add	sp, #8
 8000ae8:	4770      	bx	lr
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b510      	push	{r4, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	0002      	movs	r2, r0
 8000af6:	9100      	str	r1, [sp, #0]
 8000af8:	466b      	mov	r3, sp
 8000afa:	3307      	adds	r3, #7
 8000afc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	466b      	mov	r3, sp
 8000b00:	3307      	adds	r3, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b7f      	cmp	r3, #127	; 0x7f
 8000b06:	d82c      	bhi.n	8000b62 <__NVIC_SetPriority+0x72>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b08:	4a32      	ldr	r2, [pc, #200]	; (8000bd4 <__NVIC_SetPriority+0xe4>)
 8000b0a:	466b      	mov	r3, sp
 8000b0c:	3307      	adds	r3, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	33c0      	adds	r3, #192	; 0xc0
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	589b      	ldr	r3, [r3, r2]
 8000b1a:	466a      	mov	r2, sp
 8000b1c:	3207      	adds	r2, #7
 8000b1e:	7812      	ldrb	r2, [r2, #0]
 8000b20:	0011      	movs	r1, r2
 8000b22:	2203      	movs	r2, #3
 8000b24:	400a      	ands	r2, r1
 8000b26:	00d2      	lsls	r2, r2, #3
 8000b28:	21ff      	movs	r1, #255	; 0xff
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	000a      	movs	r2, r1
 8000b2e:	43d2      	mvns	r2, r2
 8000b30:	401a      	ands	r2, r3
 8000b32:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b34:	9b00      	ldr	r3, [sp, #0]
 8000b36:	019b      	lsls	r3, r3, #6
 8000b38:	22ff      	movs	r2, #255	; 0xff
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	466b      	mov	r3, sp
 8000b3e:	3307      	adds	r3, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	2303      	movs	r3, #3
 8000b46:	4003      	ands	r3, r0
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4c:	4821      	ldr	r0, [pc, #132]	; (8000bd4 <__NVIC_SetPriority+0xe4>)
 8000b4e:	466b      	mov	r3, sp
 8000b50:	3307      	adds	r3, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	33c0      	adds	r3, #192	; 0xc0
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b60:	e035      	b.n	8000bce <__NVIC_SetPriority+0xde>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b62:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <__NVIC_SetPriority+0xe8>)
 8000b64:	466b      	mov	r3, sp
 8000b66:	3307      	adds	r3, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	400b      	ands	r3, r1
 8000b70:	3b08      	subs	r3, #8
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3306      	adds	r3, #6
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	18d3      	adds	r3, r2, r3
 8000b7a:	3304      	adds	r3, #4
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	466a      	mov	r2, sp
 8000b80:	3207      	adds	r2, #7
 8000b82:	7812      	ldrb	r2, [r2, #0]
 8000b84:	0011      	movs	r1, r2
 8000b86:	2203      	movs	r2, #3
 8000b88:	400a      	ands	r2, r1
 8000b8a:	00d2      	lsls	r2, r2, #3
 8000b8c:	21ff      	movs	r1, #255	; 0xff
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	000a      	movs	r2, r1
 8000b92:	43d2      	mvns	r2, r2
 8000b94:	401a      	ands	r2, r3
 8000b96:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b98:	9b00      	ldr	r3, [sp, #0]
 8000b9a:	019b      	lsls	r3, r3, #6
 8000b9c:	22ff      	movs	r2, #255	; 0xff
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	466b      	mov	r3, sp
 8000ba2:	3307      	adds	r3, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2303      	movs	r3, #3
 8000baa:	4003      	ands	r3, r0
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <__NVIC_SetPriority+0xe8>)
 8000bb2:	466b      	mov	r3, sp
 8000bb4:	3307      	adds	r3, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	001c      	movs	r4, r3
 8000bba:	230f      	movs	r3, #15
 8000bbc:	4023      	ands	r3, r4
 8000bbe:	3b08      	subs	r3, #8
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	3306      	adds	r3, #6
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	18c3      	adds	r3, r0, r3
 8000bca:	3304      	adds	r3, #4
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd10      	pop	{r4, pc}
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b500      	push	{lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	9001      	str	r0, [sp, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be2:	9b01      	ldr	r3, [sp, #4]
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	045b      	lsls	r3, r3, #17
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e010      	b.n	8000c14 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <SysTick_Config+0x40>)
 8000bf4:	9a01      	ldr	r2, [sp, #4]
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	2103      	movs	r1, #3
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff ff75 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x40>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <SysTick_Config+0x40>)
 8000c0e:	2207      	movs	r2, #7
 8000c10:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	b003      	add	sp, #12
 8000c18:	bd00      	pop	{pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b500      	push	{lr}
 8000c22:	b085      	sub	sp, #20
 8000c24:	9102      	str	r1, [sp, #8]
 8000c26:	9201      	str	r2, [sp, #4]
 8000c28:	230f      	movs	r3, #15
 8000c2a:	446b      	add	r3, sp
 8000c2c:	1c02      	adds	r2, r0, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c30:	9a02      	ldr	r2, [sp, #8]
 8000c32:	230f      	movs	r3, #15
 8000c34:	446b      	add	r3, sp
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ff57 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	b005      	add	sp, #20
 8000c46:	bd00      	pop	{pc}

08000c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b500      	push	{lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	466b      	mov	r3, sp
 8000c50:	3307      	adds	r3, #7
 8000c52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c54:	466b      	mov	r3, sp
 8000c56:	3307      	adds	r3, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff ff0b 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	b003      	add	sp, #12
 8000c66:	bd00      	pop	{pc}

08000c68 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c68:	b500      	push	{lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	466b      	mov	r3, sp
 8000c70:	3307      	adds	r3, #7
 8000c72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000c74:	466b      	mov	r3, sp
 8000c76:	3307      	adds	r3, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b25b      	sxtb	r3, r3
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ff15 	bl	8000aac <__NVIC_DisableIRQ>
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	b003      	add	sp, #12
 8000c86:	bd00      	pop	{pc}

08000c88 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c88:	b500      	push	{lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	9001      	str	r0, [sp, #4]
  return SysTick_Config(TicksNumb);
 8000c8e:	9b01      	ldr	r3, [sp, #4]
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff ffa3 	bl	8000bdc <SysTick_Config>
 8000c96:	0003      	movs	r3, r0
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	b003      	add	sp, #12
 8000c9c:	bd00      	pop	{pc}
	...

08000ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca0:	b500      	push	{lr}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ca6:	9b01      	ldr	r3, [sp, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	f000 fb4f 	bl	8001350 <HAL_RCC_OscConfig+0x6b0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb2:	9b01      	ldr	r3, [sp, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4013      	ands	r3, r2
 8000cba:	d100      	bne.n	8000cbe <HAL_RCC_OscConfig+0x1e>
 8000cbc:	e07c      	b.n	8000db8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cbe:	4bc3      	ldr	r3, [pc, #780]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2238      	movs	r2, #56	; 0x38
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	9306      	str	r3, [sp, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cc8:	4bc0      	ldr	r3, [pc, #768]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	2203      	movs	r2, #3
 8000cce:	4013      	ands	r3, r2
 8000cd0:	9305      	str	r3, [sp, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000cd2:	9b06      	ldr	r3, [sp, #24]
 8000cd4:	2b10      	cmp	r3, #16
 8000cd6:	d102      	bne.n	8000cde <HAL_RCC_OscConfig+0x3e>
 8000cd8:	9b05      	ldr	r3, [sp, #20]
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d002      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000cde:	9b06      	ldr	r3, [sp, #24]
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d10b      	bne.n	8000cfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce4:	4bb9      	ldr	r3, [pc, #740]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	029b      	lsls	r3, r3, #10
 8000cec:	4013      	ands	r3, r2
 8000cee:	d062      	beq.n	8000db6 <HAL_RCC_OscConfig+0x116>
 8000cf0:	9b01      	ldr	r3, [sp, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d15e      	bne.n	8000db6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e329      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cfc:	9b01      	ldr	r3, [sp, #4]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	025b      	lsls	r3, r3, #9
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d107      	bne.n	8000d18 <HAL_RCC_OscConfig+0x78>
 8000d08:	4bb0      	ldr	r3, [pc, #704]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4baf      	ldr	r3, [pc, #700]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	0249      	lsls	r1, r1, #9
 8000d12:	430a      	orrs	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e020      	b.n	8000d5a <HAL_RCC_OscConfig+0xba>
 8000d18:	9b01      	ldr	r3, [sp, #4]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	02db      	lsls	r3, r3, #11
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d10e      	bne.n	8000d42 <HAL_RCC_OscConfig+0xa2>
 8000d24:	4ba9      	ldr	r3, [pc, #676]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4ba8      	ldr	r3, [pc, #672]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d2a:	2180      	movs	r1, #128	; 0x80
 8000d2c:	02c9      	lsls	r1, r1, #11
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	4ba6      	ldr	r3, [pc, #664]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4ba5      	ldr	r3, [pc, #660]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	0249      	lsls	r1, r1, #9
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e00b      	b.n	8000d5a <HAL_RCC_OscConfig+0xba>
 8000d42:	4ba2      	ldr	r3, [pc, #648]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4ba1      	ldr	r3, [pc, #644]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d48:	49a1      	ldr	r1, [pc, #644]	; (8000fd0 <HAL_RCC_OscConfig+0x330>)
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	4b9f      	ldr	r3, [pc, #636]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b9e      	ldr	r3, [pc, #632]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d54:	499f      	ldr	r1, [pc, #636]	; (8000fd4 <HAL_RCC_OscConfig+0x334>)
 8000d56:	400a      	ands	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d5a:	9b01      	ldr	r3, [sp, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d014      	beq.n	8000d8c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d62:	f7ff fe61 	bl	8000a28 <HAL_GetTick>
 8000d66:	0003      	movs	r3, r0
 8000d68:	9304      	str	r3, [sp, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d6c:	f7ff fe5c 	bl	8000a28 <HAL_GetTick>
 8000d70:	0002      	movs	r2, r0
 8000d72:	9b04      	ldr	r3, [sp, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b64      	cmp	r3, #100	; 0x64
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e2e8      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d7e:	4b93      	ldr	r3, [pc, #588]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	029b      	lsls	r3, r3, #10
 8000d86:	4013      	ands	r3, r2
 8000d88:	d0f0      	beq.n	8000d6c <HAL_RCC_OscConfig+0xcc>
 8000d8a:	e015      	b.n	8000db8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d8c:	f7ff fe4c 	bl	8000a28 <HAL_GetTick>
 8000d90:	0003      	movs	r3, r0
 8000d92:	9304      	str	r3, [sp, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d96:	f7ff fe47 	bl	8000a28 <HAL_GetTick>
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	9b04      	ldr	r3, [sp, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b64      	cmp	r3, #100	; 0x64
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e2d3      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000da8:	4b88      	ldr	r3, [pc, #544]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	029b      	lsls	r3, r3, #10
 8000db0:	4013      	ands	r3, r2
 8000db2:	d1f0      	bne.n	8000d96 <HAL_RCC_OscConfig+0xf6>
 8000db4:	e000      	b.n	8000db8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000db8:	9b01      	ldr	r3, [sp, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	d100      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x124>
 8000dc2:	e099      	b.n	8000ef8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dc4:	4b81      	ldr	r3, [pc, #516]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2238      	movs	r2, #56	; 0x38
 8000dca:	4013      	ands	r3, r2
 8000dcc:	9306      	str	r3, [sp, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dce:	4b7f      	ldr	r3, [pc, #508]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	9305      	str	r3, [sp, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000dd8:	9b06      	ldr	r3, [sp, #24]
 8000dda:	2b10      	cmp	r3, #16
 8000ddc:	d102      	bne.n	8000de4 <HAL_RCC_OscConfig+0x144>
 8000dde:	9b05      	ldr	r3, [sp, #20]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d002      	beq.n	8000dea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000de4:	9b06      	ldr	r3, [sp, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d135      	bne.n	8000e56 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dea:	4b78      	ldr	r3, [pc, #480]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4013      	ands	r3, r2
 8000df4:	d005      	beq.n	8000e02 <HAL_RCC_OscConfig+0x162>
 8000df6:	9b01      	ldr	r3, [sp, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e2a6      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e02:	4b72      	ldr	r3, [pc, #456]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4a74      	ldr	r2, [pc, #464]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	9b01      	ldr	r3, [sp, #4]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	021a      	lsls	r2, r3, #8
 8000e12:	4b6e      	ldr	r3, [pc, #440]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000e14:	430a      	orrs	r2, r1
 8000e16:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e18:	9b06      	ldr	r3, [sp, #24]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d112      	bne.n	8000e44 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e1e:	4b6b      	ldr	r3, [pc, #428]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a6e      	ldr	r2, [pc, #440]	; (8000fdc <HAL_RCC_OscConfig+0x33c>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	0019      	movs	r1, r3
 8000e28:	9b01      	ldr	r3, [sp, #4]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	4b67      	ldr	r3, [pc, #412]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e32:	4b66      	ldr	r3, [pc, #408]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	0adb      	lsrs	r3, r3, #11
 8000e38:	2207      	movs	r2, #7
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	4a68      	ldr	r2, [pc, #416]	; (8000fe0 <HAL_RCC_OscConfig+0x340>)
 8000e3e:	40da      	lsrs	r2, r3
 8000e40:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000e42:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e44:	4b68      	ldr	r3, [pc, #416]	; (8000fe8 <HAL_RCC_OscConfig+0x348>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff fd97 	bl	800097c <HAL_InitTick>
 8000e4e:	1e03      	subs	r3, r0, #0
 8000e50:	d051      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e27c      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e56:	9b01      	ldr	r3, [sp, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d030      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e5e:	4b5b      	ldr	r3, [pc, #364]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a5e      	ldr	r2, [pc, #376]	; (8000fdc <HAL_RCC_OscConfig+0x33c>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	0019      	movs	r1, r3
 8000e68:	9b01      	ldr	r3, [sp, #4]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	4b57      	ldr	r3, [pc, #348]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000e72:	4b56      	ldr	r3, [pc, #344]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b55      	ldr	r3, [pc, #340]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	0049      	lsls	r1, r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e80:	f7ff fdd2 	bl	8000a28 <HAL_GetTick>
 8000e84:	0003      	movs	r3, r0
 8000e86:	9304      	str	r3, [sp, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fdcd 	bl	8000a28 <HAL_GetTick>
 8000e8e:	0002      	movs	r2, r0
 8000e90:	9b04      	ldr	r3, [sp, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e259      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e9c:	4b4b      	ldr	r3, [pc, #300]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea8:	4b48      	ldr	r3, [pc, #288]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	4a4a      	ldr	r2, [pc, #296]	; (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	9b01      	ldr	r3, [sp, #4]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	021a      	lsls	r2, r3, #8
 8000eb8:	4b44      	ldr	r3, [pc, #272]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	e01b      	b.n	8000ef8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000ec0:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	4949      	ldr	r1, [pc, #292]	; (8000fec <HAL_RCC_OscConfig+0x34c>)
 8000ec8:	400a      	ands	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fdac 	bl	8000a28 <HAL_GetTick>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	9304      	str	r3, [sp, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed6:	f7ff fda7 	bl	8000a28 <HAL_GetTick>
 8000eda:	0002      	movs	r2, r0
 8000edc:	9b04      	ldr	r3, [sp, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e233      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ee8:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d1f0      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x236>
 8000ef4:	e000      	b.n	8000ef8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ef6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef8:	9b01      	ldr	r3, [sp, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2208      	movs	r2, #8
 8000efe:	4013      	ands	r3, r2
 8000f00:	d047      	beq.n	8000f92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f02:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	2238      	movs	r2, #56	; 0x38
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b18      	cmp	r3, #24
 8000f0c:	d10a      	bne.n	8000f24 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	2202      	movs	r2, #2
 8000f14:	4013      	ands	r3, r2
 8000f16:	d03c      	beq.n	8000f92 <HAL_RCC_OscConfig+0x2f2>
 8000f18:	9b01      	ldr	r3, [sp, #4]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d138      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e215      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f24:	9b01      	ldr	r3, [sp, #4]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d019      	beq.n	8000f60 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000f2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f38:	f7ff fd76 	bl	8000a28 <HAL_GetTick>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	9304      	str	r3, [sp, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f42:	f7ff fd71 	bl	8000a28 <HAL_GetTick>
 8000f46:	0002      	movs	r2, r0
 8000f48:	9b04      	ldr	r3, [sp, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e1fd      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f58:	2202      	movs	r2, #2
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d0f1      	beq.n	8000f42 <HAL_RCC_OscConfig+0x2a2>
 8000f5e:	e018      	b.n	8000f92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000f62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	438a      	bics	r2, r1
 8000f6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fd5c 	bl	8000a28 <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	9304      	str	r3, [sp, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f76:	f7ff fd57 	bl	8000a28 <HAL_GetTick>
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	9b04      	ldr	r3, [sp, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e1e3      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d1f1      	bne.n	8000f76 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f92:	9b01      	ldr	r3, [sp, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2204      	movs	r2, #4
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d100      	bne.n	8000f9e <HAL_RCC_OscConfig+0x2fe>
 8000f9c:	e0c6      	b.n	800112c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f9e:	231f      	movs	r3, #31
 8000fa0:	446b      	add	r3, sp
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2238      	movs	r2, #56	; 0x38
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b20      	cmp	r3, #32
 8000fb0:	d11e      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_RCC_OscConfig+0x32c>)
 8000fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d100      	bne.n	8000fbe <HAL_RCC_OscConfig+0x31e>
 8000fbc:	e0b6      	b.n	800112c <HAL_RCC_OscConfig+0x48c>
 8000fbe:	9b01      	ldr	r3, [sp, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d000      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x328>
 8000fc6:	e0b1      	b.n	800112c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e1c1      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	fffeffff 	.word	0xfffeffff
 8000fd4:	fffbffff 	.word	0xfffbffff
 8000fd8:	ffff80ff 	.word	0xffff80ff
 8000fdc:	ffffc7ff 	.word	0xffffc7ff
 8000fe0:	00f42400 	.word	0x00f42400
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000ff0:	4bb5      	ldr	r3, [pc, #724]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8000ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	055b      	lsls	r3, r3, #21
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d101      	bne.n	8001000 <HAL_RCC_OscConfig+0x360>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_RCC_OscConfig+0x362>
 8001000:	2300      	movs	r3, #0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d011      	beq.n	800102a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4bb0      	ldr	r3, [pc, #704]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800100a:	4baf      	ldr	r3, [pc, #700]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	0549      	lsls	r1, r1, #21
 8001010:	430a      	orrs	r2, r1
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
 8001014:	4bac      	ldr	r3, [pc, #688]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	055b      	lsls	r3, r3, #21
 800101c:	4013      	ands	r3, r2
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8001022:	231f      	movs	r3, #31
 8001024:	446b      	add	r3, sp
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800102a:	4ba8      	ldr	r3, [pc, #672]	; (80012cc <HAL_RCC_OscConfig+0x62c>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4013      	ands	r3, r2
 8001034:	d11a      	bne.n	800106c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001036:	4ba5      	ldr	r3, [pc, #660]	; (80012cc <HAL_RCC_OscConfig+0x62c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4ba4      	ldr	r3, [pc, #656]	; (80012cc <HAL_RCC_OscConfig+0x62c>)
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	0049      	lsls	r1, r1, #1
 8001040:	430a      	orrs	r2, r1
 8001042:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001044:	f7ff fcf0 	bl	8000a28 <HAL_GetTick>
 8001048:	0003      	movs	r3, r0
 800104a:	9304      	str	r3, [sp, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800104e:	f7ff fceb 	bl	8000a28 <HAL_GetTick>
 8001052:	0002      	movs	r2, r0
 8001054:	9b04      	ldr	r3, [sp, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e177      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001060:	4b9a      	ldr	r3, [pc, #616]	; (80012cc <HAL_RCC_OscConfig+0x62c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4013      	ands	r3, r2
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106c:	9b01      	ldr	r3, [sp, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d106      	bne.n	8001082 <HAL_RCC_OscConfig+0x3e2>
 8001074:	4b94      	ldr	r3, [pc, #592]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001076:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001078:	4b93      	ldr	r3, [pc, #588]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800107a:	2101      	movs	r1, #1
 800107c:	430a      	orrs	r2, r1
 800107e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001080:	e01c      	b.n	80010bc <HAL_RCC_OscConfig+0x41c>
 8001082:	9b01      	ldr	r3, [sp, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b05      	cmp	r3, #5
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x404>
 800108a:	4b8f      	ldr	r3, [pc, #572]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800108c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800108e:	4b8e      	ldr	r3, [pc, #568]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001090:	2104      	movs	r1, #4
 8001092:	430a      	orrs	r2, r1
 8001094:	65da      	str	r2, [r3, #92]	; 0x5c
 8001096:	4b8c      	ldr	r3, [pc, #560]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001098:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800109a:	4b8b      	ldr	r3, [pc, #556]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800109c:	2101      	movs	r1, #1
 800109e:	430a      	orrs	r2, r1
 80010a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0x41c>
 80010a4:	4b88      	ldr	r3, [pc, #544]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80010a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010a8:	4b87      	ldr	r3, [pc, #540]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	438a      	bics	r2, r1
 80010ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80010b0:	4b85      	ldr	r3, [pc, #532]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80010b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010b4:	4b84      	ldr	r3, [pc, #528]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80010b6:	2104      	movs	r1, #4
 80010b8:	438a      	bics	r2, r1
 80010ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010bc:	9b01      	ldr	r3, [sp, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d014      	beq.n	80010ee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c4:	f7ff fcb0 	bl	8000a28 <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	9304      	str	r3, [sp, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010cc:	e009      	b.n	80010e2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff fcab 	bl	8000a28 <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	9b04      	ldr	r3, [sp, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	4a7d      	ldr	r2, [pc, #500]	; (80012d0 <HAL_RCC_OscConfig+0x630>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e136      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010e2:	4b79      	ldr	r3, [pc, #484]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80010e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e6:	2202      	movs	r2, #2
 80010e8:	4013      	ands	r3, r2
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x42e>
 80010ec:	e013      	b.n	8001116 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ee:	f7ff fc9b 	bl	8000a28 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	9304      	str	r3, [sp, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010f6:	e009      	b.n	800110c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f8:	f7ff fc96 	bl	8000a28 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	9b04      	ldr	r3, [sp, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	4a73      	ldr	r2, [pc, #460]	; (80012d0 <HAL_RCC_OscConfig+0x630>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e121      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800110c:	4b6e      	ldr	r3, [pc, #440]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800110e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001110:	2202      	movs	r2, #2
 8001112:	4013      	ands	r3, r2
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001116:	231f      	movs	r3, #31
 8001118:	446b      	add	r3, sp
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d105      	bne.n	800112c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001120:	4b69      	ldr	r3, [pc, #420]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001124:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001126:	496b      	ldr	r1, [pc, #428]	; (80012d4 <HAL_RCC_OscConfig+0x634>)
 8001128:	400a      	ands	r2, r1
 800112a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800112c:	9b01      	ldr	r3, [sp, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2220      	movs	r2, #32
 8001132:	4013      	ands	r3, r2
 8001134:	d039      	beq.n	80011aa <HAL_RCC_OscConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001136:	9b01      	ldr	r3, [sp, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d01b      	beq.n	8001176 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800113e:	4b62      	ldr	r3, [pc, #392]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	03c9      	lsls	r1, r1, #15
 8001148:	430a      	orrs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114c:	f7ff fc6c 	bl	8000a28 <HAL_GetTick>
 8001150:	0003      	movs	r3, r0
 8001152:	9304      	str	r3, [sp, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001156:	f7ff fc67 	bl	8000a28 <HAL_GetTick>
 800115a:	0002      	movs	r2, r0
 800115c:	9b04      	ldr	r3, [sp, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e0f3      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001168:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	4013      	ands	r3, r2
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x4b6>
 8001174:	e019      	b.n	80011aa <HAL_RCC_OscConfig+0x50a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001176:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800117c:	4956      	ldr	r1, [pc, #344]	; (80012d8 <HAL_RCC_OscConfig+0x638>)
 800117e:	400a      	ands	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001182:	f7ff fc51 	bl	8000a28 <HAL_GetTick>
 8001186:	0003      	movs	r3, r0
 8001188:	9304      	str	r3, [sp, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x4fe>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800118c:	f7ff fc4c 	bl	8000a28 <HAL_GetTick>
 8001190:	0002      	movs	r2, r0
 8001192:	9b04      	ldr	r3, [sp, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x4fe>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e0d8      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800119e:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	041b      	lsls	r3, r3, #16
 80011a6:	4013      	ands	r3, r2
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x4ec>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011aa:	9b01      	ldr	r3, [sp, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d100      	bne.n	80011b4 <HAL_RCC_OscConfig+0x514>
 80011b2:	e0cc      	b.n	800134e <HAL_RCC_OscConfig+0x6ae>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b4:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2238      	movs	r2, #56	; 0x38
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b10      	cmp	r3, #16
 80011be:	d100      	bne.n	80011c2 <HAL_RCC_OscConfig+0x522>
 80011c0:	e07b      	b.n	80012ba <HAL_RCC_OscConfig+0x61a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d156      	bne.n	8001278 <HAL_RCC_OscConfig+0x5d8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80011d0:	4942      	ldr	r1, [pc, #264]	; (80012dc <HAL_RCC_OscConfig+0x63c>)
 80011d2:	400a      	ands	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fc27 	bl	8000a28 <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	9304      	str	r3, [sp, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x552>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e0:	f7ff fc22 	bl	8000a28 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	9b04      	ldr	r3, [sp, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e0ae      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	049b      	lsls	r3, r3, #18
 80011fa:	4013      	ands	r3, r2
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fe:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	4a37      	ldr	r2, [pc, #220]	; (80012e0 <HAL_RCC_OscConfig+0x640>)
 8001204:	4013      	ands	r3, r2
 8001206:	0019      	movs	r1, r3
 8001208:	9b01      	ldr	r3, [sp, #4]
 800120a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800120c:	9b01      	ldr	r3, [sp, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	431a      	orrs	r2, r3
 8001212:	9b01      	ldr	r3, [sp, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	431a      	orrs	r2, r3
 800121a:	9b01      	ldr	r3, [sp, #4]
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	431a      	orrs	r2, r3
 8001220:	9b01      	ldr	r3, [sp, #4]
 8001222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001224:	431a      	orrs	r2, r3
 8001226:	9b01      	ldr	r3, [sp, #4]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	431a      	orrs	r2, r3
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800122e:	430a      	orrs	r2, r1
 8001230:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	0449      	lsls	r1, r1, #17
 800123c:	430a      	orrs	r2, r1
 800123e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	0549      	lsls	r1, r1, #21
 800124a:	430a      	orrs	r2, r1
 800124c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fbeb 	bl	8000a28 <HAL_GetTick>
 8001252:	0003      	movs	r3, r0
 8001254:	9304      	str	r3, [sp, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x5ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001258:	f7ff fbe6 	bl	8000a28 <HAL_GetTick>
 800125c:	0002      	movs	r2, r0
 800125e:	9b04      	ldr	r3, [sp, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x5ca>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e072      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	049b      	lsls	r3, r3, #18
 8001272:	4013      	ands	r3, r2
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0x5b8>
 8001276:	e06a      	b.n	800134e <HAL_RCC_OscConfig+0x6ae>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 800127e:	4917      	ldr	r1, [pc, #92]	; (80012dc <HAL_RCC_OscConfig+0x63c>)
 8001280:	400a      	ands	r2, r1
 8001282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fbd0 	bl	8000a28 <HAL_GetTick>
 8001288:	0003      	movs	r3, r0
 800128a:	9304      	str	r3, [sp, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x600>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff fbcb 	bl	8000a28 <HAL_GetTick>
 8001292:	0002      	movs	r2, r0
 8001294:	9b04      	ldr	r3, [sp, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x600>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e057      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	049b      	lsls	r3, r3, #18
 80012a8:	4013      	ands	r3, r2
 80012aa:	d1f0      	bne.n	800128e <HAL_RCC_OscConfig+0x5ee>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_RCC_OscConfig+0x628>)
 80012b2:	490c      	ldr	r1, [pc, #48]	; (80012e4 <HAL_RCC_OscConfig+0x644>)
 80012b4:	400a      	ands	r2, r1
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	e049      	b.n	800134e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ba:	9b01      	ldr	r3, [sp, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e044      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40007000 	.word	0x40007000
 80012d0:	00001388 	.word	0x00001388
 80012d4:	efffffff 	.word	0xefffffff
 80012d8:	ffbfffff 	.word	0xffbfffff
 80012dc:	feffffff 	.word	0xfeffffff
 80012e0:	11c1808c 	.word	0x11c1808c
 80012e4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x6b8>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	9305      	str	r3, [sp, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ee:	9b05      	ldr	r3, [sp, #20]
 80012f0:	2203      	movs	r2, #3
 80012f2:	401a      	ands	r2, r3
 80012f4:	9b01      	ldr	r3, [sp, #4]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d126      	bne.n	800134a <HAL_RCC_OscConfig+0x6aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012fc:	9b05      	ldr	r3, [sp, #20]
 80012fe:	2270      	movs	r2, #112	; 0x70
 8001300:	401a      	ands	r2, r3
 8001302:	9b01      	ldr	r3, [sp, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d11f      	bne.n	800134a <HAL_RCC_OscConfig+0x6aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800130a:	9a05      	ldr	r2, [sp, #20]
 800130c:	23fe      	movs	r3, #254	; 0xfe
 800130e:	01db      	lsls	r3, r3, #7
 8001310:	401a      	ands	r2, r3
 8001312:	9b01      	ldr	r3, [sp, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001318:	429a      	cmp	r2, r3
 800131a:	d116      	bne.n	800134a <HAL_RCC_OscConfig+0x6aa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800131c:	9a05      	ldr	r2, [sp, #20]
 800131e:	23f8      	movs	r3, #248	; 0xf8
 8001320:	039b      	lsls	r3, r3, #14
 8001322:	401a      	ands	r2, r3
 8001324:	9b01      	ldr	r3, [sp, #4]
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001328:	429a      	cmp	r2, r3
 800132a:	d10e      	bne.n	800134a <HAL_RCC_OscConfig+0x6aa>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800132c:	9a05      	ldr	r2, [sp, #20]
 800132e:	23e0      	movs	r3, #224	; 0xe0
 8001330:	051b      	lsls	r3, r3, #20
 8001332:	401a      	ands	r2, r3
 8001334:	9b01      	ldr	r3, [sp, #4]
 8001336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001338:	429a      	cmp	r2, r3
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x6aa>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800133c:	9b05      	ldr	r3, [sp, #20]
 800133e:	0f5b      	lsrs	r3, r3, #29
 8001340:	075a      	lsls	r2, r3, #29
 8001342:	9b01      	ldr	r3, [sp, #4]
 8001344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001346:	429a      	cmp	r2, r3
 8001348:	d001      	beq.n	800134e <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
  }
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	0018      	movs	r0, r3
 8001352:	b009      	add	sp, #36	; 0x24
 8001354:	bd00      	pop	{pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800135c:	b500      	push	{lr}
 800135e:	b085      	sub	sp, #20
 8001360:	9001      	str	r0, [sp, #4]
 8001362:	9100      	str	r1, [sp, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001364:	9b01      	ldr	r3, [sp, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e0e9      	b.n	8001542 <HAL_RCC_ClockConfig+0x1e6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800136e:	4b76      	ldr	r3, [pc, #472]	; (8001548 <HAL_RCC_ClockConfig+0x1ec>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2207      	movs	r2, #7
 8001374:	4013      	ands	r3, r2
 8001376:	9a00      	ldr	r2, [sp, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d91e      	bls.n	80013ba <HAL_RCC_ClockConfig+0x5e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137c:	4b72      	ldr	r3, [pc, #456]	; (8001548 <HAL_RCC_ClockConfig+0x1ec>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2207      	movs	r2, #7
 8001382:	4393      	bics	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	4b70      	ldr	r3, [pc, #448]	; (8001548 <HAL_RCC_ClockConfig+0x1ec>)
 8001388:	9a00      	ldr	r2, [sp, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800138e:	f7ff fb4b 	bl	8000a28 <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	9303      	str	r3, [sp, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001396:	e009      	b.n	80013ac <HAL_RCC_ClockConfig+0x50>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001398:	f7ff fb46 	bl	8000a28 <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	9b03      	ldr	r3, [sp, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a6a      	ldr	r2, [pc, #424]	; (800154c <HAL_RCC_ClockConfig+0x1f0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_ClockConfig+0x50>
      {
        return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0ca      	b.n	8001542 <HAL_RCC_ClockConfig+0x1e6>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013ac:	4b66      	ldr	r3, [pc, #408]	; (8001548 <HAL_RCC_ClockConfig+0x1ec>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2207      	movs	r2, #7
 80013b2:	4013      	ands	r3, r2
 80013b4:	9a00      	ldr	r2, [sp, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d1ee      	bne.n	8001398 <HAL_RCC_ClockConfig+0x3c>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d015      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x94>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	9b01      	ldr	r3, [sp, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2204      	movs	r2, #4
 80013ca:	4013      	ands	r3, r2
 80013cc:	d006      	beq.n	80013dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013ce:	4b60      	ldr	r3, [pc, #384]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 80013d4:	21e0      	movs	r1, #224	; 0xe0
 80013d6:	01c9      	lsls	r1, r1, #7
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013dc:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a5c      	ldr	r2, [pc, #368]	; (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	0019      	movs	r1, r3
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	4b59      	ldr	r3, [pc, #356]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 80013ec:	430a      	orrs	r2, r1
 80013ee:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f0:	9b01      	ldr	r3, [sp, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4013      	ands	r3, r2
 80013f8:	d057      	beq.n	80014aa <HAL_RCC_ClockConfig+0x14e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fa:	9b01      	ldr	r3, [sp, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d107      	bne.n	8001412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001402:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	029b      	lsls	r3, r3, #10
 800140a:	4013      	ands	r3, r2
 800140c:	d12b      	bne.n	8001466 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e097      	b.n	8001542 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001412:	9b01      	ldr	r3, [sp, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	049b      	lsls	r3, r3, #18
 8001422:	4013      	ands	r3, r2
 8001424:	d11f      	bne.n	8001466 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e08b      	b.n	8001542 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800142a:	9b01      	ldr	r3, [sp, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xe6>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001432:	4b47      	ldr	r3, [pc, #284]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4013      	ands	r3, r2
 800143c:	d113      	bne.n	8001466 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e07f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001442:	9b01      	ldr	r3, [sp, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d106      	bne.n	8001458 <HAL_RCC_ClockConfig+0xfc>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 800144c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d108      	bne.n	8001466 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e074      	b.n	8001542 <HAL_RCC_ClockConfig+0x1e6>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 800145a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145c:	2202      	movs	r2, #2
 800145e:	4013      	ands	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e06d      	b.n	8001542 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2207      	movs	r2, #7
 800146c:	4393      	bics	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	9b01      	ldr	r3, [sp, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 8001476:	430a      	orrs	r2, r1
 8001478:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800147a:	f7ff fad5 	bl	8000a28 <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	9303      	str	r3, [sp, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	e009      	b.n	8001498 <HAL_RCC_ClockConfig+0x13c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001484:	f7ff fad0 	bl	8000a28 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	9b03      	ldr	r3, [sp, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_RCC_ClockConfig+0x1f0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_ClockConfig+0x13c>
      {
        return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e054      	b.n	8001542 <HAL_RCC_ClockConfig+0x1e6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2238      	movs	r2, #56	; 0x38
 800149e:	401a      	ands	r2, r3
 80014a0:	9b01      	ldr	r3, [sp, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d1ec      	bne.n	8001484 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014aa:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_RCC_ClockConfig+0x1ec>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2207      	movs	r2, #7
 80014b0:	4013      	ands	r3, r2
 80014b2:	9a00      	ldr	r2, [sp, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d21e      	bcs.n	80014f6 <HAL_RCC_ClockConfig+0x19a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_RCC_ClockConfig+0x1ec>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2207      	movs	r2, #7
 80014be:	4393      	bics	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_RCC_ClockConfig+0x1ec>)
 80014c4:	9a00      	ldr	r2, [sp, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014ca:	f7ff faad 	bl	8000a28 <HAL_GetTick>
 80014ce:	0003      	movs	r3, r0
 80014d0:	9303      	str	r3, [sp, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014d2:	e009      	b.n	80014e8 <HAL_RCC_ClockConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f7ff faa8 	bl	8000a28 <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	9b03      	ldr	r3, [sp, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_RCC_ClockConfig+0x1f0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_ClockConfig+0x18c>
      {
        return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e02c      	b.n	8001542 <HAL_RCC_ClockConfig+0x1e6>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_RCC_ClockConfig+0x1ec>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2207      	movs	r2, #7
 80014ee:	4013      	ands	r3, r2
 80014f0:	9a00      	ldr	r2, [sp, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d1ee      	bne.n	80014d4 <HAL_RCC_ClockConfig+0x178>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f6:	9b01      	ldr	r3, [sp, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2204      	movs	r2, #4
 80014fc:	4013      	ands	r3, r2
 80014fe:	d009      	beq.n	8001514 <HAL_RCC_ClockConfig+0x1b8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_RCC_ClockConfig+0x1fc>)
 8001506:	4013      	ands	r3, r2
 8001508:	0019      	movs	r1, r3
 800150a:	9b01      	ldr	r3, [sp, #4]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 8001510:	430a      	orrs	r2, r1
 8001512:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001514:	f000 f828 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 8001518:	0001      	movs	r1, r0
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	220f      	movs	r2, #15
 8001522:	401a      	ands	r2, r3
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_RCC_ClockConfig+0x200>)
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	58d3      	ldr	r3, [r2, r3]
 800152a:	221f      	movs	r2, #31
 800152c:	4013      	ands	r3, r2
 800152e:	000a      	movs	r2, r1
 8001530:	40da      	lsrs	r2, r3
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x204>)
 8001534:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_RCC_ClockConfig+0x208>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	0018      	movs	r0, r3
 800153c:	f7ff fa1e 	bl	800097c <HAL_InitTick>
 8001540:	0003      	movs	r3, r0
}
 8001542:	0018      	movs	r0, r3
 8001544:	b005      	add	sp, #20
 8001546:	bd00      	pop	{pc}
 8001548:	40022000 	.word	0x40022000
 800154c:	00001388 	.word	0x00001388
 8001550:	40021000 	.word	0x40021000
 8001554:	fffff0ff 	.word	0xfffff0ff
 8001558:	ffff8fff 	.word	0xffff8fff
 800155c:	0800642c 	.word	0x0800642c
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001568:	b500      	push	{lr}
 800156a:	b087      	sub	sp, #28
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156c:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2238      	movs	r2, #56	; 0x38
 8001572:	4013      	ands	r3, r2
 8001574:	d10f      	bne.n	8001596 <HAL_RCC_GetSysClockFreq+0x2e>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0adb      	lsrs	r3, r3, #11
 800157c:	2207      	movs	r2, #7
 800157e:	4013      	ands	r3, r2
 8001580:	2201      	movs	r2, #1
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	9300      	str	r3, [sp, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001588:	9900      	ldr	r1, [sp, #0]
 800158a:	4835      	ldr	r0, [pc, #212]	; (8001660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800158c:	f7fe fd96 	bl	80000bc <__udivsi3>
 8001590:	0003      	movs	r3, r0
 8001592:	9304      	str	r3, [sp, #16]
 8001594:	e05d      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0xea>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001596:	4b31      	ldr	r3, [pc, #196]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2238      	movs	r2, #56	; 0x38
 800159c:	4013      	ands	r3, r2
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d102      	bne.n	80015a8 <HAL_RCC_GetSysClockFreq+0x40>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015a4:	9304      	str	r3, [sp, #16]
 80015a6:	e054      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0xea>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a8:	4b2c      	ldr	r3, [pc, #176]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2238      	movs	r2, #56	; 0x38
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b10      	cmp	r3, #16
 80015b2:	d138      	bne.n	8001626 <HAL_RCC_GetSysClockFreq+0xbe>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2203      	movs	r2, #3
 80015ba:	4013      	ands	r3, r2
 80015bc:	9303      	str	r3, [sp, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	2207      	movs	r2, #7
 80015c6:	4013      	ands	r3, r2
 80015c8:	3301      	adds	r3, #1
 80015ca:	9302      	str	r3, [sp, #8]

    switch (pllsource)
 80015cc:	9b03      	ldr	r3, [sp, #12]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d10d      	bne.n	80015ee <HAL_RCC_GetSysClockFreq+0x86>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015d2:	9902      	ldr	r1, [sp, #8]
 80015d4:	4823      	ldr	r0, [pc, #140]	; (8001664 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015d6:	f7fe fd71 	bl	80000bc <__udivsi3>
 80015da:	0003      	movs	r3, r0
 80015dc:	0019      	movs	r1, r3
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	227f      	movs	r2, #127	; 0x7f
 80015e6:	4013      	ands	r3, r2
 80015e8:	434b      	muls	r3, r1
 80015ea:	9305      	str	r3, [sp, #20]
        break;
 80015ec:	e00d      	b.n	800160a <HAL_RCC_GetSysClockFreq+0xa2>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80015ee:	9902      	ldr	r1, [sp, #8]
 80015f0:	481b      	ldr	r0, [pc, #108]	; (8001660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015f2:	f7fe fd63 	bl	80000bc <__udivsi3>
 80015f6:	0003      	movs	r3, r0
 80015f8:	0019      	movs	r1, r3
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	227f      	movs	r2, #127	; 0x7f
 8001602:	4013      	ands	r3, r2
 8001604:	434b      	muls	r3, r1
 8001606:	9305      	str	r3, [sp, #20]
        break;
 8001608:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	0f5b      	lsrs	r3, r3, #29
 8001610:	2207      	movs	r2, #7
 8001612:	4013      	ands	r3, r2
 8001614:	3301      	adds	r3, #1
 8001616:	9301      	str	r3, [sp, #4]
    sysclockfreq = pllvco / pllr;
 8001618:	9901      	ldr	r1, [sp, #4]
 800161a:	9805      	ldr	r0, [sp, #20]
 800161c:	f7fe fd4e 	bl	80000bc <__udivsi3>
 8001620:	0003      	movs	r3, r0
 8001622:	9304      	str	r3, [sp, #16]
 8001624:	e015      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0xea>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2238      	movs	r2, #56	; 0x38
 800162c:	4013      	ands	r3, r2
 800162e:	2b20      	cmp	r3, #32
 8001630:	d103      	bne.n	800163a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	9304      	str	r3, [sp, #16]
 8001638:	e00b      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0xea>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_RCC_GetSysClockFreq+0xf4>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2238      	movs	r2, #56	; 0x38
 8001640:	4013      	ands	r3, r2
 8001642:	2b18      	cmp	r3, #24
 8001644:	d103      	bne.n	800164e <HAL_RCC_GetSysClockFreq+0xe6>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001646:	23fa      	movs	r3, #250	; 0xfa
 8001648:	01db      	lsls	r3, r3, #7
 800164a:	9304      	str	r3, [sp, #16]
 800164c:	e001      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0xea>
  }
  else
  {
    sysclockfreq = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	9304      	str	r3, [sp, #16]
  }

  return sysclockfreq;
 8001652:	9b04      	ldr	r3, [sp, #16]
}
 8001654:	0018      	movs	r0, r3
 8001656:	b007      	add	sp, #28
 8001658:	bd00      	pop	{pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40021000 	.word	0x40021000
 8001660:	00f42400 	.word	0x00f42400
 8001664:	007a1200 	.word	0x007a1200

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b500      	push	{lr}
 800166a:	b087      	sub	sp, #28
 800166c:	9001      	str	r0, [sp, #4]
 800166e:	9100      	str	r1, [sp, #0]
  uint32_t position = 0x00u;
 8001670:	2300      	movs	r3, #0
 8001672:	9305      	str	r3, [sp, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001674:	e14d      	b.n	8001912 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001676:	9b00      	ldr	r3, [sp, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2101      	movs	r1, #1
 800167c:	9a05      	ldr	r2, [sp, #20]
 800167e:	4091      	lsls	r1, r2
 8001680:	000a      	movs	r2, r1
 8001682:	4013      	ands	r3, r2
 8001684:	9303      	str	r3, [sp, #12]

    if (iocurrent != 0x00u)
 8001686:	9b03      	ldr	r3, [sp, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d100      	bne.n	800168e <HAL_GPIO_Init+0x26>
 800168c:	e13e      	b.n	800190c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800168e:	9b00      	ldr	r3, [sp, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2203      	movs	r2, #3
 8001694:	4013      	ands	r3, r2
 8001696:	2b01      	cmp	r3, #1
 8001698:	d005      	beq.n	80016a6 <HAL_GPIO_Init+0x3e>
 800169a:	9b00      	ldr	r3, [sp, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2203      	movs	r2, #3
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d130      	bne.n	8001708 <HAL_GPIO_Init+0xa0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	9304      	str	r3, [sp, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ac:	9b05      	ldr	r3, [sp, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	43da      	mvns	r2, r3
 80016b8:	9b04      	ldr	r3, [sp, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	9304      	str	r3, [sp, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016be:	9b00      	ldr	r3, [sp, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	9b05      	ldr	r3, [sp, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	409a      	lsls	r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	9a04      	ldr	r2, [sp, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	9304      	str	r3, [sp, #16]
        GPIOx->OSPEEDR = temp;
 80016d0:	9b01      	ldr	r3, [sp, #4]
 80016d2:	9a04      	ldr	r2, [sp, #16]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d6:	9b01      	ldr	r3, [sp, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	9304      	str	r3, [sp, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	9b05      	ldr	r3, [sp, #20]
 80016e0:	409a      	lsls	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	43da      	mvns	r2, r3
 80016e6:	9b04      	ldr	r3, [sp, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	9304      	str	r3, [sp, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ec:	9b00      	ldr	r3, [sp, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	2201      	movs	r2, #1
 80016f4:	401a      	ands	r2, r3
 80016f6:	9b05      	ldr	r3, [sp, #20]
 80016f8:	409a      	lsls	r2, r3
 80016fa:	0013      	movs	r3, r2
 80016fc:	9a04      	ldr	r2, [sp, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	9304      	str	r3, [sp, #16]
        GPIOx->OTYPER = temp;
 8001702:	9b01      	ldr	r3, [sp, #4]
 8001704:	9a04      	ldr	r2, [sp, #16]
 8001706:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001708:	9b00      	ldr	r3, [sp, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2203      	movs	r2, #3
 800170e:	4013      	ands	r3, r2
 8001710:	2b03      	cmp	r3, #3
 8001712:	d017      	beq.n	8001744 <HAL_GPIO_Init+0xdc>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001714:	9b01      	ldr	r3, [sp, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	9304      	str	r3, [sp, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800171a:	9b05      	ldr	r3, [sp, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	409a      	lsls	r2, r3
 8001722:	0013      	movs	r3, r2
 8001724:	43da      	mvns	r2, r3
 8001726:	9b04      	ldr	r3, [sp, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	9304      	str	r3, [sp, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800172c:	9b00      	ldr	r3, [sp, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	9b05      	ldr	r3, [sp, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	409a      	lsls	r2, r3
 8001736:	0013      	movs	r3, r2
 8001738:	9a04      	ldr	r2, [sp, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	9304      	str	r3, [sp, #16]
        GPIOx->PUPDR = temp;
 800173e:	9b01      	ldr	r3, [sp, #4]
 8001740:	9a04      	ldr	r2, [sp, #16]
 8001742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	9b00      	ldr	r3, [sp, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	4013      	ands	r3, r2
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x130>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001750:	9b05      	ldr	r3, [sp, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	9b01      	ldr	r3, [sp, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	58d3      	ldr	r3, [r2, r3]
 800175c:	9304      	str	r3, [sp, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800175e:	9b05      	ldr	r3, [sp, #20]
 8001760:	2207      	movs	r2, #7
 8001762:	4013      	ands	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	43da      	mvns	r2, r3
 800176e:	9b04      	ldr	r3, [sp, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	9304      	str	r3, [sp, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001774:	9b00      	ldr	r3, [sp, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	9b05      	ldr	r3, [sp, #20]
 800177a:	2107      	movs	r1, #7
 800177c:	400b      	ands	r3, r1
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	9a04      	ldr	r2, [sp, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	9304      	str	r3, [sp, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800178a:	9b05      	ldr	r3, [sp, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	9b01      	ldr	r3, [sp, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	9904      	ldr	r1, [sp, #16]
 8001796:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	9b01      	ldr	r3, [sp, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	9304      	str	r3, [sp, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800179e:	9b05      	ldr	r3, [sp, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	409a      	lsls	r2, r3
 80017a6:	0013      	movs	r3, r2
 80017a8:	43da      	mvns	r2, r3
 80017aa:	9b04      	ldr	r3, [sp, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	9304      	str	r3, [sp, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b0:	9b00      	ldr	r3, [sp, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2203      	movs	r2, #3
 80017b6:	401a      	ands	r2, r3
 80017b8:	9b05      	ldr	r3, [sp, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	409a      	lsls	r2, r3
 80017be:	0013      	movs	r3, r2
 80017c0:	9a04      	ldr	r2, [sp, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	9304      	str	r3, [sp, #16]
      GPIOx->MODER = temp;
 80017c6:	9b01      	ldr	r3, [sp, #4]
 80017c8:	9a04      	ldr	r2, [sp, #16]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017cc:	9b00      	ldr	r3, [sp, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	23c0      	movs	r3, #192	; 0xc0
 80017d2:	029b      	lsls	r3, r3, #10
 80017d4:	4013      	ands	r3, r2
 80017d6:	d100      	bne.n	80017da <HAL_GPIO_Init+0x172>
 80017d8:	e098      	b.n	800190c <HAL_GPIO_Init+0x2a4>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80017da:	4a53      	ldr	r2, [pc, #332]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 80017dc:	9b05      	ldr	r3, [sp, #20]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3318      	adds	r3, #24
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	589b      	ldr	r3, [r3, r2]
 80017e6:	9304      	str	r3, [sp, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80017e8:	9b05      	ldr	r3, [sp, #20]
 80017ea:	2203      	movs	r2, #3
 80017ec:	4013      	ands	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	220f      	movs	r2, #15
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	43da      	mvns	r2, r3
 80017f8:	9b04      	ldr	r3, [sp, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	9304      	str	r3, [sp, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80017fe:	9a01      	ldr	r2, [sp, #4]
 8001800:	23a0      	movs	r3, #160	; 0xa0
 8001802:	05db      	lsls	r3, r3, #23
 8001804:	429a      	cmp	r2, r3
 8001806:	d019      	beq.n	800183c <HAL_GPIO_Init+0x1d4>
 8001808:	9b01      	ldr	r3, [sp, #4]
 800180a:	4a48      	ldr	r2, [pc, #288]	; (800192c <HAL_GPIO_Init+0x2c4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d013      	beq.n	8001838 <HAL_GPIO_Init+0x1d0>
 8001810:	9b01      	ldr	r3, [sp, #4]
 8001812:	4a47      	ldr	r2, [pc, #284]	; (8001930 <HAL_GPIO_Init+0x2c8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00d      	beq.n	8001834 <HAL_GPIO_Init+0x1cc>
 8001818:	9b01      	ldr	r3, [sp, #4]
 800181a:	4a46      	ldr	r2, [pc, #280]	; (8001934 <HAL_GPIO_Init+0x2cc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0x1c8>
 8001820:	9b01      	ldr	r3, [sp, #4]
 8001822:	4a45      	ldr	r2, [pc, #276]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d101      	bne.n	800182c <HAL_GPIO_Init+0x1c4>
 8001828:	2304      	movs	r3, #4
 800182a:	e008      	b.n	800183e <HAL_GPIO_Init+0x1d6>
 800182c:	2305      	movs	r3, #5
 800182e:	e006      	b.n	800183e <HAL_GPIO_Init+0x1d6>
 8001830:	2303      	movs	r3, #3
 8001832:	e004      	b.n	800183e <HAL_GPIO_Init+0x1d6>
 8001834:	2302      	movs	r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x1d6>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_GPIO_Init+0x1d6>
 800183c:	2300      	movs	r3, #0
 800183e:	9a05      	ldr	r2, [sp, #20]
 8001840:	2103      	movs	r1, #3
 8001842:	400a      	ands	r2, r1
 8001844:	00d2      	lsls	r2, r2, #3
 8001846:	4093      	lsls	r3, r2
 8001848:	9a04      	ldr	r2, [sp, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	9304      	str	r3, [sp, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800184e:	4936      	ldr	r1, [pc, #216]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 8001850:	9b05      	ldr	r3, [sp, #20]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3318      	adds	r3, #24
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	9a04      	ldr	r2, [sp, #16]
 800185a:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185c:	4b32      	ldr	r3, [pc, #200]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	9304      	str	r3, [sp, #16]
        temp &= ~(iocurrent);
 8001862:	9b03      	ldr	r3, [sp, #12]
 8001864:	43da      	mvns	r2, r3
 8001866:	9b04      	ldr	r3, [sp, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	9304      	str	r3, [sp, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800186c:	9b00      	ldr	r3, [sp, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	035b      	lsls	r3, r3, #13
 8001874:	4013      	ands	r3, r2
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001878:	9a04      	ldr	r2, [sp, #16]
 800187a:	9b03      	ldr	r3, [sp, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	9304      	str	r3, [sp, #16]
        }
        EXTI->RTSR1 = temp;
 8001880:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 8001882:	9a04      	ldr	r2, [sp, #16]
 8001884:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001886:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	9304      	str	r3, [sp, #16]
        temp &= ~(iocurrent);
 800188c:	9b03      	ldr	r3, [sp, #12]
 800188e:	43da      	mvns	r2, r3
 8001890:	9b04      	ldr	r3, [sp, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	9304      	str	r3, [sp, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001896:	9b00      	ldr	r3, [sp, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	039b      	lsls	r3, r3, #14
 800189e:	4013      	ands	r3, r2
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018a2:	9a04      	ldr	r2, [sp, #16]
 80018a4:	9b03      	ldr	r3, [sp, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	9304      	str	r3, [sp, #16]
        }
        EXTI->FTSR1 = temp;
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 80018ac:	9a04      	ldr	r2, [sp, #16]
 80018ae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018b0:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 80018b2:	2384      	movs	r3, #132	; 0x84
 80018b4:	58d3      	ldr	r3, [r2, r3]
 80018b6:	9304      	str	r3, [sp, #16]
        temp &= ~(iocurrent);
 80018b8:	9b03      	ldr	r3, [sp, #12]
 80018ba:	43da      	mvns	r2, r3
 80018bc:	9b04      	ldr	r3, [sp, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	9304      	str	r3, [sp, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018c2:	9b00      	ldr	r3, [sp, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	029b      	lsls	r3, r3, #10
 80018ca:	4013      	ands	r3, r2
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018ce:	9a04      	ldr	r2, [sp, #16]
 80018d0:	9b03      	ldr	r3, [sp, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	9304      	str	r3, [sp, #16]
        }
        EXTI->EMR1 = temp;
 80018d6:	4914      	ldr	r1, [pc, #80]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 80018d8:	2284      	movs	r2, #132	; 0x84
 80018da:	9b04      	ldr	r3, [sp, #16]
 80018dc:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	58d3      	ldr	r3, [r2, r3]
 80018e4:	9304      	str	r3, [sp, #16]
        temp &= ~(iocurrent);
 80018e6:	9b03      	ldr	r3, [sp, #12]
 80018e8:	43da      	mvns	r2, r3
 80018ea:	9b04      	ldr	r3, [sp, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	9304      	str	r3, [sp, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f0:	9b00      	ldr	r3, [sp, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	4013      	ands	r3, r2
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80018fc:	9a04      	ldr	r2, [sp, #16]
 80018fe:	9b03      	ldr	r3, [sp, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	9304      	str	r3, [sp, #16]
        }
        EXTI->IMR1 = temp;
 8001904:	4908      	ldr	r1, [pc, #32]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	9b04      	ldr	r3, [sp, #16]
 800190a:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	9305      	str	r3, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001912:	9b00      	ldr	r3, [sp, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	9b05      	ldr	r3, [sp, #20]
 8001918:	40da      	lsrs	r2, r3
 800191a:	1e13      	subs	r3, r2, #0
 800191c:	d000      	beq.n	8001920 <HAL_GPIO_Init+0x2b8>
 800191e:	e6aa      	b.n	8001676 <HAL_GPIO_Init+0xe>
  }
}
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	b007      	add	sp, #28
 8001926:	bd00      	pop	{pc}
 8001928:	40021800 	.word	0x40021800
 800192c:	50000400 	.word	0x50000400
 8001930:	50000800 	.word	0x50000800
 8001934:	50000c00 	.word	0x50000c00
 8001938:	50001000 	.word	0x50001000

0800193c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193c:	b082      	sub	sp, #8
 800193e:	9001      	str	r0, [sp, #4]
 8001940:	0008      	movs	r0, r1
 8001942:	0011      	movs	r1, r2
 8001944:	466b      	mov	r3, sp
 8001946:	3302      	adds	r3, #2
 8001948:	1c02      	adds	r2, r0, #0
 800194a:	801a      	strh	r2, [r3, #0]
 800194c:	466b      	mov	r3, sp
 800194e:	3301      	adds	r3, #1
 8001950:	1c0a      	adds	r2, r1, #0
 8001952:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001954:	466b      	mov	r3, sp
 8001956:	3301      	adds	r3, #1
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_GPIO_WritePin+0x2e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800195e:	466b      	mov	r3, sp
 8001960:	3302      	adds	r3, #2
 8001962:	881a      	ldrh	r2, [r3, #0]
 8001964:	9b01      	ldr	r3, [sp, #4]
 8001966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001968:	e004      	b.n	8001974 <HAL_GPIO_WritePin+0x38>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196a:	466b      	mov	r3, sp
 800196c:	3302      	adds	r3, #2
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	9b01      	ldr	r3, [sp, #4]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	b002      	add	sp, #8
 8001978:	4770      	bx	lr

0800197a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800197a:	b084      	sub	sp, #16
 800197c:	9001      	str	r0, [sp, #4]
 800197e:	000a      	movs	r2, r1
 8001980:	466b      	mov	r3, sp
 8001982:	3302      	adds	r3, #2
 8001984:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001986:	9b01      	ldr	r3, [sp, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	9303      	str	r3, [sp, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800198c:	466b      	mov	r3, sp
 800198e:	3302      	adds	r3, #2
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	9a03      	ldr	r2, [sp, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	041a      	lsls	r2, r3, #16
 8001998:	9b03      	ldr	r3, [sp, #12]
 800199a:	43db      	mvns	r3, r3
 800199c:	4669      	mov	r1, sp
 800199e:	3102      	adds	r1, #2
 80019a0:	8809      	ldrh	r1, [r1, #0]
 80019a2:	400b      	ands	r3, r1
 80019a4:	431a      	orrs	r2, r3
 80019a6:	9b01      	ldr	r3, [sp, #4]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	b004      	add	sp, #16
 80019ae:	4770      	bx	lr

080019b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b0:	b500      	push	{lr}
 80019b2:	b083      	sub	sp, #12
 80019b4:	0002      	movs	r2, r0
 80019b6:	466b      	mov	r3, sp
 80019b8:	3306      	adds	r3, #6
 80019ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_GPIO_EXTI_IRQHandler+0x5c>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	466a      	mov	r2, sp
 80019c2:	3206      	adds	r2, #6
 80019c4:	8812      	ldrh	r2, [r2, #0]
 80019c6:	4013      	ands	r3, r2
 80019c8:	d00a      	beq.n	80019e0 <HAL_GPIO_EXTI_IRQHandler+0x30>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_GPIO_EXTI_IRQHandler+0x5c>)
 80019cc:	466a      	mov	r2, sp
 80019ce:	3206      	adds	r2, #6
 80019d0:	8812      	ldrh	r2, [r2, #0]
 80019d2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80019d4:	466b      	mov	r3, sp
 80019d6:	3306      	adds	r3, #6
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	0018      	movs	r0, r3
 80019dc:	f001 fb6c 	bl	80030b8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_GPIO_EXTI_IRQHandler+0x5c>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	466a      	mov	r2, sp
 80019e6:	3206      	adds	r2, #6
 80019e8:	8812      	ldrh	r2, [r2, #0]
 80019ea:	4013      	ands	r3, r2
 80019ec:	d00a      	beq.n	8001a04 <HAL_GPIO_EXTI_IRQHandler+0x54>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_GPIO_EXTI_IRQHandler+0x5c>)
 80019f0:	466a      	mov	r2, sp
 80019f2:	3206      	adds	r2, #6
 80019f4:	8812      	ldrh	r2, [r2, #0]
 80019f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80019f8:	466b      	mov	r3, sp
 80019fa:	3306      	adds	r3, #6
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	0018      	movs	r0, r3
 8001a00:	f001 fb14 	bl	800302c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	b003      	add	sp, #12
 8001a08:	bd00      	pop	{pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40021800 	.word	0x40021800

08001a10 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001a10:	b500      	push	{lr}
 8001a12:	b085      	sub	sp, #20
 8001a14:	9001      	str	r0, [sp, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_FDCAN_Init+0x10>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e14e      	b.n	8001cbe <HAL_FDCAN_Init+0x2ae>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001a20:	9b01      	ldr	r3, [sp, #4]
 8001a22:	225c      	movs	r2, #92	; 0x5c
 8001a24:	5c9b      	ldrb	r3, [r3, r2]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001a2c:	9b01      	ldr	r3, [sp, #4]
 8001a2e:	225d      	movs	r2, #93	; 0x5d
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001a34:	9b01      	ldr	r3, [sp, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7fe fdd2 	bl	80005e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001a3c:	9b01      	ldr	r3, [sp, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	9b01      	ldr	r3, [sp, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2110      	movs	r1, #16
 8001a48:	438a      	bics	r2, r1
 8001a4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a4c:	f7fe ffec 	bl	8000a28 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	9303      	str	r3, [sp, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a54:	e012      	b.n	8001a7c <HAL_FDCAN_Init+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a56:	f7fe ffe7 	bl	8000a28 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	9b03      	ldr	r3, [sp, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b0a      	cmp	r3, #10
 8001a62:	d90b      	bls.n	8001a7c <HAL_FDCAN_Init+0x6c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a64:	9b01      	ldr	r3, [sp, #4]
 8001a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a68:	2201      	movs	r2, #1
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	9b01      	ldr	r3, [sp, #4]
 8001a6e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a70:	9b01      	ldr	r3, [sp, #4]
 8001a72:	225c      	movs	r2, #92	; 0x5c
 8001a74:	2103      	movs	r1, #3
 8001a76:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e120      	b.n	8001cbe <HAL_FDCAN_Init+0x2ae>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a7c:	9b01      	ldr	r3, [sp, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2208      	movs	r2, #8
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d0e5      	beq.n	8001a56 <HAL_FDCAN_Init+0x46>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a8a:	9b01      	ldr	r3, [sp, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	9b01      	ldr	r3, [sp, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a9a:	f7fe ffc5 	bl	8000a28 <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	9303      	str	r3, [sp, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001aa2:	e012      	b.n	8001aca <HAL_FDCAN_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001aa4:	f7fe ffc0 	bl	8000a28 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	9b03      	ldr	r3, [sp, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b0a      	cmp	r3, #10
 8001ab0:	d90b      	bls.n	8001aca <HAL_FDCAN_Init+0xba>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ab2:	9b01      	ldr	r3, [sp, #4]
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	9b01      	ldr	r3, [sp, #4]
 8001abc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001abe:	9b01      	ldr	r3, [sp, #4]
 8001ac0:	225c      	movs	r2, #92	; 0x5c
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0f9      	b.n	8001cbe <HAL_FDCAN_Init+0x2ae>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001aca:	9b01      	ldr	r3, [sp, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d0e6      	beq.n	8001aa4 <HAL_FDCAN_Init+0x94>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001ad6:	9b01      	ldr	r3, [sp, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	9b01      	ldr	r3, [sp, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001ae6:	9b01      	ldr	r3, [sp, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a76      	ldr	r2, [pc, #472]	; (8001cc4 <HAL_FDCAN_Init+0x2b4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d103      	bne.n	8001af8 <HAL_FDCAN_Init+0xe8>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001af0:	4a75      	ldr	r2, [pc, #468]	; (8001cc8 <HAL_FDCAN_Init+0x2b8>)
 8001af2:	9b01      	ldr	r3, [sp, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001af8:	9b01      	ldr	r3, [sp, #4]
 8001afa:	7c1b      	ldrb	r3, [r3, #16]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <HAL_FDCAN_Init+0x102>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b00:	9b01      	ldr	r3, [sp, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	9b01      	ldr	r3, [sp, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2140      	movs	r1, #64	; 0x40
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	619a      	str	r2, [r3, #24]
 8001b10:	e007      	b.n	8001b22 <HAL_FDCAN_Init+0x112>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b12:	9b01      	ldr	r3, [sp, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	9b01      	ldr	r3, [sp, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2140      	movs	r1, #64	; 0x40
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001b22:	9b01      	ldr	r3, [sp, #4]
 8001b24:	7c5b      	ldrb	r3, [r3, #17]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d109      	bne.n	8001b3e <HAL_FDCAN_Init+0x12e>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b2a:	9b01      	ldr	r3, [sp, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	9b01      	ldr	r3, [sp, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	01c9      	lsls	r1, r1, #7
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	619a      	str	r2, [r3, #24]
 8001b3c:	e007      	b.n	8001b4e <HAL_FDCAN_Init+0x13e>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b3e:	9b01      	ldr	r3, [sp, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	9b01      	ldr	r3, [sp, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4960      	ldr	r1, [pc, #384]	; (8001ccc <HAL_FDCAN_Init+0x2bc>)
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001b4e:	9b01      	ldr	r3, [sp, #4]
 8001b50:	7c9b      	ldrb	r3, [r3, #18]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d108      	bne.n	8001b68 <HAL_FDCAN_Init+0x158>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699a      	ldr	r2, [r3, #24]
 8001b5c:	9b01      	ldr	r3, [sp, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	495b      	ldr	r1, [pc, #364]	; (8001cd0 <HAL_FDCAN_Init+0x2c0>)
 8001b62:	400a      	ands	r2, r1
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	e008      	b.n	8001b7a <HAL_FDCAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b68:	9b01      	ldr	r3, [sp, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	9b01      	ldr	r3, [sp, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0149      	lsls	r1, r1, #5
 8001b76:	430a      	orrs	r2, r1
 8001b78:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001b7a:	9b01      	ldr	r3, [sp, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a54      	ldr	r2, [pc, #336]	; (8001cd4 <HAL_FDCAN_Init+0x2c4>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	9b01      	ldr	r3, [sp, #4]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	9b01      	ldr	r3, [sp, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001b92:	9b01      	ldr	r3, [sp, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699a      	ldr	r2, [r3, #24]
 8001b98:	9b01      	ldr	r3, [sp, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	21a4      	movs	r1, #164	; 0xa4
 8001b9e:	438a      	bics	r2, r1
 8001ba0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ba2:	9b01      	ldr	r3, [sp, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	9b01      	ldr	r3, [sp, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2110      	movs	r1, #16
 8001bae:	438a      	bics	r2, r1
 8001bb0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001bb2:	9b01      	ldr	r3, [sp, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <HAL_FDCAN_Init+0x1bc>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001bba:	9b01      	ldr	r3, [sp, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	9b01      	ldr	r3, [sp, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	619a      	str	r2, [r3, #24]
 8001bca:	e02c      	b.n	8001c26 <HAL_FDCAN_Init+0x216>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001bcc:	9b01      	ldr	r3, [sp, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d028      	beq.n	8001c26 <HAL_FDCAN_Init+0x216>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001bd4:	9b01      	ldr	r3, [sp, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d01c      	beq.n	8001c16 <HAL_FDCAN_Init+0x206>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001bdc:	9b01      	ldr	r3, [sp, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	9b01      	ldr	r3, [sp, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	430a      	orrs	r2, r1
 8001bea:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001bec:	9b01      	ldr	r3, [sp, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	9b01      	ldr	r3, [sp, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001bfc:	9b01      	ldr	r3, [sp, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d110      	bne.n	8001c26 <HAL_FDCAN_Init+0x216>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c04:	9b01      	ldr	r3, [sp, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	9b01      	ldr	r3, [sp, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2120      	movs	r1, #32
 8001c10:	430a      	orrs	r2, r1
 8001c12:	619a      	str	r2, [r3, #24]
 8001c14:	e007      	b.n	8001c26 <HAL_FDCAN_Init+0x216>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c16:	9b01      	ldr	r3, [sp, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	9b01      	ldr	r3, [sp, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2120      	movs	r1, #32
 8001c22:	430a      	orrs	r2, r1
 8001c24:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c26:	9b01      	ldr	r3, [sp, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c2e:	9b01      	ldr	r3, [sp, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c36:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c38:	9b01      	ldr	r3, [sp, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001c42:	9b01      	ldr	r3, [sp, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c4a:	9b01      	ldr	r3, [sp, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c4e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c50:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001c52:	9b01      	ldr	r3, [sp, #4]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	23c0      	movs	r3, #192	; 0xc0
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d115      	bne.n	8001c8a <HAL_FDCAN_Init+0x27a>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c5e:	9b01      	ldr	r3, [sp, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c64:	9b01      	ldr	r3, [sp, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c6c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c6e:	9b01      	ldr	r3, [sp, #4]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	3b01      	subs	r3, #1
 8001c74:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c76:	431a      	orrs	r2, r3
 8001c78:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001c7a:	9b01      	ldr	r3, [sp, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c82:	9b01      	ldr	r3, [sp, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c86:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c88:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001c8a:	9b01      	ldr	r3, [sp, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	22c0      	movs	r2, #192	; 0xc0
 8001c90:	5899      	ldr	r1, [r3, r2]
 8001c92:	9b01      	ldr	r3, [sp, #4]
 8001c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c96:	9b01      	ldr	r3, [sp, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	21c0      	movs	r1, #192	; 0xc0
 8001c9e:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001ca0:	9b01      	ldr	r3, [sp, #4]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 fc24 	bl	80024f0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001ca8:	9b01      	ldr	r3, [sp, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001cae:	9b01      	ldr	r3, [sp, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001cb4:	9b01      	ldr	r3, [sp, #4]
 8001cb6:	225c      	movs	r2, #92	; 0x5c
 8001cb8:	2101      	movs	r1, #1
 8001cba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	b005      	add	sp, #20
 8001cc2:	bd00      	pop	{pc}
 8001cc4:	40006400 	.word	0x40006400
 8001cc8:	40006500 	.word	0x40006500
 8001ccc:	ffffbfff 	.word	0xffffbfff
 8001cd0:	ffffefff 	.word	0xffffefff
 8001cd4:	fffffcff 	.word	0xfffffcff

08001cd8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001cd8:	b086      	sub	sp, #24
 8001cda:	9001      	str	r0, [sp, #4]
 8001cdc:	9100      	str	r1, [sp, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001cde:	2317      	movs	r3, #23
 8001ce0:	446b      	add	r3, sp
 8001ce2:	9a01      	ldr	r2, [sp, #4]
 8001ce4:	215c      	movs	r1, #92	; 0x5c
 8001ce6:	5c52      	ldrb	r2, [r2, r1]
 8001ce8:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001cea:	2317      	movs	r3, #23
 8001cec:	446b      	add	r3, sp
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d004      	beq.n	8001cfe <HAL_FDCAN_ConfigFilter+0x26>
 8001cf4:	2317      	movs	r3, #23
 8001cf6:	446b      	add	r3, sp
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d13d      	bne.n	8001d7a <HAL_FDCAN_ConfigFilter+0xa2>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001cfe:	9b00      	ldr	r3, [sp, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d119      	bne.n	8001d3a <HAL_FDCAN_ConfigFilter+0x62>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d06:	9b00      	ldr	r3, [sp, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001d0c:	9b00      	ldr	r3, [sp, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d12:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001d14:	9b00      	ldr	r3, [sp, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001d1a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001d1c:	9b00      	ldr	r3, [sp, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d20:	4313      	orrs	r3, r2
 8001d22:	9304      	str	r3, [sp, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001d24:	9b01      	ldr	r3, [sp, #4]
 8001d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d28:	9b00      	ldr	r3, [sp, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	18d3      	adds	r3, r2, r3
 8001d30:	9302      	str	r3, [sp, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d32:	9b02      	ldr	r3, [sp, #8]
 8001d34:	9a04      	ldr	r2, [sp, #16]
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e01d      	b.n	8001d76 <HAL_FDCAN_ConfigFilter+0x9e>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001d3a:	9b00      	ldr	r3, [sp, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	075a      	lsls	r2, r3, #29
 8001d40:	9b00      	ldr	r3, [sp, #0]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	9304      	str	r3, [sp, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001d48:	9b00      	ldr	r3, [sp, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	079a      	lsls	r2, r3, #30
 8001d4e:	9b00      	ldr	r3, [sp, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	9303      	str	r3, [sp, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001d56:	9b01      	ldr	r3, [sp, #4]
 8001d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d5a:	9b00      	ldr	r3, [sp, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	18d3      	adds	r3, r2, r3
 8001d62:	9302      	str	r3, [sp, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d64:	9b02      	ldr	r3, [sp, #8]
 8001d66:	9a04      	ldr	r2, [sp, #16]
 8001d68:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001d6a:	9b02      	ldr	r3, [sp, #8]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	9302      	str	r3, [sp, #8]
      *FilterAddress = FilterElementW2;
 8001d70:	9b02      	ldr	r3, [sp, #8]
 8001d72:	9a03      	ldr	r2, [sp, #12]
 8001d74:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e006      	b.n	8001d88 <HAL_FDCAN_ConfigFilter+0xb0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d7a:	9b01      	ldr	r3, [sp, #4]
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	2202      	movs	r2, #2
 8001d80:	431a      	orrs	r2, r3
 8001d82:	9b01      	ldr	r3, [sp, #4]
 8001d84:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
  }
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	b006      	add	sp, #24
 8001d8c:	4770      	bx	lr

08001d8e <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001d8e:	b084      	sub	sp, #16
 8001d90:	9003      	str	r0, [sp, #12]
 8001d92:	9102      	str	r1, [sp, #8]
 8001d94:	9201      	str	r2, [sp, #4]
 8001d96:	9300      	str	r3, [sp, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001d98:	9b03      	ldr	r3, [sp, #12]
 8001d9a:	225c      	movs	r2, #92	; 0x5c
 8001d9c:	5c9b      	ldrb	r3, [r3, r2]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d117      	bne.n	8001dd4 <HAL_FDCAN_ConfigGlobalFilter+0x46>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001da4:	9b03      	ldr	r3, [sp, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	589b      	ldr	r3, [r3, r2]
 8001dac:	223f      	movs	r2, #63	; 0x3f
 8001dae:	4393      	bics	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	9b02      	ldr	r3, [sp, #8]
 8001db4:	011a      	lsls	r2, r3, #4
 8001db6:	9b01      	ldr	r3, [sp, #4]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	9b00      	ldr	r3, [sp, #0]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	9b04      	ldr	r3, [sp, #16]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	9b03      	ldr	r3, [sp, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	505a      	str	r2, [r3, r1]
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e006      	b.n	8001de2 <HAL_FDCAN_ConfigGlobalFilter+0x54>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001dd4:	9b03      	ldr	r3, [sp, #12]
 8001dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd8:	2204      	movs	r2, #4
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	9b03      	ldr	r3, [sp, #12]
 8001dde:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
  }
}
 8001de2:	0018      	movs	r0, r3
 8001de4:	b004      	add	sp, #16
 8001de6:	4770      	bx	lr

08001de8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001de8:	b082      	sub	sp, #8
 8001dea:	9001      	str	r0, [sp, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001dec:	9b01      	ldr	r3, [sp, #4]
 8001dee:	225c      	movs	r2, #92	; 0x5c
 8001df0:	5c9b      	ldrb	r3, [r3, r2]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d110      	bne.n	8001e1a <HAL_FDCAN_Start+0x32>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001df8:	9b01      	ldr	r3, [sp, #4]
 8001dfa:	225c      	movs	r2, #92	; 0x5c
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001e00:	9b01      	ldr	r3, [sp, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	9b01      	ldr	r3, [sp, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e10:	9b01      	ldr	r3, [sp, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e006      	b.n	8001e28 <HAL_FDCAN_Start+0x40>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e1a:	9b01      	ldr	r3, [sp, #4]
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1e:	2204      	movs	r2, #4
 8001e20:	431a      	orrs	r2, r3
 8001e22:	9b01      	ldr	r3, [sp, #4]
 8001e24:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
  }
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	b002      	add	sp, #8
 8001e2c:	4770      	bx	lr

08001e2e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001e2e:	b500      	push	{lr}
 8001e30:	b087      	sub	sp, #28
 8001e32:	9003      	str	r0, [sp, #12]
 8001e34:	9102      	str	r1, [sp, #8]
 8001e36:	9201      	str	r2, [sp, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001e38:	9b03      	ldr	r3, [sp, #12]
 8001e3a:	225c      	movs	r2, #92	; 0x5c
 8001e3c:	5c9b      	ldrb	r3, [r3, r2]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d12d      	bne.n	8001ea0 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001e44:	9b03      	ldr	r3, [sp, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	22c4      	movs	r2, #196	; 0xc4
 8001e4a:	589a      	ldr	r2, [r3, r2]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	039b      	lsls	r3, r3, #14
 8001e50:	4013      	ands	r3, r2
 8001e52:	d008      	beq.n	8001e66 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001e54:	9b03      	ldr	r3, [sp, #12]
 8001e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	9b03      	ldr	r3, [sp, #12]
 8001e60:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e023      	b.n	8001eae <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001e66:	9b03      	ldr	r3, [sp, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	22c4      	movs	r2, #196	; 0xc4
 8001e6c:	589b      	ldr	r3, [r3, r2]
 8001e6e:	0c1b      	lsrs	r3, r3, #16
 8001e70:	2203      	movs	r2, #3
 8001e72:	4013      	ands	r3, r2
 8001e74:	9305      	str	r3, [sp, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001e76:	9b05      	ldr	r3, [sp, #20]
 8001e78:	9a01      	ldr	r2, [sp, #4]
 8001e7a:	9902      	ldr	r1, [sp, #8]
 8001e7c:	9803      	ldr	r0, [sp, #12]
 8001e7e:	f000 fba1 	bl	80025c4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001e82:	9b03      	ldr	r3, [sp, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	9a05      	ldr	r2, [sp, #20]
 8001e8a:	4091      	lsls	r1, r2
 8001e8c:	000a      	movs	r2, r1
 8001e8e:	21cc      	movs	r1, #204	; 0xcc
 8001e90:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001e92:	2201      	movs	r2, #1
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	409a      	lsls	r2, r3
 8001e98:	9b03      	ldr	r3, [sp, #12]
 8001e9a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	e006      	b.n	8001eae <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ea0:	9b03      	ldr	r3, [sp, #12]
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	9b03      	ldr	r3, [sp, #12]
 8001eaa:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
  }
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	b007      	add	sp, #28
 8001eb2:	bd00      	pop	{pc}

08001eb4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001eb4:	b08a      	sub	sp, #40	; 0x28
 8001eb6:	9003      	str	r0, [sp, #12]
 8001eb8:	9102      	str	r1, [sp, #8]
 8001eba:	9201      	str	r2, [sp, #4]
 8001ebc:	9300      	str	r3, [sp, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ebe:	231b      	movs	r3, #27
 8001ec0:	446b      	add	r3, sp
 8001ec2:	9a03      	ldr	r2, [sp, #12]
 8001ec4:	215c      	movs	r1, #92	; 0x5c
 8001ec6:	5c52      	ldrb	r2, [r2, r1]
 8001ec8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001eca:	231b      	movs	r3, #27
 8001ecc:	446b      	add	r3, sp
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d000      	beq.n	8001ed6 <HAL_FDCAN_GetRxMessage+0x22>
 8001ed4:	e0c1      	b.n	800205a <HAL_FDCAN_GetRxMessage+0x1a6>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001ed6:	9b02      	ldr	r3, [sp, #8]
 8001ed8:	2b40      	cmp	r3, #64	; 0x40
 8001eda:	d121      	bne.n	8001f20 <HAL_FDCAN_GetRxMessage+0x6c>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001edc:	9b03      	ldr	r3, [sp, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2290      	movs	r2, #144	; 0x90
 8001ee2:	589b      	ldr	r3, [r3, r2]
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d108      	bne.n	8001efc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001eea:	9b03      	ldr	r3, [sp, #12]
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0052      	lsls	r2, r2, #1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	9b03      	ldr	r3, [sp, #12]
 8001ef6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0b5      	b.n	8002068 <HAL_FDCAN_GetRxMessage+0x1b4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001efc:	9b03      	ldr	r3, [sp, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2290      	movs	r2, #144	; 0x90
 8001f02:	589b      	ldr	r3, [r3, r2]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	2203      	movs	r2, #3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	9307      	str	r3, [sp, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001f0c:	9b03      	ldr	r3, [sp, #12]
 8001f0e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001f10:	9a07      	ldr	r2, [sp, #28]
 8001f12:	0013      	movs	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	189b      	adds	r3, r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	18cb      	adds	r3, r1, r3
 8001f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f1e:	e020      	b.n	8001f62 <HAL_FDCAN_GetRxMessage+0xae>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001f20:	9b03      	ldr	r3, [sp, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2298      	movs	r2, #152	; 0x98
 8001f26:	589b      	ldr	r3, [r3, r2]
 8001f28:	220f      	movs	r2, #15
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d108      	bne.n	8001f40 <HAL_FDCAN_GetRxMessage+0x8c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001f2e:	9b03      	ldr	r3, [sp, #12]
 8001f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	0052      	lsls	r2, r2, #1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	9b03      	ldr	r3, [sp, #12]
 8001f3a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e093      	b.n	8002068 <HAL_FDCAN_GetRxMessage+0x1b4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001f40:	9b03      	ldr	r3, [sp, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2298      	movs	r2, #152	; 0x98
 8001f46:	589b      	ldr	r3, [r3, r2]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	9307      	str	r3, [sp, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001f50:	9b03      	ldr	r3, [sp, #12]
 8001f52:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001f54:	9a07      	ldr	r2, [sp, #28]
 8001f56:	0013      	movs	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	189b      	adds	r3, r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	18cb      	adds	r3, r1, r3
 8001f60:	9309      	str	r3, [sp, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	05db      	lsls	r3, r3, #23
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	9b01      	ldr	r3, [sp, #4]
 8001f6e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001f70:	9b01      	ldr	r3, [sp, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <HAL_FDCAN_GetRxMessage+0xd4>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0c9b      	lsrs	r3, r3, #18
 8001f7e:	055b      	lsls	r3, r3, #21
 8001f80:	0d5a      	lsrs	r2, r3, #21
 8001f82:	9b01      	ldr	r3, [sp, #4]
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e005      	b.n	8001f94 <HAL_FDCAN_GetRxMessage+0xe0>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	9b01      	ldr	r3, [sp, #4]
 8001f92:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	059b      	lsls	r3, r3, #22
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	9b01      	ldr	r3, [sp, #4]
 8001fa0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0fdb      	lsrs	r3, r3, #31
 8001fa8:	07da      	lsls	r2, r3, #31
 8001faa:	9b01      	ldr	r3, [sp, #4]
 8001fac:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	9309      	str	r3, [sp, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	0c1a      	lsrs	r2, r3, #16
 8001fbc:	9b01      	ldr	r3, [sp, #4]
 8001fbe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	23f0      	movs	r3, #240	; 0xf0
 8001fc6:	031b      	lsls	r3, r3, #12
 8001fc8:	401a      	ands	r2, r3
 8001fca:	9b01      	ldr	r3, [sp, #4]
 8001fcc:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	035b      	lsls	r3, r3, #13
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	9b01      	ldr	r3, [sp, #4]
 8001fda:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	039b      	lsls	r3, r3, #14
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	9b01      	ldr	r3, [sp, #4]
 8001fe8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0e1b      	lsrs	r3, r3, #24
 8001ff0:	227f      	movs	r2, #127	; 0x7f
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	9b01      	ldr	r3, [sp, #4]
 8001ff6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0fda      	lsrs	r2, r3, #31
 8001ffe:	9b01      	ldr	r3, [sp, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002004:	3304      	adds	r3, #4
 8002006:	9309      	str	r3, [sp, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800200a:	9305      	str	r3, [sp, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800200c:	2300      	movs	r3, #0
 800200e:	9308      	str	r3, [sp, #32]
 8002010:	e00a      	b.n	8002028 <HAL_FDCAN_GetRxMessage+0x174>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002012:	9a05      	ldr	r2, [sp, #20]
 8002014:	9b08      	ldr	r3, [sp, #32]
 8002016:	18d2      	adds	r2, r2, r3
 8002018:	9900      	ldr	r1, [sp, #0]
 800201a:	9b08      	ldr	r3, [sp, #32]
 800201c:	18cb      	adds	r3, r1, r3
 800201e:	7812      	ldrb	r2, [r2, #0]
 8002020:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002022:	9b08      	ldr	r3, [sp, #32]
 8002024:	3301      	adds	r3, #1
 8002026:	9308      	str	r3, [sp, #32]
 8002028:	9b01      	ldr	r3, [sp, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_FDCAN_GetRxMessage+0x1bc>)
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	001a      	movs	r2, r3
 8002034:	9b08      	ldr	r3, [sp, #32]
 8002036:	4293      	cmp	r3, r2
 8002038:	d3eb      	bcc.n	8002012 <HAL_FDCAN_GetRxMessage+0x15e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800203a:	9b02      	ldr	r3, [sp, #8]
 800203c:	2b40      	cmp	r3, #64	; 0x40
 800203e:	d105      	bne.n	800204c <HAL_FDCAN_GetRxMessage+0x198>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002040:	9b03      	ldr	r3, [sp, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2194      	movs	r1, #148	; 0x94
 8002046:	9a07      	ldr	r2, [sp, #28]
 8002048:	505a      	str	r2, [r3, r1]
 800204a:	e004      	b.n	8002056 <HAL_FDCAN_GetRxMessage+0x1a2>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800204c:	9b03      	ldr	r3, [sp, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	219c      	movs	r1, #156	; 0x9c
 8002052:	9a07      	ldr	r2, [sp, #28]
 8002054:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e006      	b.n	8002068 <HAL_FDCAN_GetRxMessage+0x1b4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800205a:	9b03      	ldr	r3, [sp, #12]
 800205c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205e:	2208      	movs	r2, #8
 8002060:	431a      	orrs	r2, r3
 8002062:	9b03      	ldr	r3, [sp, #12]
 8002064:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
  }
}
 8002068:	0018      	movs	r0, r3
 800206a:	b00a      	add	sp, #40	; 0x28
 800206c:	4770      	bx	lr
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	0800646c 	.word	0x0800646c

08002074 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002074:	b086      	sub	sp, #24
 8002076:	9003      	str	r0, [sp, #12]
 8002078:	9102      	str	r1, [sp, #8]
 800207a:	9201      	str	r2, [sp, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800207c:	2317      	movs	r3, #23
 800207e:	446b      	add	r3, sp
 8002080:	9a03      	ldr	r2, [sp, #12]
 8002082:	215c      	movs	r1, #92	; 0x5c
 8002084:	5c52      	ldrb	r2, [r2, r1]
 8002086:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002088:	2317      	movs	r3, #23
 800208a:	446b      	add	r3, sp
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d005      	beq.n	800209e <HAL_FDCAN_ActivateNotification+0x2a>
 8002092:	2317      	movs	r3, #23
 8002094:	446b      	add	r3, sp
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d000      	beq.n	800209e <HAL_FDCAN_ActivateNotification+0x2a>
 800209c:	e0b4      	b.n	8002208 <HAL_FDCAN_ActivateNotification+0x194>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800209e:	9b03      	ldr	r3, [sp, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	9304      	str	r3, [sp, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80020a6:	9b02      	ldr	r3, [sp, #8]
 80020a8:	2207      	movs	r2, #7
 80020aa:	4013      	ands	r3, r2
 80020ac:	d003      	beq.n	80020b6 <HAL_FDCAN_ActivateNotification+0x42>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80020ae:	9b04      	ldr	r3, [sp, #16]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	d034      	beq.n	8002120 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80020b6:	9b02      	ldr	r3, [sp, #8]
 80020b8:	2238      	movs	r2, #56	; 0x38
 80020ba:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80020bc:	d003      	beq.n	80020c6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80020be:	9b04      	ldr	r3, [sp, #16]
 80020c0:	2202      	movs	r2, #2
 80020c2:	4013      	ands	r3, r2
 80020c4:	d02c      	beq.n	8002120 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80020c6:	9a02      	ldr	r2, [sp, #8]
 80020c8:	23e0      	movs	r3, #224	; 0xe0
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80020ce:	d003      	beq.n	80020d8 <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80020d0:	9b04      	ldr	r3, [sp, #16]
 80020d2:	2204      	movs	r2, #4
 80020d4:	4013      	ands	r3, r2
 80020d6:	d023      	beq.n	8002120 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80020d8:	9a02      	ldr	r2, [sp, #8]
 80020da:	23f0      	movs	r3, #240	; 0xf0
 80020dc:	015b      	lsls	r3, r3, #5
 80020de:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80020e0:	d003      	beq.n	80020ea <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80020e2:	9b04      	ldr	r3, [sp, #16]
 80020e4:	2208      	movs	r2, #8
 80020e6:	4013      	ands	r3, r2
 80020e8:	d01a      	beq.n	8002120 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80020ea:	9a02      	ldr	r2, [sp, #8]
 80020ec:	23e0      	movs	r3, #224	; 0xe0
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80020f2:	d003      	beq.n	80020fc <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80020f4:	9b04      	ldr	r3, [sp, #16]
 80020f6:	2210      	movs	r2, #16
 80020f8:	4013      	ands	r3, r2
 80020fa:	d011      	beq.n	8002120 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80020fc:	9a02      	ldr	r2, [sp, #8]
 80020fe:	23c0      	movs	r3, #192	; 0xc0
 8002100:	029b      	lsls	r3, r3, #10
 8002102:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002104:	d003      	beq.n	800210e <HAL_FDCAN_ActivateNotification+0x9a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002106:	9b04      	ldr	r3, [sp, #16]
 8002108:	2220      	movs	r2, #32
 800210a:	4013      	ands	r3, r2
 800210c:	d008      	beq.n	8002120 <HAL_FDCAN_ActivateNotification+0xac>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800210e:	9a02      	ldr	r2, [sp, #8]
 8002110:	23fc      	movs	r3, #252	; 0xfc
 8002112:	041b      	lsls	r3, r3, #16
 8002114:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002116:	d00b      	beq.n	8002130 <HAL_FDCAN_ActivateNotification+0xbc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002118:	9b04      	ldr	r3, [sp, #16]
 800211a:	2240      	movs	r2, #64	; 0x40
 800211c:	4013      	ands	r3, r2
 800211e:	d107      	bne.n	8002130 <HAL_FDCAN_ActivateNotification+0xbc>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002120:	9b03      	ldr	r3, [sp, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002126:	9b03      	ldr	r3, [sp, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002130:	9b02      	ldr	r3, [sp, #8]
 8002132:	2207      	movs	r2, #7
 8002134:	4013      	ands	r3, r2
 8002136:	d003      	beq.n	8002140 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002138:	9b04      	ldr	r3, [sp, #16]
 800213a:	2201      	movs	r2, #1
 800213c:	4013      	ands	r3, r2
 800213e:	d134      	bne.n	80021aa <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002140:	9b02      	ldr	r3, [sp, #8]
 8002142:	2238      	movs	r2, #56	; 0x38
 8002144:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002146:	d003      	beq.n	8002150 <HAL_FDCAN_ActivateNotification+0xdc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002148:	9b04      	ldr	r3, [sp, #16]
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d12c      	bne.n	80021aa <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002150:	9a02      	ldr	r2, [sp, #8]
 8002152:	23e0      	movs	r3, #224	; 0xe0
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002158:	d003      	beq.n	8002162 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800215a:	9b04      	ldr	r3, [sp, #16]
 800215c:	2204      	movs	r2, #4
 800215e:	4013      	ands	r3, r2
 8002160:	d123      	bne.n	80021aa <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002162:	9a02      	ldr	r2, [sp, #8]
 8002164:	23f0      	movs	r3, #240	; 0xf0
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800216a:	d003      	beq.n	8002174 <HAL_FDCAN_ActivateNotification+0x100>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800216c:	9b04      	ldr	r3, [sp, #16]
 800216e:	2208      	movs	r2, #8
 8002170:	4013      	ands	r3, r2
 8002172:	d11a      	bne.n	80021aa <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002174:	9a02      	ldr	r2, [sp, #8]
 8002176:	23e0      	movs	r3, #224	; 0xe0
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800217c:	d003      	beq.n	8002186 <HAL_FDCAN_ActivateNotification+0x112>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800217e:	9b04      	ldr	r3, [sp, #16]
 8002180:	2210      	movs	r2, #16
 8002182:	4013      	ands	r3, r2
 8002184:	d111      	bne.n	80021aa <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002186:	9a02      	ldr	r2, [sp, #8]
 8002188:	23c0      	movs	r3, #192	; 0xc0
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800218e:	d003      	beq.n	8002198 <HAL_FDCAN_ActivateNotification+0x124>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002190:	9b04      	ldr	r3, [sp, #16]
 8002192:	2220      	movs	r2, #32
 8002194:	4013      	ands	r3, r2
 8002196:	d108      	bne.n	80021aa <HAL_FDCAN_ActivateNotification+0x136>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002198:	9a02      	ldr	r2, [sp, #8]
 800219a:	23fc      	movs	r3, #252	; 0xfc
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80021a0:	d00b      	beq.n	80021ba <HAL_FDCAN_ActivateNotification+0x146>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80021a2:	9b04      	ldr	r3, [sp, #16]
 80021a4:	2240      	movs	r2, #64	; 0x40
 80021a6:	4013      	ands	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_FDCAN_ActivateNotification+0x146>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80021aa:	9b03      	ldr	r3, [sp, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021b0:	9b03      	ldr	r3, [sp, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2102      	movs	r1, #2
 80021b6:	430a      	orrs	r2, r1
 80021b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80021ba:	9b02      	ldr	r3, [sp, #8]
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	4013      	ands	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80021c2:	9b03      	ldr	r3, [sp, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	22dc      	movs	r2, #220	; 0xdc
 80021c8:	5899      	ldr	r1, [r3, r2]
 80021ca:	9b03      	ldr	r3, [sp, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	9a01      	ldr	r2, [sp, #4]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	21dc      	movs	r1, #220	; 0xdc
 80021d4:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80021d6:	9a02      	ldr	r2, [sp, #8]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4013      	ands	r3, r2
 80021de:	d009      	beq.n	80021f4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80021e0:	9b03      	ldr	r3, [sp, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	22e0      	movs	r2, #224	; 0xe0
 80021e6:	5899      	ldr	r1, [r3, r2]
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	9a01      	ldr	r2, [sp, #4]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	21e0      	movs	r1, #224	; 0xe0
 80021f2:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80021f4:	9b03      	ldr	r3, [sp, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80021fa:	9b03      	ldr	r3, [sp, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	9a02      	ldr	r2, [sp, #8]
 8002200:	430a      	orrs	r2, r1
 8002202:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e006      	b.n	8002216 <HAL_FDCAN_ActivateNotification+0x1a2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002208:	9b03      	ldr	r3, [sp, #12]
 800220a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220c:	2202      	movs	r2, #2
 800220e:	431a      	orrs	r2, r3
 8002210:	9b03      	ldr	r3, [sp, #12]
 8002212:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
  }
}
 8002216:	0018      	movs	r0, r3
 8002218:	b006      	add	sp, #24
 800221a:	4770      	bx	lr

0800221c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800221c:	b500      	push	{lr}
 800221e:	b08d      	sub	sp, #52	; 0x34
 8002220:	9001      	str	r0, [sp, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002228:	23e0      	movs	r3, #224	; 0xe0
 800222a:	015b      	lsls	r3, r3, #5
 800222c:	4013      	ands	r3, r2
 800222e:	930b      	str	r3, [sp, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002230:	9b01      	ldr	r3, [sp, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002238:	4013      	ands	r3, r2
 800223a:	930b      	str	r3, [sp, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800223c:	9b01      	ldr	r3, [sp, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002242:	2207      	movs	r2, #7
 8002244:	4013      	ands	r3, r2
 8002246:	930a      	str	r3, [sp, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002248:	9b01      	ldr	r3, [sp, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800224e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002250:	4013      	ands	r3, r2
 8002252:	930a      	str	r3, [sp, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002254:	9b01      	ldr	r3, [sp, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225a:	2238      	movs	r2, #56	; 0x38
 800225c:	4013      	ands	r3, r2
 800225e:	9309      	str	r3, [sp, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002260:	9b01      	ldr	r3, [sp, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002268:	4013      	ands	r3, r2
 800226a:	9309      	str	r3, [sp, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800226c:	9b01      	ldr	r3, [sp, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002272:	23f1      	movs	r3, #241	; 0xf1
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	4013      	ands	r3, r2
 8002278:	9308      	str	r3, [sp, #32]
  Errors &= hfdcan->Instance->IE;
 800227a:	9b01      	ldr	r3, [sp, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002280:	9b08      	ldr	r3, [sp, #32]
 8002282:	4013      	ands	r3, r2
 8002284:	9308      	str	r3, [sp, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002286:	9b01      	ldr	r3, [sp, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800228c:	23e0      	movs	r3, #224	; 0xe0
 800228e:	031b      	lsls	r3, r3, #12
 8002290:	4013      	ands	r3, r2
 8002292:	9307      	str	r3, [sp, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002294:	9b01      	ldr	r3, [sp, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800229a:	9b07      	ldr	r3, [sp, #28]
 800229c:	4013      	ands	r3, r2
 800229e:	9307      	str	r3, [sp, #28]
  itsource = hfdcan->Instance->IE;
 80022a0:	9b01      	ldr	r3, [sp, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	9306      	str	r3, [sp, #24]
  itflag = hfdcan->Instance->IR;
 80022a8:	9b01      	ldr	r3, [sp, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ae:	9305      	str	r3, [sp, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80022b0:	9b05      	ldr	r3, [sp, #20]
 80022b2:	2240      	movs	r2, #64	; 0x40
 80022b4:	4013      	ands	r3, r2
 80022b6:	d00b      	beq.n	80022d0 <HAL_FDCAN_IRQHandler+0xb4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80022b8:	9b06      	ldr	r3, [sp, #24]
 80022ba:	2240      	movs	r2, #64	; 0x40
 80022bc:	4013      	ands	r3, r2
 80022be:	d007      	beq.n	80022d0 <HAL_FDCAN_IRQHandler+0xb4>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80022c0:	9b01      	ldr	r3, [sp, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2240      	movs	r2, #64	; 0x40
 80022c6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80022c8:	9b01      	ldr	r3, [sp, #4]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 f900 	bl	80024d0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80022d0:	9a05      	ldr	r2, [sp, #20]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4013      	ands	r3, r2
 80022d8:	d01b      	beq.n	8002312 <HAL_FDCAN_IRQHandler+0xf6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80022da:	9a06      	ldr	r2, [sp, #24]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	d016      	beq.n	8002312 <HAL_FDCAN_IRQHandler+0xf6>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80022e4:	9b01      	ldr	r3, [sp, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	22d8      	movs	r2, #216	; 0xd8
 80022ea:	589b      	ldr	r3, [r3, r2]
 80022ec:	9304      	str	r3, [sp, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	22e0      	movs	r2, #224	; 0xe0
 80022f4:	589a      	ldr	r2, [r3, r2]
 80022f6:	9b04      	ldr	r3, [sp, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	9304      	str	r3, [sp, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80022fc:	9b01      	ldr	r3, [sp, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	0052      	lsls	r2, r2, #1
 8002304:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002306:	9a04      	ldr	r2, [sp, #16]
 8002308:	9b01      	ldr	r3, [sp, #4]
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f000 f8cf 	bl	80024b0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_FDCAN_IRQHandler+0x110>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002318:	9b01      	ldr	r3, [sp, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800231e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002322:	9b01      	ldr	r3, [sp, #4]
 8002324:	0011      	movs	r1, r2
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f8ab 	bl	8002482 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800232c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_FDCAN_IRQHandler+0x12a>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002332:	9b01      	ldr	r3, [sp, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002338:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800233a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800233c:	9b01      	ldr	r3, [sp, #4]
 800233e:	0011      	movs	r1, r2
 8002340:	0018      	movs	r0, r3
 8002342:	f000 fbe7 	bl	8002b14 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_FDCAN_IRQHandler+0x144>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800234c:	9b01      	ldr	r3, [sp, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002352:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002356:	9b01      	ldr	r3, [sp, #4]
 8002358:	0011      	movs	r1, r2
 800235a:	0018      	movs	r0, r3
 800235c:	f000 f897 	bl	800248e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002360:	9a05      	ldr	r2, [sp, #20]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4013      	ands	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_FDCAN_IRQHandler+0x16a>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800236a:	9a06      	ldr	r2, [sp, #24]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d008      	beq.n	8002386 <HAL_FDCAN_IRQHandler+0x16a>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002374:	9b01      	ldr	r3, [sp, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800237e:	9b01      	ldr	r3, [sp, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f88a 	bl	800249a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002386:	9b05      	ldr	r3, [sp, #20]
 8002388:	2280      	movs	r2, #128	; 0x80
 800238a:	4013      	ands	r3, r2
 800238c:	d019      	beq.n	80023c2 <HAL_FDCAN_IRQHandler+0x1a6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800238e:	9b06      	ldr	r3, [sp, #24]
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	4013      	ands	r3, r2
 8002394:	d015      	beq.n	80023c2 <HAL_FDCAN_IRQHandler+0x1a6>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002396:	9b01      	ldr	r3, [sp, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	22d4      	movs	r2, #212	; 0xd4
 800239c:	589b      	ldr	r3, [r3, r2]
 800239e:	9303      	str	r3, [sp, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80023a0:	9b01      	ldr	r3, [sp, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	22dc      	movs	r2, #220	; 0xdc
 80023a6:	589a      	ldr	r2, [r3, r2]
 80023a8:	9b03      	ldr	r3, [sp, #12]
 80023aa:	4013      	ands	r3, r2
 80023ac:	9303      	str	r3, [sp, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80023b6:	9a03      	ldr	r2, [sp, #12]
 80023b8:	9b01      	ldr	r3, [sp, #4]
 80023ba:	0011      	movs	r1, r2
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 f871 	bl	80024a4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80023c2:	9a05      	ldr	r2, [sp, #20]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	019b      	lsls	r3, r3, #6
 80023c8:	4013      	ands	r3, r2
 80023ca:	d00d      	beq.n	80023e8 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80023cc:	9a06      	ldr	r2, [sp, #24]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	019b      	lsls	r3, r3, #6
 80023d2:	4013      	ands	r3, r2
 80023d4:	d008      	beq.n	80023e8 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80023d6:	9b01      	ldr	r3, [sp, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	0192      	lsls	r2, r2, #6
 80023de:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80023e0:	9b01      	ldr	r3, [sp, #4]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 f86a 	bl	80024bc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80023e8:	9a05      	ldr	r2, [sp, #20]
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	4013      	ands	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80023f2:	9a06      	ldr	r2, [sp, #24]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	4013      	ands	r3, r2
 80023fa:	d008      	beq.n	800240e <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80023fc:	9b01      	ldr	r3, [sp, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	0212      	lsls	r2, r2, #8
 8002404:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002406:	9b01      	ldr	r3, [sp, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 f85c 	bl	80024c6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800240e:	9a05      	ldr	r2, [sp, #20]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	01db      	lsls	r3, r3, #7
 8002414:	4013      	ands	r3, r2
 8002416:	d00f      	beq.n	8002438 <HAL_FDCAN_IRQHandler+0x21c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002418:	9a06      	ldr	r2, [sp, #24]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	01db      	lsls	r3, r3, #7
 800241e:	4013      	ands	r3, r2
 8002420:	d00a      	beq.n	8002438 <HAL_FDCAN_IRQHandler+0x21c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002422:	9b01      	ldr	r3, [sp, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	01d2      	lsls	r2, r2, #7
 800242a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800242c:	9b01      	ldr	r3, [sp, #4]
 800242e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	431a      	orrs	r2, r3
 8002434:	9b01      	ldr	r3, [sp, #4]
 8002436:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002438:	9b07      	ldr	r3, [sp, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800243e:	9b01      	ldr	r3, [sp, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	9a07      	ldr	r2, [sp, #28]
 8002444:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002446:	9a07      	ldr	r2, [sp, #28]
 8002448:	9b01      	ldr	r3, [sp, #4]
 800244a:	0011      	movs	r1, r2
 800244c:	0018      	movs	r0, r3
 800244e:	f000 f849 	bl	80024e4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002452:	9b08      	ldr	r3, [sp, #32]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002458:	9b01      	ldr	r3, [sp, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	9a08      	ldr	r2, [sp, #32]
 800245e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002460:	9b01      	ldr	r3, [sp, #4]
 8002462:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002464:	9b08      	ldr	r3, [sp, #32]
 8002466:	431a      	orrs	r2, r3
 8002468:	9b01      	ldr	r3, [sp, #4]
 800246a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800246c:	9b01      	ldr	r3, [sp, #4]
 800246e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_FDCAN_IRQHandler+0x260>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002474:	9b01      	ldr	r3, [sp, #4]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 f82f 	bl	80024da <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	b00d      	add	sp, #52	; 0x34
 8002480:	bd00      	pop	{pc}

08002482 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002482:	b082      	sub	sp, #8
 8002484:	9001      	str	r0, [sp, #4]
 8002486:	9100      	str	r1, [sp, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	b002      	add	sp, #8
 800248c:	4770      	bx	lr

0800248e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800248e:	b082      	sub	sp, #8
 8002490:	9001      	str	r0, [sp, #4]
 8002492:	9100      	str	r1, [sp, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	b002      	add	sp, #8
 8002498:	4770      	bx	lr

0800249a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800249a:	b082      	sub	sp, #8
 800249c:	9001      	str	r0, [sp, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	b002      	add	sp, #8
 80024a2:	4770      	bx	lr

080024a4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80024a4:	b082      	sub	sp, #8
 80024a6:	9001      	str	r0, [sp, #4]
 80024a8:	9100      	str	r1, [sp, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	b002      	add	sp, #8
 80024ae:	4770      	bx	lr

080024b0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80024b0:	b082      	sub	sp, #8
 80024b2:	9001      	str	r0, [sp, #4]
 80024b4:	9100      	str	r1, [sp, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	b002      	add	sp, #8
 80024ba:	4770      	bx	lr

080024bc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024bc:	b082      	sub	sp, #8
 80024be:	9001      	str	r0, [sp, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	b002      	add	sp, #8
 80024c4:	4770      	bx	lr

080024c6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024c6:	b082      	sub	sp, #8
 80024c8:	9001      	str	r0, [sp, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	b002      	add	sp, #8
 80024ce:	4770      	bx	lr

080024d0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024d0:	b082      	sub	sp, #8
 80024d2:	9001      	str	r0, [sp, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	b002      	add	sp, #8
 80024d8:	4770      	bx	lr

080024da <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024da:	b082      	sub	sp, #8
 80024dc:	9001      	str	r0, [sp, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	b002      	add	sp, #8
 80024e2:	4770      	bx	lr

080024e4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80024e4:	b082      	sub	sp, #8
 80024e6:	9001      	str	r0, [sp, #4]
 80024e8:	9100      	str	r1, [sp, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	b002      	add	sp, #8
 80024ee:	4770      	bx	lr

080024f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80024f0:	b084      	sub	sp, #16
 80024f2:	9001      	str	r0, [sp, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <FDCAN_CalcultateRamBlockAddresses+0xc4>)
 80024f6:	9302      	str	r3, [sp, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80024f8:	9b01      	ldr	r3, [sp, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2e      	ldr	r2, [pc, #184]	; (80025b8 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d105      	bne.n	800250e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002502:	9b02      	ldr	r3, [sp, #8]
 8002504:	22d4      	movs	r2, #212	; 0xd4
 8002506:	0092      	lsls	r2, r2, #2
 8002508:	4694      	mov	ip, r2
 800250a:	4463      	add	r3, ip
 800250c:	9302      	str	r3, [sp, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800250e:	9b01      	ldr	r3, [sp, #4]
 8002510:	9a02      	ldr	r2, [sp, #8]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002514:	9b01      	ldr	r3, [sp, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	589b      	ldr	r3, [r3, r2]
 800251c:	4a27      	ldr	r2, [pc, #156]	; (80025bc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800251e:	4013      	ands	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	9b01      	ldr	r3, [sp, #4]
 8002524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002526:	041a      	lsls	r2, r3, #16
 8002528:	9b01      	ldr	r3, [sp, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	2180      	movs	r1, #128	; 0x80
 8002530:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002532:	9b02      	ldr	r3, [sp, #8]
 8002534:	3370      	adds	r3, #112	; 0x70
 8002536:	001a      	movs	r2, r3
 8002538:	9b01      	ldr	r3, [sp, #4]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800253c:	9b01      	ldr	r3, [sp, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	589b      	ldr	r3, [r3, r2]
 8002544:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002546:	4013      	ands	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	9b01      	ldr	r3, [sp, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	061a      	lsls	r2, r3, #24
 8002550:	9b01      	ldr	r3, [sp, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800255a:	9b02      	ldr	r3, [sp, #8]
 800255c:	33b0      	adds	r3, #176	; 0xb0
 800255e:	001a      	movs	r2, r3
 8002560:	9b01      	ldr	r3, [sp, #4]
 8002562:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002564:	9b02      	ldr	r3, [sp, #8]
 8002566:	3389      	adds	r3, #137	; 0x89
 8002568:	33ff      	adds	r3, #255	; 0xff
 800256a:	001a      	movs	r2, r3
 800256c:	9b01      	ldr	r3, [sp, #4]
 800256e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002570:	9b02      	ldr	r3, [sp, #8]
 8002572:	2298      	movs	r2, #152	; 0x98
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	189a      	adds	r2, r3, r2
 8002578:	9b01      	ldr	r3, [sp, #4]
 800257a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800257c:	9b02      	ldr	r3, [sp, #8]
 800257e:	229e      	movs	r2, #158	; 0x9e
 8002580:	0092      	lsls	r2, r2, #2
 8002582:	189a      	adds	r2, r3, r2
 8002584:	9b01      	ldr	r3, [sp, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002588:	9b02      	ldr	r3, [sp, #8]
 800258a:	9303      	str	r3, [sp, #12]
 800258c:	e005      	b.n	800259a <FDCAN_CalcultateRamBlockAddresses+0xaa>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800258e:	9b03      	ldr	r3, [sp, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002594:	9b03      	ldr	r3, [sp, #12]
 8002596:	3304      	adds	r3, #4
 8002598:	9303      	str	r3, [sp, #12]
 800259a:	9b02      	ldr	r3, [sp, #8]
 800259c:	22d4      	movs	r2, #212	; 0xd4
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	4694      	mov	ip, r2
 80025a2:	4463      	add	r3, ip
 80025a4:	9a03      	ldr	r2, [sp, #12]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3f1      	bcc.n	800258e <FDCAN_CalcultateRamBlockAddresses+0x9e>
  }
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	b004      	add	sp, #16
 80025b0:	4770      	bx	lr
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	4000b400 	.word	0x4000b400
 80025b8:	40006800 	.word	0x40006800
 80025bc:	ffe0ffff 	.word	0xffe0ffff
 80025c0:	f0ffffff 	.word	0xf0ffffff

080025c4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80025c4:	b088      	sub	sp, #32
 80025c6:	9003      	str	r0, [sp, #12]
 80025c8:	9102      	str	r1, [sp, #8]
 80025ca:	9201      	str	r2, [sp, #4]
 80025cc:	9300      	str	r3, [sp, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80025ce:	9b02      	ldr	r3, [sp, #8]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <FDCAN_CopyMessageToRAM+0x28>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80025d6:	9b02      	ldr	r3, [sp, #8]
 80025d8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80025da:	9b02      	ldr	r3, [sp, #8]
 80025dc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80025de:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80025e0:	9b02      	ldr	r3, [sp, #8]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80025e6:	4313      	orrs	r3, r2
 80025e8:	9307      	str	r3, [sp, #28]
 80025ea:	e00b      	b.n	8002604 <FDCAN_CopyMessageToRAM+0x40>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80025ec:	9b02      	ldr	r3, [sp, #8]
 80025ee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80025f0:	9b02      	ldr	r3, [sp, #8]
 80025f2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80025f4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80025f6:	9b02      	ldr	r3, [sp, #8]
 80025f8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80025fa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	05d2      	lsls	r2, r2, #23
 8002600:	4313      	orrs	r3, r2
 8002602:	9307      	str	r3, [sp, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002604:	9b02      	ldr	r3, [sp, #8]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800260a:	9b02      	ldr	r3, [sp, #8]
 800260c:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800260e:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002610:	9b02      	ldr	r3, [sp, #8]
 8002612:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002614:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002616:	9b02      	ldr	r3, [sp, #8]
 8002618:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800261a:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800261c:	9b02      	ldr	r3, [sp, #8]
 800261e:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002620:	4313      	orrs	r3, r2
 8002622:	9304      	str	r3, [sp, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002624:	9b03      	ldr	r3, [sp, #12]
 8002626:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002628:	9a00      	ldr	r2, [sp, #0]
 800262a:	0013      	movs	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	189b      	adds	r3, r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	18cb      	adds	r3, r1, r3
 8002634:	9306      	str	r3, [sp, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002636:	9b06      	ldr	r3, [sp, #24]
 8002638:	9a07      	ldr	r2, [sp, #28]
 800263a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800263c:	9b06      	ldr	r3, [sp, #24]
 800263e:	3304      	adds	r3, #4
 8002640:	9306      	str	r3, [sp, #24]
  *TxAddress = TxElementW2;
 8002642:	9b06      	ldr	r3, [sp, #24]
 8002644:	9a04      	ldr	r2, [sp, #16]
 8002646:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002648:	9b06      	ldr	r3, [sp, #24]
 800264a:	3304      	adds	r3, #4
 800264c:	9306      	str	r3, [sp, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800264e:	2300      	movs	r3, #0
 8002650:	9305      	str	r3, [sp, #20]
 8002652:	e020      	b.n	8002696 <FDCAN_CopyMessageToRAM+0xd2>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002654:	9b05      	ldr	r3, [sp, #20]
 8002656:	3303      	adds	r3, #3
 8002658:	9a01      	ldr	r2, [sp, #4]
 800265a:	18d3      	adds	r3, r2, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002660:	9b05      	ldr	r3, [sp, #20]
 8002662:	3302      	adds	r3, #2
 8002664:	9901      	ldr	r1, [sp, #4]
 8002666:	18cb      	adds	r3, r1, r3
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800266c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800266e:	9b05      	ldr	r3, [sp, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	9901      	ldr	r1, [sp, #4]
 8002674:	18cb      	adds	r3, r1, r3
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800267a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800267c:	9901      	ldr	r1, [sp, #4]
 800267e:	9a05      	ldr	r2, [sp, #20]
 8002680:	188a      	adds	r2, r1, r2
 8002682:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002684:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002686:	9b06      	ldr	r3, [sp, #24]
 8002688:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800268a:	9b06      	ldr	r3, [sp, #24]
 800268c:	3304      	adds	r3, #4
 800268e:	9306      	str	r3, [sp, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002690:	9b05      	ldr	r3, [sp, #20]
 8002692:	3304      	adds	r3, #4
 8002694:	9305      	str	r3, [sp, #20]
 8002696:	9b02      	ldr	r3, [sp, #8]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	0c1b      	lsrs	r3, r3, #16
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <FDCAN_CopyMessageToRAM+0xec>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	001a      	movs	r2, r3
 80026a2:	9b05      	ldr	r3, [sp, #20]
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d3d5      	bcc.n	8002654 <FDCAN_CopyMessageToRAM+0x90>
  }
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	b008      	add	sp, #32
 80026ae:	4770      	bx	lr
 80026b0:	0800646c 	.word	0x0800646c

080026b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b4:	b500      	push	{lr}
 80026b6:	b083      	sub	sp, #12
 80026b8:	9001      	str	r0, [sp, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ba:	9b01      	ldr	r3, [sp, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_TIM_Base_Init+0x10>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e04a      	b.n	800275a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c4:	9b01      	ldr	r3, [sp, #4]
 80026c6:	223d      	movs	r2, #61	; 0x3d
 80026c8:	5c9b      	ldrb	r3, [r3, r2]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d0:	9b01      	ldr	r3, [sp, #4]
 80026d2:	223c      	movs	r2, #60	; 0x3c
 80026d4:	2100      	movs	r1, #0
 80026d6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026d8:	9b01      	ldr	r3, [sp, #4]
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 f840 	bl	8002760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	9b01      	ldr	r3, [sp, #4]
 80026e2:	223d      	movs	r2, #61	; 0x3d
 80026e4:	2102      	movs	r1, #2
 80026e6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e8:	9b01      	ldr	r3, [sp, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	9b01      	ldr	r3, [sp, #4]
 80026ee:	3304      	adds	r3, #4
 80026f0:	0019      	movs	r1, r3
 80026f2:	0010      	movs	r0, r2
 80026f4:	f000 f8b4 	bl	8002860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f8:	9b01      	ldr	r3, [sp, #4]
 80026fa:	2248      	movs	r2, #72	; 0x48
 80026fc:	2101      	movs	r1, #1
 80026fe:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002700:	9b01      	ldr	r3, [sp, #4]
 8002702:	223e      	movs	r2, #62	; 0x3e
 8002704:	2101      	movs	r1, #1
 8002706:	5499      	strb	r1, [r3, r2]
 8002708:	9b01      	ldr	r3, [sp, #4]
 800270a:	223f      	movs	r2, #63	; 0x3f
 800270c:	2101      	movs	r1, #1
 800270e:	5499      	strb	r1, [r3, r2]
 8002710:	9b01      	ldr	r3, [sp, #4]
 8002712:	2240      	movs	r2, #64	; 0x40
 8002714:	2101      	movs	r1, #1
 8002716:	5499      	strb	r1, [r3, r2]
 8002718:	9b01      	ldr	r3, [sp, #4]
 800271a:	2241      	movs	r2, #65	; 0x41
 800271c:	2101      	movs	r1, #1
 800271e:	5499      	strb	r1, [r3, r2]
 8002720:	9b01      	ldr	r3, [sp, #4]
 8002722:	2242      	movs	r2, #66	; 0x42
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]
 8002728:	9b01      	ldr	r3, [sp, #4]
 800272a:	2243      	movs	r2, #67	; 0x43
 800272c:	2101      	movs	r1, #1
 800272e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	9b01      	ldr	r3, [sp, #4]
 8002732:	2244      	movs	r2, #68	; 0x44
 8002734:	2101      	movs	r1, #1
 8002736:	5499      	strb	r1, [r3, r2]
 8002738:	9b01      	ldr	r3, [sp, #4]
 800273a:	2245      	movs	r2, #69	; 0x45
 800273c:	2101      	movs	r1, #1
 800273e:	5499      	strb	r1, [r3, r2]
 8002740:	9b01      	ldr	r3, [sp, #4]
 8002742:	2246      	movs	r2, #70	; 0x46
 8002744:	2101      	movs	r1, #1
 8002746:	5499      	strb	r1, [r3, r2]
 8002748:	9b01      	ldr	r3, [sp, #4]
 800274a:	2247      	movs	r2, #71	; 0x47
 800274c:	2101      	movs	r1, #1
 800274e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002750:	9b01      	ldr	r3, [sp, #4]
 8002752:	223d      	movs	r2, #61	; 0x3d
 8002754:	2101      	movs	r1, #1
 8002756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	0018      	movs	r0, r3
 800275c:	b003      	add	sp, #12
 800275e:	bd00      	pop	{pc}

08002760 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002760:	b082      	sub	sp, #8
 8002762:	9001      	str	r0, [sp, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	b002      	add	sp, #8
 8002768:	4770      	bx	lr
	...

0800276c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800276c:	b084      	sub	sp, #16
 800276e:	9001      	str	r0, [sp, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002770:	9b01      	ldr	r3, [sp, #4]
 8002772:	223d      	movs	r2, #61	; 0x3d
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_Start+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e03f      	b.n	8002800 <HAL_TIM_Base_Start+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	9b01      	ldr	r3, [sp, #4]
 8002782:	223d      	movs	r2, #61	; 0x3d
 8002784:	2102      	movs	r1, #2
 8002786:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002788:	9b01      	ldr	r3, [sp, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <HAL_TIM_Base_Start+0x9c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d014      	beq.n	80027bc <HAL_TIM_Base_Start+0x50>
 8002792:	9b01      	ldr	r3, [sp, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	05db      	lsls	r3, r3, #23
 800279a:	429a      	cmp	r2, r3
 800279c:	d00e      	beq.n	80027bc <HAL_TIM_Base_Start+0x50>
 800279e:	9b01      	ldr	r3, [sp, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1a      	ldr	r2, [pc, #104]	; (800280c <HAL_TIM_Base_Start+0xa0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d009      	beq.n	80027bc <HAL_TIM_Base_Start+0x50>
 80027a8:	9b01      	ldr	r3, [sp, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_TIM_Base_Start+0xa4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_TIM_Base_Start+0x50>
 80027b2:	9b01      	ldr	r3, [sp, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <HAL_TIM_Base_Start+0xa8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d116      	bne.n	80027ea <HAL_TIM_Base_Start+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027bc:	9b01      	ldr	r3, [sp, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4a15      	ldr	r2, [pc, #84]	; (8002818 <HAL_TIM_Base_Start+0xac>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	9303      	str	r3, [sp, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c8:	9b03      	ldr	r3, [sp, #12]
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d016      	beq.n	80027fc <HAL_TIM_Base_Start+0x90>
 80027ce:	9a03      	ldr	r2, [sp, #12]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	025b      	lsls	r3, r3, #9
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d011      	beq.n	80027fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80027d8:	9b01      	ldr	r3, [sp, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	9b01      	ldr	r3, [sp, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2101      	movs	r1, #1
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e8:	e008      	b.n	80027fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ea:	9b01      	ldr	r3, [sp, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	9b01      	ldr	r3, [sp, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e000      	b.n	80027fe <HAL_TIM_Base_Start+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fc:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	b004      	add	sp, #16
 8002804:	4770      	bx	lr
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40012c00 	.word	0x40012c00
 800280c:	40000400 	.word	0x40000400
 8002810:	40000800 	.word	0x40000800
 8002814:	40014000 	.word	0x40014000
 8002818:	00010007 	.word	0x00010007

0800281c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800281c:	b082      	sub	sp, #8
 800281e:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002820:	9b01      	ldr	r3, [sp, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <HAL_TIM_Base_Stop+0x3c>)
 8002828:	4013      	ands	r3, r2
 800282a:	d10d      	bne.n	8002848 <HAL_TIM_Base_Stop+0x2c>
 800282c:	9b01      	ldr	r3, [sp, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <HAL_TIM_Base_Stop+0x40>)
 8002834:	4013      	ands	r3, r2
 8002836:	d107      	bne.n	8002848 <HAL_TIM_Base_Stop+0x2c>
 8002838:	9b01      	ldr	r3, [sp, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	9b01      	ldr	r3, [sp, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2101      	movs	r1, #1
 8002844:	438a      	bics	r2, r1
 8002846:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002848:	9b01      	ldr	r3, [sp, #4]
 800284a:	223d      	movs	r2, #61	; 0x3d
 800284c:	2101      	movs	r1, #1
 800284e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	0018      	movs	r0, r3
 8002854:	b002      	add	sp, #8
 8002856:	4770      	bx	lr
 8002858:	00001111 	.word	0x00001111
 800285c:	00000444 	.word	0x00000444

08002860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002860:	b084      	sub	sp, #16
 8002862:	9001      	str	r0, [sp, #4]
 8002864:	9100      	str	r1, [sp, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002866:	9b01      	ldr	r3, [sp, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	9303      	str	r3, [sp, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800286c:	9b01      	ldr	r3, [sp, #4]
 800286e:	4a38      	ldr	r2, [pc, #224]	; (8002950 <TIM_Base_SetConfig+0xf0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00c      	beq.n	800288e <TIM_Base_SetConfig+0x2e>
 8002874:	9a01      	ldr	r2, [sp, #4]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	05db      	lsls	r3, r3, #23
 800287a:	429a      	cmp	r2, r3
 800287c:	d007      	beq.n	800288e <TIM_Base_SetConfig+0x2e>
 800287e:	9b01      	ldr	r3, [sp, #4]
 8002880:	4a34      	ldr	r2, [pc, #208]	; (8002954 <TIM_Base_SetConfig+0xf4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d003      	beq.n	800288e <TIM_Base_SetConfig+0x2e>
 8002886:	9b01      	ldr	r3, [sp, #4]
 8002888:	4a33      	ldr	r2, [pc, #204]	; (8002958 <TIM_Base_SetConfig+0xf8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d108      	bne.n	80028a0 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800288e:	9b03      	ldr	r3, [sp, #12]
 8002890:	2270      	movs	r2, #112	; 0x70
 8002892:	4393      	bics	r3, r2
 8002894:	9303      	str	r3, [sp, #12]
    tmpcr1 |= Structure->CounterMode;
 8002896:	9b00      	ldr	r3, [sp, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	9a03      	ldr	r2, [sp, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	9303      	str	r3, [sp, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a0:	9b01      	ldr	r3, [sp, #4]
 80028a2:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <TIM_Base_SetConfig+0xf0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d01c      	beq.n	80028e2 <TIM_Base_SetConfig+0x82>
 80028a8:	9a01      	ldr	r2, [sp, #4]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	05db      	lsls	r3, r3, #23
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d017      	beq.n	80028e2 <TIM_Base_SetConfig+0x82>
 80028b2:	9b01      	ldr	r3, [sp, #4]
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <TIM_Base_SetConfig+0xf4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <TIM_Base_SetConfig+0x82>
 80028ba:	9b01      	ldr	r3, [sp, #4]
 80028bc:	4a26      	ldr	r2, [pc, #152]	; (8002958 <TIM_Base_SetConfig+0xf8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00f      	beq.n	80028e2 <TIM_Base_SetConfig+0x82>
 80028c2:	9b01      	ldr	r3, [sp, #4]
 80028c4:	4a25      	ldr	r2, [pc, #148]	; (800295c <TIM_Base_SetConfig+0xfc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00b      	beq.n	80028e2 <TIM_Base_SetConfig+0x82>
 80028ca:	9b01      	ldr	r3, [sp, #4]
 80028cc:	4a24      	ldr	r2, [pc, #144]	; (8002960 <TIM_Base_SetConfig+0x100>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <TIM_Base_SetConfig+0x82>
 80028d2:	9b01      	ldr	r3, [sp, #4]
 80028d4:	4a23      	ldr	r2, [pc, #140]	; (8002964 <TIM_Base_SetConfig+0x104>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d003      	beq.n	80028e2 <TIM_Base_SetConfig+0x82>
 80028da:	9b01      	ldr	r3, [sp, #4]
 80028dc:	4a22      	ldr	r2, [pc, #136]	; (8002968 <TIM_Base_SetConfig+0x108>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d108      	bne.n	80028f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028e2:	9b03      	ldr	r3, [sp, #12]
 80028e4:	4a21      	ldr	r2, [pc, #132]	; (800296c <TIM_Base_SetConfig+0x10c>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	9303      	str	r3, [sp, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ea:	9b00      	ldr	r3, [sp, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	9a03      	ldr	r2, [sp, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	9303      	str	r3, [sp, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f4:	9b03      	ldr	r3, [sp, #12]
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	4393      	bics	r3, r2
 80028fa:	001a      	movs	r2, r3
 80028fc:	9b00      	ldr	r3, [sp, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	9303      	str	r3, [sp, #12]

  TIMx->CR1 = tmpcr1;
 8002904:	9b01      	ldr	r3, [sp, #4]
 8002906:	9a03      	ldr	r2, [sp, #12]
 8002908:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800290a:	9b00      	ldr	r3, [sp, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	9b01      	ldr	r3, [sp, #4]
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002912:	9b00      	ldr	r3, [sp, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	9b01      	ldr	r3, [sp, #4]
 8002918:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800291a:	9b01      	ldr	r3, [sp, #4]
 800291c:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <TIM_Base_SetConfig+0xf0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00b      	beq.n	800293a <TIM_Base_SetConfig+0xda>
 8002922:	9b01      	ldr	r3, [sp, #4]
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <TIM_Base_SetConfig+0x100>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <TIM_Base_SetConfig+0xda>
 800292a:	9b01      	ldr	r3, [sp, #4]
 800292c:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <TIM_Base_SetConfig+0x104>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d003      	beq.n	800293a <TIM_Base_SetConfig+0xda>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <TIM_Base_SetConfig+0x108>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d103      	bne.n	8002942 <TIM_Base_SetConfig+0xe2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800293a:	9b00      	ldr	r3, [sp, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	9b01      	ldr	r3, [sp, #4]
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002942:	9b01      	ldr	r3, [sp, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	615a      	str	r2, [r3, #20]
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	b004      	add	sp, #16
 800294c:	4770      	bx	lr
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40012c00 	.word	0x40012c00
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800
 800295c:	40002000 	.word	0x40002000
 8002960:	40014000 	.word	0x40014000
 8002964:	40014400 	.word	0x40014400
 8002968:	40014800 	.word	0x40014800
 800296c:	fffffcff 	.word	0xfffffcff

08002970 <Serial_Init>:
* @param  
*           None.
* @details  This Function configure the CAN Module to a baudrate of 250 kbps and a sample rate of 75%.
*/
void Serial_Init( void )
{
 8002970:	b500      	push	{lr}
 8002972:	b089      	sub	sp, #36	; 0x24
 * @brief  structure for filter configuration 
 */
  FDCAN_FilterTypeDef   CANFilter;
  static CAN_MsgTypeDef Serial_Buffer[23];
  /*Set configuration for can module*/
  CANHandler.Instance                 = FDCAN1;
 8002974:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <Serial_Init+0x114>)
 8002976:	4a44      	ldr	r2, [pc, #272]	; (8002a88 <Serial_Init+0x118>)
 8002978:	601a      	str	r2, [r3, #0]
  CANHandler.Init.Mode                = FDCAN_MODE_NORMAL;
 800297a:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <Serial_Init+0x114>)
 800297c:	2200      	movs	r2, #0
 800297e:	60da      	str	r2, [r3, #12]
  CANHandler.Init.FrameFormat         = FDCAN_FRAME_CLASSIC;
 8002980:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <Serial_Init+0x114>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  CANHandler.Init.ClockDivider        = FDCAN_CLOCK_DIV2;
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <Serial_Init+0x114>)
 8002988:	2201      	movs	r2, #1
 800298a:	605a      	str	r2, [r3, #4]
  CANHandler.Init.TxFifoQueueMode     = FDCAN_TX_FIFO_OPERATION;
 800298c:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <Serial_Init+0x114>)
 800298e:	2200      	movs	r2, #0
 8002990:	63da      	str	r2, [r3, #60]	; 0x3c
  CANHandler.Init.AutoRetransmission  = DISABLE;
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <Serial_Init+0x114>)
 8002994:	2200      	movs	r2, #0
 8002996:	741a      	strb	r2, [r3, #16]
  CANHandler.Init.TransmitPause       = DISABLE;
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <Serial_Init+0x114>)
 800299a:	2200      	movs	r2, #0
 800299c:	745a      	strb	r2, [r3, #17]
  CANHandler.Init.ProtocolException   = DISABLE;
 800299e:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <Serial_Init+0x114>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	749a      	strb	r2, [r3, #18]
  CANHandler.Init.ExtFiltersNbr       = 0;
 80029a4:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <Serial_Init+0x114>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
  CANHandler.Init.StdFiltersNbr       = 1;  
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <Serial_Init+0x114>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	635a      	str	r2, [r3, #52]	; 0x34
  CANHandler.Init.NominalPrescaler    = 4;
 80029b0:	4b34      	ldr	r3, [pc, #208]	; (8002a84 <Serial_Init+0x114>)
 80029b2:	2204      	movs	r2, #4
 80029b4:	615a      	str	r2, [r3, #20]
  CANHandler.Init.NominalSyncJumpWidth = 1;
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <Serial_Init+0x114>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	619a      	str	r2, [r3, #24]
  CANHandler.Init.NominalTimeSeg1     = 11;
 80029bc:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <Serial_Init+0x114>)
 80029be:	220b      	movs	r2, #11
 80029c0:	61da      	str	r2, [r3, #28]
  CANHandler.Init.NominalTimeSeg2     = 4;
 80029c2:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <Serial_Init+0x114>)
 80029c4:	2204      	movs	r2, #4
 80029c6:	621a      	str	r2, [r3, #32]
  /*Apply configuration to CAN Module */
  HAL_FDCAN_Init( &CANHandler );
 80029c8:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <Serial_Init+0x114>)
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7ff f820 	bl	8001a10 <HAL_FDCAN_Init>
  /* Configure reception filter to Rx FIFO 0*/
  CANFilter.IdType = FDCAN_STANDARD_ID;
 80029d0:	ab02      	add	r3, sp, #8
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
  CANFilter.FilterIndex = 0;
 80029d6:	ab02      	add	r3, sp, #8
 80029d8:	2200      	movs	r2, #0
 80029da:	605a      	str	r2, [r3, #4]
  CANFilter.FilterType = FDCAN_FILTER_MASK;
 80029dc:	ab02      	add	r3, sp, #8
 80029de:	2202      	movs	r2, #2
 80029e0:	609a      	str	r2, [r3, #8]
  CANFilter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80029e2:	ab02      	add	r3, sp, #8
 80029e4:	2201      	movs	r2, #1
 80029e6:	60da      	str	r2, [r3, #12]
  CANFilter.FilterID1 = 0x111;
 80029e8:	ab02      	add	r3, sp, #8
 80029ea:	2212      	movs	r2, #18
 80029ec:	32ff      	adds	r2, #255	; 0xff
 80029ee:	611a      	str	r2, [r3, #16]
  CANFilter.FilterID2 = 0x7FF;
 80029f0:	ab02      	add	r3, sp, #8
 80029f2:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <Serial_Init+0x11c>)
 80029f4:	615a      	str	r2, [r3, #20]
  HAL_FDCAN_ConfigFilter( &CANHandler, &CANFilter );
 80029f6:	aa02      	add	r2, sp, #8
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <Serial_Init+0x114>)
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7ff f96b 	bl	8001cd8 <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_ConfigGlobalFilter(&CANHandler, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
 8002a02:	4820      	ldr	r0, [pc, #128]	; (8002a84 <Serial_Init+0x114>)
 8002a04:	2300      	movs	r3, #0
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	f7ff f9be 	bl	8001d8e <HAL_FDCAN_ConfigGlobalFilter>

  /* CAN transmission parameters */
  CANTxHeader.IdType      = FDCAN_STANDARD_ID;
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <Serial_Init+0x120>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	605a      	str	r2, [r3, #4]
  CANTxHeader.FDFormat    = FDCAN_CLASSIC_CAN;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <Serial_Init+0x120>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	619a      	str	r2, [r3, #24]
  CANTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <Serial_Init+0x120>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  CANTxHeader.Identifier  = 0x122;
 8002a24:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <Serial_Init+0x120>)
 8002a26:	2291      	movs	r2, #145	; 0x91
 8002a28:	0052      	lsls	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
  CANTxHeader.DataLength  = FDCAN_DLC_BYTES_8;
 8002a2c:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <Serial_Init+0x120>)
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	0312      	lsls	r2, r2, #12
 8002a32:	60da      	str	r2, [r3, #12]
  
  /* Change FDCAN instance from initialization mode to normal mode */
  HAL_FDCAN_Start( &CANHandler);
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <Serial_Init+0x114>)
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7ff f9d6 	bl	8001de8 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification( &CANHandler, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0 );
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <Serial_Init+0x114>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2101      	movs	r1, #1
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7ff fb16 	bl	8002074 <HAL_FDCAN_ActivateNotification>

  Serial_Queue.Buffer   = (void*)Serial_Buffer; // indicamos el buffer que usara la cola como espacio de memoria
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <Serial_Init+0x124>)
 8002a4a:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <Serial_Init+0x128>)
 8002a4c:	601a      	str	r2, [r3, #0]
  Serial_Queue.Elements = 23u;         // indicamos el numero de elementos maximo que podra alamcenar
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <Serial_Init+0x124>)
 8002a50:	2217      	movs	r2, #23
 8002a52:	605a      	str	r2, [r3, #4]
  Serial_Queue.Size     = sizeof(CAN_MsgTypeDef); // indicamos el tama;o en bytes del tipo de elemntos a manejar
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <Serial_Init+0x124>)
 8002a56:	2208      	movs	r2, #8
 8002a58:	721a      	strb	r2, [r3, #8]
  HIL_QUEUE_Init(&Serial_Queue);
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <Serial_Init+0x124>)
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f003 f877 	bl	8005b50 <HIL_QUEUE_Init>

  Clock_Queue.Buffer = (void*)Clock_Buffer; // indicamos el buffer que usara la cola como espacio de memoria
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <Serial_Init+0x12c>)
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <Serial_Init+0x130>)
 8002a66:	601a      	str	r2, [r3, #0]
  Clock_Queue.Elements = 115u;         // indicamos el numero de elementos maximo que podra alamcenar
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <Serial_Init+0x12c>)
 8002a6a:	2273      	movs	r2, #115	; 0x73
 8002a6c:	605a      	str	r2, [r3, #4]
  Clock_Queue.Size = sizeof( APP_MsgTypeDef ) + 1u; // indicamos el tama;o en bytes del tipo de elemntos a manejar
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <Serial_Init+0x12c>)
 8002a70:	2229      	movs	r2, #41	; 0x29
 8002a72:	721a      	strb	r2, [r3, #8]
  HIL_QUEUE_Init(&Clock_Queue);
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <Serial_Init+0x12c>)
 8002a76:	0018      	movs	r0, r3
 8002a78:	f003 f86a 	bl	8005b50 <HIL_QUEUE_Init>
  
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	b009      	add	sp, #36	; 0x24
 8002a80:	bd00      	pop	{pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	200000f4 	.word	0x200000f4
 8002a88:	40006400 	.word	0x40006400
 8002a8c:	000007ff 	.word	0x000007ff
 8002a90:	20000158 	.word	0x20000158
 8002a94:	200000d8 	.word	0x200000d8
 8002a98:	20000180 	.word	0x20000180
 8002a9c:	20001460 	.word	0x20001460
 8002aa0:	20000268 	.word	0x20000268

08002aa4 <CanTp_SingleFrameTx>:
* the fuction accepts values between 0 and 8, if a different value is introduce, it will apply the default size of 8 bytes 
* @param data Pointer to the payload to send 
* @param size length of the CAN message
*/
static void CanTp_SingleFrameTx( uint8_t *data, uint8_t size )
{
 8002aa4:	b500      	push	{lr}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	9001      	str	r0, [sp, #4]
 8002aaa:	000a      	movs	r2, r1
 8002aac:	466b      	mov	r3, sp
 8002aae:	3303      	adds	r3, #3
 8002ab0:	701a      	strb	r2, [r3, #0]
  data[0] = size;
 8002ab2:	9b01      	ldr	r3, [sp, #4]
 8002ab4:	466a      	mov	r2, sp
 8002ab6:	3203      	adds	r2, #3
 8002ab8:	7812      	ldrb	r2, [r2, #0]
 8002aba:	701a      	strb	r2, [r3, #0]
  HAL_FDCAN_AddMessageToTxFifoQ( &CANHandler, &CANTxHeader, data );
 8002abc:	9a01      	ldr	r2, [sp, #4]
 8002abe:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <CanTp_SingleFrameTx+0x2c>)
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <CanTp_SingleFrameTx+0x30>)
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7ff f9b3 	bl	8001e2e <HAL_FDCAN_AddMessageToTxFifoQ>

}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	b003      	add	sp, #12
 8002acc:	bd00      	pop	{pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	20000158 	.word	0x20000158
 8002ad4:	200000f4 	.word	0x200000f4

08002ad8 <CanTp_SingleFrameRx>:
* @param  data Pointer to store the message 
* @param  size Pointer to store the number of bytes received.
* @return 1 if receive something 0 otherwise 
*/
static uint8_t CanTp_SingleFrameRx( uint8_t *data, uint8_t *size )
{
 8002ad8:	b084      	sub	sp, #16
 8002ada:	9001      	str	r0, [sp, #4]
 8002adc:	9100      	str	r1, [sp, #0]
  uint8_t exit_flag = 0;
 8002ade:	230f      	movs	r3, #15
 8002ae0:	446b      	add	r3, sp
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
  if( (data[0] >= 0u) && (data[0] <= 7u) )
 8002ae6:	9b01      	ldr	r3, [sp, #4]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b07      	cmp	r3, #7
 8002aec:	d808      	bhi.n	8002b00 <CanTp_SingleFrameRx+0x28>
  {  
    *size = data[0];
 8002aee:	9b01      	ldr	r3, [sp, #4]
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	9b00      	ldr	r3, [sp, #0]
 8002af4:	701a      	strb	r2, [r3, #0]
    exit_flag = 1;
 8002af6:	230f      	movs	r3, #15
 8002af8:	446b      	add	r3, sp
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e003      	b.n	8002b08 <CanTp_SingleFrameRx+0x30>
  }
  else
  {
    data[1] = SERIAL_MSG_NONE;
 8002b00:	9b01      	ldr	r3, [sp, #4]
 8002b02:	3301      	adds	r3, #1
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
  }
  return exit_flag;
 8002b08:	230f      	movs	r3, #15
 8002b0a:	446b      	add	r3, sp
 8002b0c:	781b      	ldrb	r3, [r3, #0]
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	b004      	add	sp, #16
 8002b12:	4770      	bx	lr

08002b14 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback( FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs )
{
 8002b14:	b500      	push	{lr}
 8002b16:	b08f      	sub	sp, #60	; 0x3c
 8002b18:	9001      	str	r0, [sp, #4]
 8002b1a:	9100      	str	r1, [sp, #0]
  (void)hfdcan;
  FDCAN_RxHeaderTypeDef CANRxHeader;
  CAN_MsgTypeDef RxData;
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8002b1c:	9b00      	ldr	r3, [sp, #0]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4013      	ands	r3, r2
 8002b22:	d01a      	beq.n	8002b5a <HAL_FDCAN_RxFifo0Callback+0x46>
  {
    HAL_FDCAN_GetRxMessage( hfdcan, FDCAN_RX_FIFO0, &CANRxHeader, RxData );
 8002b24:	ab02      	add	r3, sp, #8
 8002b26:	aa04      	add	r2, sp, #16
 8002b28:	9801      	ldr	r0, [sp, #4]
 8002b2a:	2140      	movs	r1, #64	; 0x40
 8002b2c:	f7ff f9c2 	bl	8001eb4 <HAL_FDCAN_GetRxMessage>
    if(!HIL_QUEUE_IsFull(&Serial_Queue))
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f003 f827 	bl	8005b86 <HIL_QUEUE_IsFull>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d10e      	bne.n	8002b5a <HAL_FDCAN_RxFifo0Callback+0x46>
    {
      if(CanTp_SingleFrameRx( RxData,&bytes_received) == 1u )
 8002b3c:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8002b3e:	ab02      	add	r3, sp, #8
 8002b40:	0011      	movs	r1, r2
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff ffc8 	bl	8002ad8 <CanTp_SingleFrameRx>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d105      	bne.n	8002b5a <HAL_FDCAN_RxFifo0Callback+0x46>
      {
         (void)HIL_QUEUE_WriteISR(&Serial_Queue,RxData,0xff);
 8002b4e:	a902      	add	r1, sp, #8
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002b52:	22ff      	movs	r2, #255	; 0xff
 8002b54:	0018      	movs	r0, r3
 8002b56:	f003 f8b5 	bl	8005cc4 <HIL_QUEUE_WriteISR>
      } 
    }
    
  }
}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	b00f      	add	sp, #60	; 0x3c
 8002b5e:	bd00      	pop	{pc}
 8002b60:	200000d8 	.word	0x200000d8
 8002b64:	2000017c 	.word	0x2000017c

08002b68 <bcd_to_decimal>:
* @brief Private function to convert bcd format number to decimal
* @param x number to convert from bcd to decimal 
* @return return the result of the conversion 
*/
static uint8_t bcd_to_decimal(uint8_t x)
{
 8002b68:	b082      	sub	sp, #8
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	466b      	mov	r3, sp
 8002b6e:	3307      	adds	r3, #7
 8002b70:	701a      	strb	r2, [r3, #0]
    return (x - (6u * (x >> 4u)));
 8002b72:	466b      	mov	r3, sp
 8002b74:	3307      	adds	r3, #7
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	1c1a      	adds	r2, r3, #0
 8002b7e:	1c13      	adds	r3, r2, #0
 8002b80:	18db      	adds	r3, r3, r3
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	18db      	adds	r3, r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	466a      	mov	r2, sp
 8002b8a:	3207      	adds	r2, #7
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	b2db      	uxtb	r3, r3
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	b002      	add	sp, #8
 8002b96:	4770      	bx	lr

08002b98 <date_validation>:

static uint8_t date_validation(int d,int m, int y)
{
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	9003      	str	r0, [sp, #12]
 8002b9e:	9102      	str	r1, [sp, #8]
 8002ba0:	9201      	str	r2, [sp, #4]
   uint8_t daysinmonth[12]={31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8002ba2:	ab04      	add	r3, sp, #16
 8002ba4:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <date_validation+0x68>)
 8002ba6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ba8:	c313      	stmia	r3!, {r0, r1, r4}
   uint8_t exit_flag = 0;
 8002baa:	231f      	movs	r3, #31
 8002bac:	446b      	add	r3, sp
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
   if( (y >= 1900 ) && ( y <= 2100 ))
 8002bb2:	9b01      	ldr	r3, [sp, #4]
 8002bb4:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <date_validation+0x6c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	dd1c      	ble.n	8002bf4 <date_validation+0x5c>
 8002bba:	9b01      	ldr	r3, [sp, #4]
 8002bbc:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <date_validation+0x70>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	dc18      	bgt.n	8002bf4 <date_validation+0x5c>
   {
    // leap year checking, if ok add 29 days to february
    if(leap(y) == 1u)
 8002bc2:	9b01      	ldr	r3, [sp, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f000 fb6f 	bl	80032a8 <leap>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d102      	bne.n	8002bd6 <date_validation+0x3e>
    {
     daysinmonth[1]=29;
 8002bd0:	ab04      	add	r3, sp, #16
 8002bd2:	221d      	movs	r2, #29
 8002bd4:	705a      	strb	r2, [r3, #1]
    }
    // days in month checking
    if (m<13)
 8002bd6:	9b02      	ldr	r3, [sp, #8]
 8002bd8:	2b0c      	cmp	r3, #12
 8002bda:	dc0b      	bgt.n	8002bf4 <date_validation+0x5c>
    {
       if( (uint8_t)d <= daysinmonth[m-1] )
 8002bdc:	9b03      	ldr	r3, [sp, #12]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	9b02      	ldr	r3, [sp, #8]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	a904      	add	r1, sp, #16
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d803      	bhi.n	8002bf4 <date_validation+0x5c>
       {
         exit_flag=1;
 8002bec:	231f      	movs	r3, #31
 8002bee:	446b      	add	r3, sp
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
       }
    }
   }
  return exit_flag;
 8002bf4:	231f      	movs	r3, #31
 8002bf6:	446b      	add	r3, sp
 8002bf8:	781b      	ldrb	r3, [r3, #0]
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	b008      	add	sp, #32
 8002bfe:	bd10      	pop	{r4, pc}
 8002c00:	08006320 	.word	0x08006320
 8002c04:	0000076b 	.word	0x0000076b
 8002c08:	00000834 	.word	0x00000834

08002c0c <Do_Nothing>:

static void Do_Nothing(const uint8_t *RxData)
{
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	9001      	str	r0, [sp, #4]
  (void)RxData;
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	b002      	add	sp, #8
 8002c14:	4770      	bx	lr

08002c16 <Time_Config_IsValid>:
static uint8_t Time_Config_IsValid(const uint8_t *RxData)
{
 8002c16:	b500      	push	{lr}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	9001      	str	r0, [sp, #4]
  uint8_t exit_flag = 0u;
 8002c1c:	230f      	movs	r3, #15
 8002c1e:	446b      	add	r3, sp
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
  if( ( (bcd_to_decimal(RxData[2]) >= 0u) && (bcd_to_decimal(RxData[2]) <= 24u) ) && 
 8002c24:	9b01      	ldr	r3, [sp, #4]
 8002c26:	3302      	adds	r3, #2
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7ff ff9c 	bl	8002b68 <bcd_to_decimal>
 8002c30:	9b01      	ldr	r3, [sp, #4]
 8002c32:	3302      	adds	r3, #2
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7ff ff96 	bl	8002b68 <bcd_to_decimal>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	2b18      	cmp	r3, #24
 8002c40:	d821      	bhi.n	8002c86 <Time_Config_IsValid+0x70>
      ( (bcd_to_decimal(RxData[3]) >= 0u) && (bcd_to_decimal(RxData[3]) <= 59u) ) && 
 8002c42:	9b01      	ldr	r3, [sp, #4]
 8002c44:	3303      	adds	r3, #3
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff ff8d 	bl	8002b68 <bcd_to_decimal>
 8002c4e:	9b01      	ldr	r3, [sp, #4]
 8002c50:	3303      	adds	r3, #3
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff ff87 	bl	8002b68 <bcd_to_decimal>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	2b3b      	cmp	r3, #59	; 0x3b
 8002c5e:	d812      	bhi.n	8002c86 <Time_Config_IsValid+0x70>
      ( (bcd_to_decimal(RxData[4]) >= 0u) && (bcd_to_decimal(RxData[4]) <= 59u) ) ) 
 8002c60:	9b01      	ldr	r3, [sp, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff ff7e 	bl	8002b68 <bcd_to_decimal>
 8002c6c:	9b01      	ldr	r3, [sp, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff ff78 	bl	8002b68 <bcd_to_decimal>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	2b3b      	cmp	r3, #59	; 0x3b
 8002c7c:	d803      	bhi.n	8002c86 <Time_Config_IsValid+0x70>
  {
    exit_flag = 1u;
 8002c7e:	230f      	movs	r3, #15
 8002c80:	446b      	add	r3, sp
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
  }
  return exit_flag;
 8002c86:	230f      	movs	r3, #15
 8002c88:	446b      	add	r3, sp
 8002c8a:	781b      	ldrb	r3, [r3, #0]
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	b005      	add	sp, #20
 8002c90:	bd00      	pop	{pc}
	...

08002c94 <Time_Config>:
static void Time_Config(const uint8_t *RxData)
{
 8002c94:	b500      	push	{lr}
 8002c96:	b091      	sub	sp, #68	; 0x44
 8002c98:	9001      	str	r0, [sp, #4]
  APP_Serial_Events serial_msg;
  APP_MsgTypeDef msg_struct;
  CAN_MsgTypeDef Internal_Event;
  if(Time_Config_IsValid(RxData) == 1u)
 8002c9a:	9b01      	ldr	r3, [sp, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff ffba 	bl	8002c16 <Time_Config_IsValid>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d13c      	bne.n	8002d22 <Time_Config+0x8e>
  {
    
    serial_msg     = SERIAL_MSG_TIME_CONFIG;
 8002ca8:	233f      	movs	r3, #63	; 0x3f
 8002caa:	446b      	add	r3, sp
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
    msg_struct.msg = serial_msg;
 8002cb0:	ab05      	add	r3, sp, #20
 8002cb2:	223f      	movs	r2, #63	; 0x3f
 8002cb4:	446a      	add	r2, sp
 8002cb6:	7812      	ldrb	r2, [r2, #0]
 8002cb8:	701a      	strb	r2, [r3, #0]
    msg_struct.tm.tm_hour = bcd_to_decimal(RxData[2]);
 8002cba:	9b01      	ldr	r3, [sp, #4]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff ff51 	bl	8002b68 <bcd_to_decimal>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	001a      	movs	r2, r3
 8002cca:	ab05      	add	r3, sp, #20
 8002ccc:	60da      	str	r2, [r3, #12]
    msg_struct.tm.tm_min  = bcd_to_decimal(RxData[3]);
 8002cce:	9b01      	ldr	r3, [sp, #4]
 8002cd0:	3303      	adds	r3, #3
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7ff ff47 	bl	8002b68 <bcd_to_decimal>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	001a      	movs	r2, r3
 8002cde:	ab05      	add	r3, sp, #20
 8002ce0:	609a      	str	r2, [r3, #8]
    msg_struct.tm.tm_sec  = bcd_to_decimal(RxData[4]);
 8002ce2:	9b01      	ldr	r3, [sp, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7ff ff3d 	bl	8002b68 <bcd_to_decimal>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	ab05      	add	r3, sp, #20
 8002cf4:	605a      	str	r2, [r3, #4]
    (void)HIL_QUEUE_Write(&Clock_Queue,&msg_struct);
 8002cf6:	aa05      	add	r2, sp, #20
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <Time_Config+0xb4>)
 8002cfa:	0011      	movs	r1, r2
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f002 ff49 	bl	8005b94 <HIL_QUEUE_Write>
    serial_msg = SERIAL_OK_MSG;
 8002d02:	233f      	movs	r3, #63	; 0x3f
 8002d04:	446b      	add	r3, sp
 8002d06:	2204      	movs	r2, #4
 8002d08:	701a      	strb	r2, [r3, #0]
    Internal_Event[1] = serial_msg;
 8002d0a:	ab03      	add	r3, sp, #12
 8002d0c:	223f      	movs	r2, #63	; 0x3f
 8002d0e:	446a      	add	r2, sp
 8002d10:	7812      	ldrb	r2, [r2, #0]
 8002d12:	705a      	strb	r2, [r3, #1]
    (void)HIL_QUEUE_Write(&Serial_Queue,Internal_Event);
 8002d14:	aa03      	add	r2, sp, #12
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <Time_Config+0xb8>)
 8002d18:	0011      	movs	r1, r2
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f002 ff3a 	bl	8005b94 <HIL_QUEUE_Write>
  {
    serial_msg = SERIAL_ERROR_MSG;
    Internal_Event[1] = serial_msg;
    (void)HIL_QUEUE_Write(&Serial_Queue,Internal_Event);
  }
}
 8002d20:	e00e      	b.n	8002d40 <Time_Config+0xac>
    serial_msg = SERIAL_ERROR_MSG;
 8002d22:	233f      	movs	r3, #63	; 0x3f
 8002d24:	446b      	add	r3, sp
 8002d26:	2205      	movs	r2, #5
 8002d28:	701a      	strb	r2, [r3, #0]
    Internal_Event[1] = serial_msg;
 8002d2a:	ab03      	add	r3, sp, #12
 8002d2c:	223f      	movs	r2, #63	; 0x3f
 8002d2e:	446a      	add	r2, sp
 8002d30:	7812      	ldrb	r2, [r2, #0]
 8002d32:	705a      	strb	r2, [r3, #1]
    (void)HIL_QUEUE_Write(&Serial_Queue,Internal_Event);
 8002d34:	aa03      	add	r2, sp, #12
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <Time_Config+0xb8>)
 8002d38:	0011      	movs	r1, r2
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f002 ff2a 	bl	8005b94 <HIL_QUEUE_Write>
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	b011      	add	sp, #68	; 0x44
 8002d44:	bd00      	pop	{pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	20001460 	.word	0x20001460
 8002d4c:	200000d8 	.word	0x200000d8

08002d50 <Date_Config>:

static void Date_Config(const uint8_t *RxData)
{
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	b090      	sub	sp, #64	; 0x40
 8002d54:	9001      	str	r0, [sp, #4]
  APP_Serial_Events serial_msg;
  APP_MsgTypeDef msg_struct;
  CAN_MsgTypeDef Internal_Event;
  if ( date_validation( bcd_to_decimal(RxData[2]), bcd_to_decimal(RxData[3]),
 8002d56:	9b01      	ldr	r3, [sp, #4]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7ff ff03 	bl	8002b68 <bcd_to_decimal>
 8002d62:	0003      	movs	r3, r0
 8002d64:	001d      	movs	r5, r3
 8002d66:	9b01      	ldr	r3, [sp, #4]
 8002d68:	3303      	adds	r3, #3
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7ff fefb 	bl	8002b68 <bcd_to_decimal>
 8002d72:	0003      	movs	r3, r0
 8002d74:	001e      	movs	r6, r3
     ( (bcd_to_decimal(RxData[4]) * 100u ) + bcd_to_decimal(RxData[5]) ) ) == 1u )
 8002d76:	9b01      	ldr	r3, [sp, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7ff fef3 	bl	8002b68 <bcd_to_decimal>
 8002d82:	0003      	movs	r3, r0
 8002d84:	001a      	movs	r2, r3
 8002d86:	2364      	movs	r3, #100	; 0x64
 8002d88:	4353      	muls	r3, r2
 8002d8a:	001c      	movs	r4, r3
 8002d8c:	9b01      	ldr	r3, [sp, #4]
 8002d8e:	3305      	adds	r3, #5
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7ff fee8 	bl	8002b68 <bcd_to_decimal>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	18e3      	adds	r3, r4, r3
  if ( date_validation( bcd_to_decimal(RxData[2]), bcd_to_decimal(RxData[3]),
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	0031      	movs	r1, r6
 8002da0:	0028      	movs	r0, r5
 8002da2:	f7ff fef9 	bl	8002b98 <date_validation>
 8002da6:	0003      	movs	r3, r0
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d146      	bne.n	8002e3a <Date_Config+0xea>
  {
    serial_msg     = SERIAL_MSG_DATE_CONFIG;
 8002dac:	233f      	movs	r3, #63	; 0x3f
 8002dae:	446b      	add	r3, sp
 8002db0:	2202      	movs	r2, #2
 8002db2:	701a      	strb	r2, [r3, #0]
    msg_struct.msg = serial_msg;
 8002db4:	ab05      	add	r3, sp, #20
 8002db6:	223f      	movs	r2, #63	; 0x3f
 8002db8:	446a      	add	r2, sp
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	701a      	strb	r2, [r3, #0]
    msg_struct.tm.tm_mday = bcd_to_decimal(RxData[2]);
 8002dbe:	9b01      	ldr	r3, [sp, #4]
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff fecf 	bl	8002b68 <bcd_to_decimal>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	001a      	movs	r2, r3
 8002dce:	ab05      	add	r3, sp, #20
 8002dd0:	611a      	str	r2, [r3, #16]
    msg_struct.tm.tm_mon  = bcd_to_decimal(RxData[3]);
 8002dd2:	9b01      	ldr	r3, [sp, #4]
 8002dd4:	3303      	adds	r3, #3
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7ff fec5 	bl	8002b68 <bcd_to_decimal>
 8002dde:	0003      	movs	r3, r0
 8002de0:	001a      	movs	r2, r3
 8002de2:	ab05      	add	r3, sp, #20
 8002de4:	615a      	str	r2, [r3, #20]
    msg_struct.tm.tm_year = bcd_to_decimal(RxData[5]);
 8002de6:	9b01      	ldr	r3, [sp, #4]
 8002de8:	3305      	adds	r3, #5
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7ff febb 	bl	8002b68 <bcd_to_decimal>
 8002df2:	0003      	movs	r3, r0
 8002df4:	001a      	movs	r2, r3
 8002df6:	ab05      	add	r3, sp, #20
 8002df8:	619a      	str	r2, [r3, #24]
    date_most_significative_backup = bcd_to_decimal(RxData[4]);
 8002dfa:	9b01      	ldr	r3, [sp, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff feb1 	bl	8002b68 <bcd_to_decimal>
 8002e06:	0003      	movs	r3, r0
 8002e08:	001a      	movs	r2, r3
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <Date_Config+0x110>)
 8002e0c:	701a      	strb	r2, [r3, #0]
    (void)HIL_QUEUE_Write(&Clock_Queue,&msg_struct);
 8002e0e:	aa05      	add	r2, sp, #20
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <Date_Config+0x114>)
 8002e12:	0011      	movs	r1, r2
 8002e14:	0018      	movs	r0, r3
 8002e16:	f002 febd 	bl	8005b94 <HIL_QUEUE_Write>
    serial_msg = SERIAL_OK_MSG;
 8002e1a:	233f      	movs	r3, #63	; 0x3f
 8002e1c:	446b      	add	r3, sp
 8002e1e:	2204      	movs	r2, #4
 8002e20:	701a      	strb	r2, [r3, #0]
    Internal_Event[1] = serial_msg;
 8002e22:	ab03      	add	r3, sp, #12
 8002e24:	223f      	movs	r2, #63	; 0x3f
 8002e26:	446a      	add	r2, sp
 8002e28:	7812      	ldrb	r2, [r2, #0]
 8002e2a:	705a      	strb	r2, [r3, #1]
    (void)HIL_QUEUE_Write(&Serial_Queue,Internal_Event);
 8002e2c:	aa03      	add	r2, sp, #12
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <Date_Config+0x118>)
 8002e30:	0011      	movs	r1, r2
 8002e32:	0018      	movs	r0, r3
 8002e34:	f002 feae 	bl	8005b94 <HIL_QUEUE_Write>
  {
    serial_msg = SERIAL_ERROR_MSG;
    Internal_Event[1] = serial_msg;
    (void)HIL_QUEUE_Write(&Serial_Queue,Internal_Event);
  }
}
 8002e38:	e00e      	b.n	8002e58 <Date_Config+0x108>
    serial_msg = SERIAL_ERROR_MSG;
 8002e3a:	233f      	movs	r3, #63	; 0x3f
 8002e3c:	446b      	add	r3, sp
 8002e3e:	2205      	movs	r2, #5
 8002e40:	701a      	strb	r2, [r3, #0]
    Internal_Event[1] = serial_msg;
 8002e42:	ab03      	add	r3, sp, #12
 8002e44:	223f      	movs	r2, #63	; 0x3f
 8002e46:	446a      	add	r2, sp
 8002e48:	7812      	ldrb	r2, [r2, #0]
 8002e4a:	705a      	strb	r2, [r3, #1]
    (void)HIL_QUEUE_Write(&Serial_Queue,Internal_Event);
 8002e4c:	aa03      	add	r2, sp, #12
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <Date_Config+0x118>)
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f002 fe9e 	bl	8005b94 <HIL_QUEUE_Write>
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	b010      	add	sp, #64	; 0x40
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	2000017d 	.word	0x2000017d
 8002e64:	20001460 	.word	0x20001460
 8002e68:	200000d8 	.word	0x200000d8

08002e6c <Alarm_Config_IsValid>:

static uint8_t Alarm_Config_IsValid (const uint8_t *RxData)
{
 8002e6c:	b500      	push	{lr}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	9001      	str	r0, [sp, #4]
  uint8_t exit_flag = 0;
 8002e72:	230f      	movs	r3, #15
 8002e74:	446b      	add	r3, sp
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
    if( ( (bcd_to_decimal(RxData[2]) >= 0u) && (bcd_to_decimal(RxData[2]) <= 24u) ) && 
 8002e7a:	9b01      	ldr	r3, [sp, #4]
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7ff fe71 	bl	8002b68 <bcd_to_decimal>
 8002e86:	9b01      	ldr	r3, [sp, #4]
 8002e88:	3302      	adds	r3, #2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff fe6b 	bl	8002b68 <bcd_to_decimal>
 8002e92:	0003      	movs	r3, r0
 8002e94:	2b18      	cmp	r3, #24
 8002e96:	d812      	bhi.n	8002ebe <Alarm_Config_IsValid+0x52>
      ( (bcd_to_decimal(RxData[3]) >= 0u) && (bcd_to_decimal(RxData[3]) <= 59u) ) )
 8002e98:	9b01      	ldr	r3, [sp, #4]
 8002e9a:	3303      	adds	r3, #3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7ff fe62 	bl	8002b68 <bcd_to_decimal>
 8002ea4:	9b01      	ldr	r3, [sp, #4]
 8002ea6:	3303      	adds	r3, #3
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7ff fe5c 	bl	8002b68 <bcd_to_decimal>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	2b3b      	cmp	r3, #59	; 0x3b
 8002eb4:	d803      	bhi.n	8002ebe <Alarm_Config_IsValid+0x52>
    {
      exit_flag = 1; 
 8002eb6:	230f      	movs	r3, #15
 8002eb8:	446b      	add	r3, sp
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
    } 
    return exit_flag;
 8002ebe:	230f      	movs	r3, #15
 8002ec0:	446b      	add	r3, sp
 8002ec2:	781b      	ldrb	r3, [r3, #0]
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	b005      	add	sp, #20
 8002ec8:	bd00      	pop	{pc}
	...

08002ecc <Alarm_Config>:
static void Alarm_Config(const uint8_t *RxData)
{
 8002ecc:	b500      	push	{lr}
 8002ece:	b091      	sub	sp, #68	; 0x44
 8002ed0:	9001      	str	r0, [sp, #4]
  APP_Serial_Events serial_msg;
  APP_MsgTypeDef msg_struct;
  CAN_MsgTypeDef Internal_Event;
  if( Alarm_Config_IsValid(RxData) == 1u ) 
 8002ed2:	9b01      	ldr	r3, [sp, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7ff ffc9 	bl	8002e6c <Alarm_Config_IsValid>
 8002eda:	0003      	movs	r3, r0
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d132      	bne.n	8002f46 <Alarm_Config+0x7a>
  {
    serial_msg     = SERIAL_MSG_ALARM_CONFIG;
 8002ee0:	233f      	movs	r3, #63	; 0x3f
 8002ee2:	446b      	add	r3, sp
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	701a      	strb	r2, [r3, #0]
    msg_struct.msg = serial_msg;
 8002ee8:	ab05      	add	r3, sp, #20
 8002eea:	223f      	movs	r2, #63	; 0x3f
 8002eec:	446a      	add	r2, sp
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	701a      	strb	r2, [r3, #0]
    msg_struct.tm.tm_hour = bcd_to_decimal(RxData[2]);
 8002ef2:	9b01      	ldr	r3, [sp, #4]
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff fe35 	bl	8002b68 <bcd_to_decimal>
 8002efe:	0003      	movs	r3, r0
 8002f00:	001a      	movs	r2, r3
 8002f02:	ab05      	add	r3, sp, #20
 8002f04:	60da      	str	r2, [r3, #12]
    msg_struct.tm.tm_min  = bcd_to_decimal(RxData[3]);
 8002f06:	9b01      	ldr	r3, [sp, #4]
 8002f08:	3303      	adds	r3, #3
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7ff fe2b 	bl	8002b68 <bcd_to_decimal>
 8002f12:	0003      	movs	r3, r0
 8002f14:	001a      	movs	r2, r3
 8002f16:	ab05      	add	r3, sp, #20
 8002f18:	609a      	str	r2, [r3, #8]
    (void)HIL_QUEUE_Write(&Clock_Queue,&msg_struct);
 8002f1a:	aa05      	add	r2, sp, #20
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <Alarm_Config+0xa0>)
 8002f1e:	0011      	movs	r1, r2
 8002f20:	0018      	movs	r0, r3
 8002f22:	f002 fe37 	bl	8005b94 <HIL_QUEUE_Write>
    serial_msg = SERIAL_OK_MSG;
 8002f26:	233f      	movs	r3, #63	; 0x3f
 8002f28:	446b      	add	r3, sp
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	701a      	strb	r2, [r3, #0]
    Internal_Event[1] = serial_msg;
 8002f2e:	ab03      	add	r3, sp, #12
 8002f30:	223f      	movs	r2, #63	; 0x3f
 8002f32:	446a      	add	r2, sp
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	705a      	strb	r2, [r3, #1]
    (void)HIL_QUEUE_Write(&Serial_Queue,Internal_Event);
 8002f38:	aa03      	add	r2, sp, #12
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <Alarm_Config+0xa4>)
 8002f3c:	0011      	movs	r1, r2
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f002 fe28 	bl	8005b94 <HIL_QUEUE_Write>
  {
    serial_msg = SERIAL_ERROR_MSG;
    Internal_Event[1] = serial_msg;
    (void)HIL_QUEUE_Write(&Serial_Queue,Internal_Event);
  }
}
 8002f44:	e00e      	b.n	8002f64 <Alarm_Config+0x98>
    serial_msg = SERIAL_ERROR_MSG;
 8002f46:	233f      	movs	r3, #63	; 0x3f
 8002f48:	446b      	add	r3, sp
 8002f4a:	2205      	movs	r2, #5
 8002f4c:	701a      	strb	r2, [r3, #0]
    Internal_Event[1] = serial_msg;
 8002f4e:	ab03      	add	r3, sp, #12
 8002f50:	223f      	movs	r2, #63	; 0x3f
 8002f52:	446a      	add	r2, sp
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	705a      	strb	r2, [r3, #1]
    (void)HIL_QUEUE_Write(&Serial_Queue,Internal_Event);
 8002f58:	aa03      	add	r2, sp, #12
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <Alarm_Config+0xa4>)
 8002f5c:	0011      	movs	r1, r2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f002 fe18 	bl	8005b94 <HIL_QUEUE_Write>
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	b011      	add	sp, #68	; 0x44
 8002f68:	bd00      	pop	{pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	20001460 	.word	0x20001460
 8002f70:	200000d8 	.word	0x200000d8

08002f74 <Ok_Msg_Acknowledge>:

static void Ok_Msg_Acknowledge(const uint8_t *RxData)
{
 8002f74:	b500      	push	{lr}
 8002f76:	b085      	sub	sp, #20
 8002f78:	9001      	str	r0, [sp, #4]
  (void)RxData;
  uint8_t ok_msg[2]={bytes_received,0x55};
 8002f7a:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <Ok_Msg_Acknowledge+0x24>)
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	ab03      	add	r3, sp, #12
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	ab03      	add	r3, sp, #12
 8002f84:	2255      	movs	r2, #85	; 0x55
 8002f86:	705a      	strb	r2, [r3, #1]
  
  CanTp_SingleFrameTx(ok_msg,1);
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7ff fd89 	bl	8002aa4 <CanTp_SingleFrameTx>
}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	b005      	add	sp, #20
 8002f96:	bd00      	pop	{pc}
 8002f98:	2000017c 	.word	0x2000017c

08002f9c <Error_Msg_Acknowledge>:


static void Error_Msg_Acknowledge(const uint8_t *RxData)
{
 8002f9c:	b500      	push	{lr}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	9001      	str	r0, [sp, #4]
  (void)RxData;
  uint8_t err_msg[2]={bytes_received,0xAA};
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <Error_Msg_Acknowledge+0x24>)
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	ab03      	add	r3, sp, #12
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	ab03      	add	r3, sp, #12
 8002fac:	22aa      	movs	r2, #170	; 0xaa
 8002fae:	705a      	strb	r2, [r3, #1]
  CanTp_SingleFrameTx(err_msg,1);
 8002fb0:	ab03      	add	r3, sp, #12
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7ff fd75 	bl	8002aa4 <CanTp_SingleFrameTx>
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	b005      	add	sp, #20
 8002fbe:	bd00      	pop	{pc}
 8002fc0:	2000017c 	.word	0x2000017c

08002fc4 <Serial_Task>:
/**
* @brief This function implements the CAN state machine that proccess and store the information
* for the clock configuration.It manage all the CAN reception,transmission and message validation
*/
void Serial_Task( void )
{ 
 8002fc4:	b500      	push	{lr}
 8002fc6:	b085      	sub	sp, #20
  uint8_t RxData[8];
  uint8_t event = SERIAL_MSG_NONE;
 8002fc8:	230f      	movs	r3, #15
 8002fca:	446b      	add	r3, sp
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
    {SERIAL_MSG_ALARM_CONFIG,Alarm_Config},
    {SERIAL_OK_MSG,Ok_Msg_Acknowledge},
    {SERIAL_ERROR_MSG,Error_Msg_Acknowledge}
  };

  while(!HIL_QUEUE_IsEmptyISR(&Serial_Queue, TIM16_FDCAN_IT0_IRQn))
 8002fd0:	e01d      	b.n	800300e <Serial_Task+0x4a>
  {
   
    if(HIL_QUEUE_Read(&Serial_Queue,RxData) == 1u )
 8002fd2:	aa01      	add	r2, sp, #4
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <Serial_Task+0x60>)
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f002 fe25 	bl	8005c28 <HIL_QUEUE_Read>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d104      	bne.n	8002fee <Serial_Task+0x2a>
    {
      event = RxData[1];        
 8002fe4:	230f      	movs	r3, #15
 8002fe6:	446b      	add	r3, sp
 8002fe8:	aa01      	add	r2, sp, #4
 8002fea:	7852      	ldrb	r2, [r2, #1]
 8002fec:	701a      	strb	r2, [r3, #0]
    }
    if( event < (uint8_t)SERIAL_LAST)
 8002fee:	230f      	movs	r3, #15
 8002ff0:	446b      	add	r3, sp
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d80a      	bhi.n	800300e <Serial_Task+0x4a>
    {
      (*Events_Machine[event].func)(RxData);
 8002ff8:	230f      	movs	r3, #15
 8002ffa:	446b      	add	r3, sp
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <Serial_Task+0x64>)
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	18d3      	adds	r3, r2, r3
 8003004:	3304      	adds	r3, #4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	aa01      	add	r2, sp, #4
 800300a:	0010      	movs	r0, r2
 800300c:	4798      	blx	r3
  while(!HIL_QUEUE_IsEmptyISR(&Serial_Queue, TIM16_FDCAN_IT0_IRQn))
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <Serial_Task+0x60>)
 8003010:	2115      	movs	r1, #21
 8003012:	0018      	movs	r0, r3
 8003014:	f002 fe7b 	bl	8005d0e <HIL_QUEUE_IsEmptyISR>
 8003018:	1e03      	subs	r3, r0, #0
 800301a:	d0da      	beq.n	8002fd2 <Serial_Task+0xe>
    }
    
  }   
     
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	b005      	add	sp, #20
 8003022:	bd00      	pop	{pc}
 8003024:	200000d8 	.word	0x200000d8
 8003028:	0800647c 	.word	0x0800647c

0800302c <HAL_GPIO_EXTI_Falling_Callback>:
static uint8_t BtnPush           = FALSE;
static uint8_t DisplayAlarm_Run  = FALSE;


void HAL_GPIO_EXTI_Falling_Callback( uint16_t GPIO_Pin )
{
 800302c:	b500      	push	{lr}
 800302e:	b08f      	sub	sp, #60	; 0x3c
 8003030:	0002      	movs	r2, r0
 8003032:	466b      	mov	r3, sp
 8003034:	3306      	adds	r3, #6
 8003036:	801a      	strh	r2, [r3, #0]
  APP_MsgTypeDef  msg_struct  = {0};
 8003038:	ab03      	add	r3, sp, #12
 800303a:	0018      	movs	r0, r3
 800303c:	2328      	movs	r3, #40	; 0x28
 800303e:	001a      	movs	r2, r3
 8003040:	2100      	movs	r1, #0
 8003042:	f003 f915 	bl	8006270 <memset>
  Clock_Events_TypeDef   Internal_Event =  CLOCK_MSG_NONE;
 8003046:	2337      	movs	r3, #55	; 0x37
 8003048:	446b      	add	r3, sp
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
  (void)GPIO_Pin;
  BtnPush = TRUE;
 800304e:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <HAL_GPIO_EXTI_Falling_Callback+0x7c>)
 8003050:	2201      	movs	r2, #1
 8003052:	701a      	strb	r2, [r3, #0]
  DisplayAlarm_Run = TRUE;
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
  if( AlarmActive == TRUE )
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d10f      	bne.n	8003082 <HAL_GPIO_EXTI_Falling_Callback+0x56>
  {
    Internal_Event = CLOCK_ALARM_DEACTIVATE;
 8003062:	2337      	movs	r3, #55	; 0x37
 8003064:	446b      	add	r3, sp
 8003066:	2206      	movs	r2, #6
 8003068:	701a      	strb	r2, [r3, #0]
    msg_struct.msg = Internal_Event;
 800306a:	ab03      	add	r3, sp, #12
 800306c:	2237      	movs	r2, #55	; 0x37
 800306e:	446a      	add	r2, sp
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	701a      	strb	r2, [r3, #0]
    (void)HIL_QUEUE_Write(&Clock_Queue,&msg_struct);
 8003074:	aa03      	add	r2, sp, #12
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8003078:	0011      	movs	r1, r2
 800307a:	0018      	movs	r0, r3
 800307c:	f002 fd8a 	bl	8005b94 <HIL_QUEUE_Write>
  {
    Internal_Event = CLOCK_ALARM_DISPLAY;
    msg_struct.msg = Internal_Event;
    (void)HIL_QUEUE_Write(&Clock_Queue,&msg_struct);  
  }
}
 8003080:	e00e      	b.n	80030a0 <HAL_GPIO_EXTI_Falling_Callback+0x74>
    Internal_Event = CLOCK_ALARM_DISPLAY;
 8003082:	2337      	movs	r3, #55	; 0x37
 8003084:	446b      	add	r3, sp
 8003086:	2207      	movs	r2, #7
 8003088:	701a      	strb	r2, [r3, #0]
    msg_struct.msg = Internal_Event;
 800308a:	ab03      	add	r3, sp, #12
 800308c:	2237      	movs	r2, #55	; 0x37
 800308e:	446a      	add	r2, sp
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	701a      	strb	r2, [r3, #0]
    (void)HIL_QUEUE_Write(&Clock_Queue,&msg_struct);  
 8003094:	aa03      	add	r2, sp, #12
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8003098:	0011      	movs	r1, r2
 800309a:	0018      	movs	r0, r3
 800309c:	f002 fd7a 	bl	8005b94 <HIL_QUEUE_Write>
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	b00f      	add	sp, #60	; 0x3c
 80030a4:	bd00      	pop	{pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	2000023a 	.word	0x2000023a
 80030ac:	2000023b 	.word	0x2000023b
 80030b0:	20000239 	.word	0x20000239
 80030b4:	20001460 	.word	0x20001460

080030b8 <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback( uint16_t GPIO_Pin )
{
 80030b8:	b500      	push	{lr}
 80030ba:	b083      	sub	sp, #12
 80030bc:	0002      	movs	r2, r0
 80030be:	466b      	mov	r3, sp
 80030c0:	3306      	adds	r3, #6
 80030c2:	801a      	strh	r2, [r3, #0]
  (void) GPIO_Pin;
  BtnPush = FALSE;
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
  DisplayAlarm_Run = FALSE;
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
  (void)HIL_SCHEDULER_StartTask(&Sche,3);
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 80030d2:	2103      	movs	r1, #3
 80030d4:	0018      	movs	r0, r3
 80030d6:	f002 ff84 	bl	8005fe2 <HIL_SCHEDULER_StartTask>
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	b003      	add	sp, #12
 80030de:	bd00      	pop	{pc}
 80030e0:	2000023a 	.word	0x2000023a
 80030e4:	2000023b 	.word	0x2000023b
 80030e8:	20000028 	.word	0x20000028

080030ec <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *rtc)
{
 80030ec:	b082      	sub	sp, #8
 80030ee:	9001      	str	r0, [sp, #4]
  (void)rtc;
  AlarmActive = TRUE;
 80030f0:	4b02      	ldr	r3, [pc, #8]	; (80030fc <HAL_RTC_AlarmAEventCallback+0x10>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	b002      	add	sp, #8
 80030fa:	4770      	bx	lr
 80030fc:	20000239 	.word	0x20000239

08003100 <Clock_DisplayAlarm>:


static void Clock_DisplayAlarm(APP_Display_MsgTypeDef *msg_struct)
{
 8003100:	b510      	push	{r4, lr}
 8003102:	b08e      	sub	sp, #56	; 0x38
 8003104:	9001      	str	r0, [sp, #4]
  App_Display_Events      Display_Event = DISPLAY_NO_MSG; 
 8003106:	2337      	movs	r3, #55	; 0x37
 8003108:	446b      	add	r3, sp
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
  RTC_AlarmTypeDef        sAlarm        = {0};
 800310e:	ab03      	add	r3, sp, #12
 8003110:	0018      	movs	r0, r3
 8003112:	2328      	movs	r3, #40	; 0x28
 8003114:	001a      	movs	r2, r3
 8003116:	2100      	movs	r1, #0
 8003118:	f003 f8aa 	bl	8006270 <memset>
  HAL_RTC_GetAlarm(&hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	005a      	lsls	r2, r3, #1
 8003120:	a903      	add	r1, sp, #12
 8003122:	481d      	ldr	r0, [pc, #116]	; (8003198 <Clock_DisplayAlarm+0x98>)
 8003124:	2300      	movs	r3, #0
 8003126:	f000 ffbb 	bl	80040a0 <HAL_RTC_GetAlarm>
  msg_struct->sAlarm = sAlarm;
 800312a:	9b01      	ldr	r3, [sp, #4]
 800312c:	aa03      	add	r2, sp, #12
 800312e:	3328      	adds	r3, #40	; 0x28
 8003130:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003132:	c313      	stmia	r3!, {r0, r1, r4}
 8003134:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003136:	c313      	stmia	r3!, {r0, r1, r4}
 8003138:	ca13      	ldmia	r2!, {r0, r1, r4}
 800313a:	c313      	stmia	r3!, {r0, r1, r4}
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	601a      	str	r2, [r3, #0]
  msg_struct->Alarm_set = AlarmSet;
 8003140:	4b16      	ldr	r3, [pc, #88]	; (800319c <Clock_DisplayAlarm+0x9c>)
 8003142:	7819      	ldrb	r1, [r3, #0]
 8003144:	9b01      	ldr	r3, [sp, #4]
 8003146:	2250      	movs	r2, #80	; 0x50
 8003148:	5499      	strb	r1, [r3, r2]
  if(!AlarmSet)
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <Clock_DisplayAlarm+0x9c>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <Clock_DisplayAlarm+0x72>
   {
      Display_Event = DISPLAY_ALARM_NOSET;
 8003152:	2337      	movs	r3, #55	; 0x37
 8003154:	446b      	add	r3, sp
 8003156:	2203      	movs	r2, #3
 8003158:	701a      	strb	r2, [r3, #0]
      msg_struct->msg = Display_Event;
 800315a:	9b01      	ldr	r3, [sp, #4]
 800315c:	2237      	movs	r2, #55	; 0x37
 800315e:	446a      	add	r2, sp
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	701a      	strb	r2, [r3, #0]
      (void)HIL_QUEUE_Write(&Display_Queue,msg_struct);
 8003164:	9a01      	ldr	r2, [sp, #4]
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <Clock_DisplayAlarm+0xa0>)
 8003168:	0011      	movs	r1, r2
 800316a:	0018      	movs	r0, r3
 800316c:	f002 fd12 	bl	8005b94 <HIL_QUEUE_Write>
   {
      Display_Event = DISPLAY_ALARM_SET;
      msg_struct->msg = Display_Event;
      (void)HIL_QUEUE_Write(&Display_Queue,msg_struct);
   }
}
 8003170:	e00e      	b.n	8003190 <Clock_DisplayAlarm+0x90>
      Display_Event = DISPLAY_ALARM_SET;
 8003172:	2337      	movs	r3, #55	; 0x37
 8003174:	446b      	add	r3, sp
 8003176:	2202      	movs	r2, #2
 8003178:	701a      	strb	r2, [r3, #0]
      msg_struct->msg = Display_Event;
 800317a:	9b01      	ldr	r3, [sp, #4]
 800317c:	2237      	movs	r2, #55	; 0x37
 800317e:	446a      	add	r2, sp
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	701a      	strb	r2, [r3, #0]
      (void)HIL_QUEUE_Write(&Display_Queue,msg_struct);
 8003184:	9a01      	ldr	r2, [sp, #4]
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <Clock_DisplayAlarm+0xa0>)
 8003188:	0011      	movs	r1, r2
 800318a:	0018      	movs	r0, r3
 800318c:	f002 fd02 	bl	8005b94 <HIL_QUEUE_Write>
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	b00e      	add	sp, #56	; 0x38
 8003194:	bd10      	pop	{r4, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	2000023c 	.word	0x2000023c
 800319c:	20000238 	.word	0x20000238
 80031a0:	200060cc 	.word	0x200060cc

080031a4 <RunAlarm>:
static void RunAlarm(void)
{
 80031a4:	b500      	push	{lr}
 80031a6:	b08d      	sub	sp, #52	; 0x34
  static uint32_t         i               = 0;
  APP_MsgTypeDef          msg_struct      = {0};
 80031a8:	ab01      	add	r3, sp, #4
 80031aa:	0018      	movs	r0, r3
 80031ac:	2328      	movs	r3, #40	; 0x28
 80031ae:	001a      	movs	r2, r3
 80031b0:	2100      	movs	r1, #0
 80031b2:	f003 f85d 	bl	8006270 <memset>
  Clock_Events_TypeDef    Internal_Event  = SERIAL_MSG_NONE;
 80031b6:	232f      	movs	r3, #47	; 0x2f
 80031b8:	446b      	add	r3, sp
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
  if ( i < ONESECOND ) 
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <RunAlarm+0x60>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b3b      	cmp	r3, #59	; 0x3b
 80031c4:	d80c      	bhi.n	80031e0 <RunAlarm+0x3c>
  {
    HAL_GPIO_TogglePin(GPIOB,BUZZER);
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	01db      	lsls	r3, r3, #7
 80031ca:	4a0f      	ldr	r2, [pc, #60]	; (8003208 <RunAlarm+0x64>)
 80031cc:	0019      	movs	r1, r3
 80031ce:	0010      	movs	r0, r2
 80031d0:	f7fe fbd3 	bl	800197a <HAL_GPIO_TogglePin>
    i++;
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <RunAlarm+0x60>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <RunAlarm+0x60>)
 80031dc:	601a      	str	r2, [r3, #0]
  {
    Internal_Event = CLOCK_ALARM_DEACTIVATE;
    msg_struct.msg = Internal_Event;
    (void)HIL_QUEUE_Write(&Clock_Queue,&msg_struct);
  }
}
 80031de:	e00e      	b.n	80031fe <RunAlarm+0x5a>
    Internal_Event = CLOCK_ALARM_DEACTIVATE;
 80031e0:	232f      	movs	r3, #47	; 0x2f
 80031e2:	446b      	add	r3, sp
 80031e4:	2206      	movs	r2, #6
 80031e6:	701a      	strb	r2, [r3, #0]
    msg_struct.msg = Internal_Event;
 80031e8:	ab01      	add	r3, sp, #4
 80031ea:	222f      	movs	r2, #47	; 0x2f
 80031ec:	446a      	add	r2, sp
 80031ee:	7812      	ldrb	r2, [r2, #0]
 80031f0:	701a      	strb	r2, [r3, #0]
    (void)HIL_QUEUE_Write(&Clock_Queue,&msg_struct);
 80031f2:	aa01      	add	r2, sp, #4
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <RunAlarm+0x68>)
 80031f6:	0011      	movs	r1, r2
 80031f8:	0018      	movs	r0, r3
 80031fa:	f002 fccb 	bl	8005b94 <HIL_QUEUE_Write>
}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	b00d      	add	sp, #52	; 0x34
 8003202:	bd00      	pop	{pc}
 8003204:	2000147c 	.word	0x2000147c
 8003208:	50000400 	.word	0x50000400
 800320c:	20001460 	.word	0x20001460

08003210 <One_Secon_TimerCallback>:

void One_Secon_TimerCallback(void)
{
 8003210:	b500      	push	{lr}
 8003212:	b08d      	sub	sp, #52	; 0x34
  APP_MsgTypeDef  msg_struct  = {0};
 8003214:	ab01      	add	r3, sp, #4
 8003216:	0018      	movs	r0, r3
 8003218:	2328      	movs	r3, #40	; 0x28
 800321a:	001a      	movs	r2, r3
 800321c:	2100      	movs	r1, #0
 800321e:	f003 f827 	bl	8006270 <memset>
  Clock_Events_TypeDef    Internal_Event =  CLOCK_MSG_NONE;
 8003222:	232f      	movs	r3, #47	; 0x2f
 8003224:	446b      	add	r3, sp
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
  
    if(!AlarmActive && !BtnPush )
 800322a:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <One_Secon_TimerCallback+0x84>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d112      	bne.n	8003258 <One_Secon_TimerCallback+0x48>
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <One_Secon_TimerCallback+0x88>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10e      	bne.n	8003258 <One_Secon_TimerCallback+0x48>
    {
      Internal_Event = CLOCK_DISPLAY;
 800323a:	232f      	movs	r3, #47	; 0x2f
 800323c:	446b      	add	r3, sp
 800323e:	2204      	movs	r2, #4
 8003240:	701a      	strb	r2, [r3, #0]
      msg_struct.msg = Internal_Event;
 8003242:	ab01      	add	r3, sp, #4
 8003244:	222f      	movs	r2, #47	; 0x2f
 8003246:	446a      	add	r2, sp
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	701a      	strb	r2, [r3, #0]
      (void)HIL_QUEUE_Write(&Clock_Queue,&msg_struct);
 800324c:	aa01      	add	r2, sp, #4
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <One_Secon_TimerCallback+0x8c>)
 8003250:	0011      	movs	r1, r2
 8003252:	0018      	movs	r0, r3
 8003254:	f002 fc9e 	bl	8005b94 <HIL_QUEUE_Write>
    }
    if( AlarmActive == TRUE )
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <One_Secon_TimerCallback+0x84>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10e      	bne.n	800327e <One_Secon_TimerCallback+0x6e>
    {
      Internal_Event = CLOCK_ALARM_ACTIVATE;
 8003260:	232f      	movs	r3, #47	; 0x2f
 8003262:	446b      	add	r3, sp
 8003264:	2205      	movs	r2, #5
 8003266:	701a      	strb	r2, [r3, #0]
      msg_struct.msg = Internal_Event;
 8003268:	ab01      	add	r3, sp, #4
 800326a:	222f      	movs	r2, #47	; 0x2f
 800326c:	446a      	add	r2, sp
 800326e:	7812      	ldrb	r2, [r2, #0]
 8003270:	701a      	strb	r2, [r3, #0]
      (void)HIL_QUEUE_Write(&Clock_Queue,&msg_struct);      
 8003272:	aa01      	add	r2, sp, #4
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <One_Secon_TimerCallback+0x8c>)
 8003276:	0011      	movs	r1, r2
 8003278:	0018      	movs	r0, r3
 800327a:	f002 fc8b 	bl	8005b94 <HIL_QUEUE_Write>
    }
    (void)HIL_SCHEDULER_StartTimer(&Sche,TimerId); 
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <One_Secon_TimerCallback+0x90>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <One_Secon_TimerCallback+0x94>)
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f002 fd9a 	bl	8005dc0 <HIL_SCHEDULER_StartTimer>
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	b00d      	add	sp, #52	; 0x34
 8003290:	bd00      	pop	{pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	20000239 	.word	0x20000239
 8003298:	2000023a 	.word	0x2000023a
 800329c:	20001460 	.word	0x20001460
 80032a0:	20000044 	.word	0x20000044
 80032a4:	20000028 	.word	0x20000028

080032a8 <leap>:
*/
RTC_HandleTypeDef hrtc;
APP_MsgTypeDef Clock_Buffer[115];
QUEUE_HandleTypeDef   Clock_Queue; 
uint8_t  leap(uint32_t year)
{
 80032a8:	b500      	push	{lr}
 80032aa:	b083      	sub	sp, #12
 80032ac:	9001      	str	r0, [sp, #4]
    return ( ( ( (year % 4u ) == 0u ) && ( (year % 100u ) != 0u ) ) || ( (year % 400u) == 0u ) );
 80032ae:	9b01      	ldr	r3, [sp, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	4013      	ands	r3, r2
 80032b4:	d106      	bne.n	80032c4 <leap+0x1c>
 80032b6:	9b01      	ldr	r3, [sp, #4]
 80032b8:	2164      	movs	r1, #100	; 0x64
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7fc ff3a 	bl	8000134 <__aeabi_uidivmod>
 80032c0:	1e0b      	subs	r3, r1, #0
 80032c2:	d107      	bne.n	80032d4 <leap+0x2c>
 80032c4:	9b01      	ldr	r3, [sp, #4]
 80032c6:	22c8      	movs	r2, #200	; 0xc8
 80032c8:	0051      	lsls	r1, r2, #1
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7fc ff32 	bl	8000134 <__aeabi_uidivmod>
 80032d0:	1e0b      	subs	r3, r1, #0
 80032d2:	d101      	bne.n	80032d8 <leap+0x30>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <leap+0x32>
 80032d8:	2300      	movs	r3, #0
 80032da:	b2db      	uxtb	r3, r3
}
 80032dc:	0018      	movs	r0, r3
 80032de:	b003      	add	sp, #12
 80032e0:	bd00      	pop	{pc}

080032e2 <zeller>:
* to the Gregorian calendar that occured in the 16th century. This
* algorithm is loosely based on a function known as "Zeller's Congruence".
* This number MOD 7 gives the day of week, where 0 = Monday and 6 = Sunday.
*/
static int zeller (int year, int month, int day)
{
 80032e2:	b510      	push	{r4, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	9003      	str	r0, [sp, #12]
 80032e8:	9102      	str	r1, [sp, #8]
 80032ea:	9201      	str	r2, [sp, #4]
  int yearMod   = year;
 80032ec:	9b03      	ldr	r3, [sp, #12]
 80032ee:	9305      	str	r3, [sp, #20]
  int monthMod = month;
 80032f0:	9b02      	ldr	r3, [sp, #8]
 80032f2:	9304      	str	r3, [sp, #16]
  yearMod += ((month + 9 ) / 12 ) - 1;
 80032f4:	9b02      	ldr	r3, [sp, #8]
 80032f6:	3309      	adds	r3, #9
 80032f8:	210c      	movs	r1, #12
 80032fa:	0018      	movs	r0, r3
 80032fc:	f7fc ff24 	bl	8000148 <__divsi3>
 8003300:	0003      	movs	r3, r0
 8003302:	3b01      	subs	r3, #1
 8003304:	9a05      	ldr	r2, [sp, #20]
 8003306:	18d3      	adds	r3, r2, r3
 8003308:	9305      	str	r3, [sp, #20]
  monthMod = (month + 9 ) % 12;
 800330a:	9b02      	ldr	r3, [sp, #8]
 800330c:	3309      	adds	r3, #9
 800330e:	210c      	movs	r1, #12
 8003310:	0018      	movs	r0, r3
 8003312:	f7fc ff63 	bl	80001dc <__aeabi_idivmod>
 8003316:	000b      	movs	r3, r1
 8003318:	9304      	str	r3, [sp, #16]
  return (int)leap (yearMod) + (monthMod * 30 ) + ( ( ( 6 * monthMod) + 5 ) / 10 ) + day;
 800331a:	9b05      	ldr	r3, [sp, #20]
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff ffc3 	bl	80032a8 <leap>
 8003322:	0003      	movs	r3, r0
 8003324:	0019      	movs	r1, r3
 8003326:	9a04      	ldr	r2, [sp, #16]
 8003328:	0013      	movs	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	18cc      	adds	r4, r1, r3
 8003332:	9a04      	ldr	r2, [sp, #16]
 8003334:	0013      	movs	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	189b      	adds	r3, r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	3305      	adds	r3, #5
 800333e:	210a      	movs	r1, #10
 8003340:	0018      	movs	r0, r3
 8003342:	f7fc ff01 	bl	8000148 <__divsi3>
 8003346:	0003      	movs	r3, r0
 8003348:	18e2      	adds	r2, r4, r3
 800334a:	9b01      	ldr	r3, [sp, #4]
 800334c:	18d3      	adds	r3, r2, r3
}
 800334e:	0018      	movs	r0, r3
 8003350:	b006      	add	sp, #24
 8003352:	bd10      	pop	{r4, pc}

08003354 <Day_Of_Week>:
  
static int Day_Of_Week (int year, int month, int day)
{
 8003354:	b500      	push	{lr}
 8003356:	b085      	sub	sp, #20
 8003358:	9003      	str	r0, [sp, #12]
 800335a:	9102      	str	r1, [sp, #8]
 800335c:	9201      	str	r2, [sp, #4]
  return (zeller (year, month, day) % 7 ) + 1;
 800335e:	9a01      	ldr	r2, [sp, #4]
 8003360:	9902      	ldr	r1, [sp, #8]
 8003362:	9b03      	ldr	r3, [sp, #12]
 8003364:	0018      	movs	r0, r3
 8003366:	f7ff ffbc 	bl	80032e2 <zeller>
 800336a:	0003      	movs	r3, r0
 800336c:	2107      	movs	r1, #7
 800336e:	0018      	movs	r0, r3
 8003370:	f7fc ff34 	bl	80001dc <__aeabi_idivmod>
 8003374:	000b      	movs	r3, r1
 8003376:	3301      	adds	r3, #1
}
 8003378:	0018      	movs	r0, r3
 800337a:	b005      	add	sp, #20
 800337c:	bd00      	pop	{pc}

0800337e <Clock_Do_Nothing>:

static void Clock_Do_Nothing(APP_Display_MsgTypeDef *msg_struct)
{
 800337e:	b082      	sub	sp, #8
 8003380:	9001      	str	r0, [sp, #4]
  (void)msg_struct;
}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	b002      	add	sp, #8
 8003386:	4770      	bx	lr

08003388 <Clock_Display_Func>:
static void Clock_Display_Func(APP_Display_MsgTypeDef *msg_struct)
{
 8003388:	b500      	push	{lr}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	9001      	str	r0, [sp, #4]
  RTC_TimeTypeDef       sTime           = {0};
 800338e:	ab03      	add	r3, sp, #12
 8003390:	0018      	movs	r0, r3
 8003392:	2314      	movs	r3, #20
 8003394:	001a      	movs	r2, r3
 8003396:	2100      	movs	r1, #0
 8003398:	f002 ff6a 	bl	8006270 <memset>
  RTC_DateTypeDef       sDate = {0};
 800339c:	ab02      	add	r3, sp, #8
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_0);
  msg_struct->Alarm_set = AlarmSet;
 80033a2:	4b24      	ldr	r3, [pc, #144]	; (8003434 <Clock_Display_Func+0xac>)
 80033a4:	7819      	ldrb	r1, [r3, #0]
 80033a6:	9b01      	ldr	r3, [sp, #4]
 80033a8:	2250      	movs	r2, #80	; 0x50
 80033aa:	5499      	strb	r1, [r3, r2]
  HAL_RTC_GetTime( &hrtc, &sTime, RTC_FORMAT_BIN);
 80033ac:	a903      	add	r1, sp, #12
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <Clock_Display_Func+0xb0>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 fb60 	bl	8003a78 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate( &hrtc, &sDate, RTC_FORMAT_BIN );
 80033b8:	a902      	add	r1, sp, #8
 80033ba:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <Clock_Display_Func+0xb0>)
 80033bc:	2200      	movs	r2, #0
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 fc46 	bl	8003c50 <HAL_RTC_GetDate>
  HAL_RTC_GetAlarm(&hrtc, &(msg_struct->sAlarm),RTC_ALARM_A, RTC_FORMAT_BIN);
 80033c4:	9b01      	ldr	r3, [sp, #4]
 80033c6:	3328      	adds	r3, #40	; 0x28
 80033c8:	0019      	movs	r1, r3
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	005a      	lsls	r2, r3, #1
 80033ce:	481a      	ldr	r0, [pc, #104]	; (8003438 <Clock_Display_Func+0xb0>)
 80033d0:	2300      	movs	r3, #0
 80033d2:	f000 fe65 	bl	80040a0 <HAL_RTC_GetAlarm>
  msg_struct->tm.tm_hour = sTime.Hours;
 80033d6:	ab03      	add	r3, sp, #12
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	001a      	movs	r2, r3
 80033dc:	9b01      	ldr	r3, [sp, #4]
 80033de:	60da      	str	r2, [r3, #12]
  msg_struct->tm.tm_min  = sTime.Minutes;
 80033e0:	ab03      	add	r3, sp, #12
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	001a      	movs	r2, r3
 80033e6:	9b01      	ldr	r3, [sp, #4]
 80033e8:	609a      	str	r2, [r3, #8]
  msg_struct->tm.tm_sec  = sTime.Seconds;
 80033ea:	ab03      	add	r3, sp, #12
 80033ec:	789b      	ldrb	r3, [r3, #2]
 80033ee:	001a      	movs	r2, r3
 80033f0:	9b01      	ldr	r3, [sp, #4]
 80033f2:	605a      	str	r2, [r3, #4]
  msg_struct->tm.tm_mday = sDate.Date;
 80033f4:	ab02      	add	r3, sp, #8
 80033f6:	789b      	ldrb	r3, [r3, #2]
 80033f8:	001a      	movs	r2, r3
 80033fa:	9b01      	ldr	r3, [sp, #4]
 80033fc:	611a      	str	r2, [r3, #16]
  msg_struct->tm.tm_mon  = sDate.Month;
 80033fe:	ab02      	add	r3, sp, #8
 8003400:	785b      	ldrb	r3, [r3, #1]
 8003402:	001a      	movs	r2, r3
 8003404:	9b01      	ldr	r3, [sp, #4]
 8003406:	615a      	str	r2, [r3, #20]
  msg_struct->tm.tm_year = sDate.Year;
 8003408:	ab02      	add	r3, sp, #8
 800340a:	78db      	ldrb	r3, [r3, #3]
 800340c:	001a      	movs	r2, r3
 800340e:	9b01      	ldr	r3, [sp, #4]
 8003410:	619a      	str	r2, [r3, #24]
  msg_struct->tm.tm_wday = sDate.WeekDay;
 8003412:	ab02      	add	r3, sp, #8
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	001a      	movs	r2, r3
 8003418:	9b01      	ldr	r3, [sp, #4]
 800341a:	61da      	str	r2, [r3, #28]
  msg_struct->msg        = DISPLAY_TIMESTR_PROCESSING;
 800341c:	9b01      	ldr	r3, [sp, #4]
 800341e:	2204      	movs	r2, #4
 8003420:	701a      	strb	r2, [r3, #0]
  (void)HIL_QUEUE_Write(&Display_Queue,msg_struct);
 8003422:	9a01      	ldr	r2, [sp, #4]
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <Clock_Display_Func+0xb4>)
 8003426:	0011      	movs	r1, r2
 8003428:	0018      	movs	r0, r3
 800342a:	f002 fbb3 	bl	8005b94 <HIL_QUEUE_Write>
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	b009      	add	sp, #36	; 0x24
 8003432:	bd00      	pop	{pc}
 8003434:	20000238 	.word	0x20000238
 8003438:	2000023c 	.word	0x2000023c
 800343c:	200060cc 	.word	0x200060cc

08003440 <Clock_Time_Config>:

static void Clock_Time_Config(APP_Display_MsgTypeDef *msg_struct)
{
 8003440:	b500      	push	{lr}
 8003442:	b089      	sub	sp, #36	; 0x24
 8003444:	9001      	str	r0, [sp, #4]
  Clock_Events_TypeDef  Internal_Event;
  RTC_TimeTypeDef       sTime           = {0};
 8003446:	ab02      	add	r3, sp, #8
 8003448:	0018      	movs	r0, r3
 800344a:	2314      	movs	r3, #20
 800344c:	001a      	movs	r2, r3
 800344e:	2100      	movs	r1, #0
 8003450:	f002 ff0e 	bl	8006270 <memset>
  sTime.Hours   = msg_struct->tm.tm_hour;
 8003454:	9b01      	ldr	r3, [sp, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	ab02      	add	r3, sp, #8
 800345c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = msg_struct->tm.tm_min;
 800345e:	9b01      	ldr	r3, [sp, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	ab02      	add	r3, sp, #8
 8003466:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = msg_struct->tm.tm_sec;
 8003468:	9b01      	ldr	r3, [sp, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	ab02      	add	r3, sp, #8
 8003470:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x00;
 8003472:	ab02      	add	r3, sp, #8
 8003474:	2200      	movs	r2, #0
 8003476:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003478:	ab02      	add	r3, sp, #8
 800347a:	2200      	movs	r2, #0
 800347c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800347e:	ab02      	add	r3, sp, #8
 8003480:	2200      	movs	r2, #0
 8003482:	611a      	str	r2, [r3, #16]
  HAL_RTC_SetTime( &hrtc, &sTime, RTC_FORMAT_BIN);
 8003484:	a902      	add	r1, sp, #8
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <Clock_Time_Config+0xb4>)
 8003488:	2200      	movs	r2, #0
 800348a:	0018      	movs	r0, r3
 800348c:	f000 fa4c 	bl	8003928 <HAL_RTC_SetTime>
  if(AlarmActive == TRUE)
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <Clock_Time_Config+0xb8>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d114      	bne.n	80034c2 <Clock_Time_Config+0x82>
  {
    (void)memset(msg_struct,0,sizeof(msg_struct));
 8003498:	9b01      	ldr	r3, [sp, #4]
 800349a:	2204      	movs	r2, #4
 800349c:	2100      	movs	r1, #0
 800349e:	0018      	movs	r0, r3
 80034a0:	f002 fee6 	bl	8006270 <memset>
    Internal_Event  = CLOCK_ALARM_DEACTIVATE;
 80034a4:	231f      	movs	r3, #31
 80034a6:	446b      	add	r3, sp
 80034a8:	2206      	movs	r2, #6
 80034aa:	701a      	strb	r2, [r3, #0]
    msg_struct->msg = Internal_Event;
 80034ac:	9b01      	ldr	r3, [sp, #4]
 80034ae:	221f      	movs	r2, #31
 80034b0:	446a      	add	r2, sp
 80034b2:	7812      	ldrb	r2, [r2, #0]
 80034b4:	701a      	strb	r2, [r3, #0]
    (void)HIL_QUEUE_Write(&Clock_Queue,msg_struct);
 80034b6:	9a01      	ldr	r2, [sp, #4]
 80034b8:	4b10      	ldr	r3, [pc, #64]	; (80034fc <Clock_Time_Config+0xbc>)
 80034ba:	0011      	movs	r1, r2
 80034bc:	0018      	movs	r0, r3
 80034be:	f002 fb69 	bl	8005b94 <HIL_QUEUE_Write>
  }
  (void)memset(msg_struct,0,sizeof (msg_struct));
 80034c2:	9b01      	ldr	r3, [sp, #4]
 80034c4:	2204      	movs	r2, #4
 80034c6:	2100      	movs	r1, #0
 80034c8:	0018      	movs	r0, r3
 80034ca:	f002 fed1 	bl	8006270 <memset>
  Internal_Event  = CLOCK_DISPLAY;
 80034ce:	231f      	movs	r3, #31
 80034d0:	446b      	add	r3, sp
 80034d2:	2204      	movs	r2, #4
 80034d4:	701a      	strb	r2, [r3, #0]
  msg_struct->msg = Internal_Event;
 80034d6:	9b01      	ldr	r3, [sp, #4]
 80034d8:	221f      	movs	r2, #31
 80034da:	446a      	add	r2, sp
 80034dc:	7812      	ldrb	r2, [r2, #0]
 80034de:	701a      	strb	r2, [r3, #0]
  (void)HIL_QUEUE_Write(&Clock_Queue,msg_struct);
 80034e0:	9a01      	ldr	r2, [sp, #4]
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <Clock_Time_Config+0xbc>)
 80034e4:	0011      	movs	r1, r2
 80034e6:	0018      	movs	r0, r3
 80034e8:	f002 fb54 	bl	8005b94 <HIL_QUEUE_Write>
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	b009      	add	sp, #36	; 0x24
 80034f0:	bd00      	pop	{pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	2000023c 	.word	0x2000023c
 80034f8:	20000239 	.word	0x20000239
 80034fc:	20001460 	.word	0x20001460

08003500 <Clock_Date_Config>:

static void Clock_Date_Config(APP_Display_MsgTypeDef *msg_struct)
{
 8003500:	b500      	push	{lr}
 8003502:	b085      	sub	sp, #20
 8003504:	9001      	str	r0, [sp, #4]
  Clock_Events_TypeDef  Internal_Event;
  RTC_DateTypeDef sDate = {0};
 8003506:	ab02      	add	r3, sp, #8
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
  sDate.Month   = msg_struct->tm.tm_mon;
 800350c:	9b01      	ldr	r3, [sp, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	ab02      	add	r3, sp, #8
 8003514:	705a      	strb	r2, [r3, #1]
  sDate.Date    = msg_struct->tm.tm_mday;
 8003516:	9b01      	ldr	r3, [sp, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	ab02      	add	r3, sp, #8
 800351e:	709a      	strb	r2, [r3, #2]
  sDate.Year    = msg_struct->tm.tm_year ; 
 8003520:	9b01      	ldr	r3, [sp, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	ab02      	add	r3, sp, #8
 8003528:	70da      	strb	r2, [r3, #3]
  sDate.WeekDay = Day_Of_Week(msg_struct->tm.tm_year,msg_struct->tm.tm_mon,msg_struct->tm.tm_mday);
 800352a:	9b01      	ldr	r3, [sp, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	0018      	movs	r0, r3
 8003530:	9b01      	ldr	r3, [sp, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	0019      	movs	r1, r3
 8003536:	9b01      	ldr	r3, [sp, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	001a      	movs	r2, r3
 800353c:	f7ff ff0a 	bl	8003354 <Day_Of_Week>
 8003540:	0003      	movs	r3, r0
 8003542:	b2da      	uxtb	r2, r3
 8003544:	ab02      	add	r3, sp, #8
 8003546:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate( &hrtc, &sDate, RTC_FORMAT_BIN );
 8003548:	a902      	add	r1, sp, #8
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <Clock_Date_Config+0xb8>)
 800354c:	2200      	movs	r2, #0
 800354e:	0018      	movs	r0, r3
 8003550:	f000 faec 	bl	8003b2c <HAL_RTC_SetDate>
   if(AlarmActive == TRUE)
 8003554:	4b19      	ldr	r3, [pc, #100]	; (80035bc <Clock_Date_Config+0xbc>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d114      	bne.n	8003586 <Clock_Date_Config+0x86>
  {
    (void)memset(msg_struct,0,sizeof(msg_struct));
 800355c:	9b01      	ldr	r3, [sp, #4]
 800355e:	2204      	movs	r2, #4
 8003560:	2100      	movs	r1, #0
 8003562:	0018      	movs	r0, r3
 8003564:	f002 fe84 	bl	8006270 <memset>
    Internal_Event =  CLOCK_ALARM_DEACTIVATE;
 8003568:	230f      	movs	r3, #15
 800356a:	446b      	add	r3, sp
 800356c:	2206      	movs	r2, #6
 800356e:	701a      	strb	r2, [r3, #0]
    msg_struct->msg = Internal_Event;
 8003570:	9b01      	ldr	r3, [sp, #4]
 8003572:	220f      	movs	r2, #15
 8003574:	446a      	add	r2, sp
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	701a      	strb	r2, [r3, #0]
    (void)HIL_QUEUE_Write(&Clock_Queue,msg_struct);
 800357a:	9a01      	ldr	r2, [sp, #4]
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <Clock_Date_Config+0xc0>)
 800357e:	0011      	movs	r1, r2
 8003580:	0018      	movs	r0, r3
 8003582:	f002 fb07 	bl	8005b94 <HIL_QUEUE_Write>
  }
  (void)memset(msg_struct,0,sizeof(msg_struct));
 8003586:	9b01      	ldr	r3, [sp, #4]
 8003588:	2204      	movs	r2, #4
 800358a:	2100      	movs	r1, #0
 800358c:	0018      	movs	r0, r3
 800358e:	f002 fe6f 	bl	8006270 <memset>
  Internal_Event  = CLOCK_DISPLAY;
 8003592:	230f      	movs	r3, #15
 8003594:	446b      	add	r3, sp
 8003596:	2204      	movs	r2, #4
 8003598:	701a      	strb	r2, [r3, #0]
  msg_struct->msg = Internal_Event;
 800359a:	9b01      	ldr	r3, [sp, #4]
 800359c:	220f      	movs	r2, #15
 800359e:	446a      	add	r2, sp
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	701a      	strb	r2, [r3, #0]
  (void)HIL_QUEUE_Write(&Clock_Queue,msg_struct);
 80035a4:	9a01      	ldr	r2, [sp, #4]
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <Clock_Date_Config+0xc0>)
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f002 faf2 	bl	8005b94 <HIL_QUEUE_Write>
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	b005      	add	sp, #20
 80035b4:	bd00      	pop	{pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	2000023c 	.word	0x2000023c
 80035bc:	20000239 	.word	0x20000239
 80035c0:	20001460 	.word	0x20001460

080035c4 <Clock_Alarm_Config>:
static void Clock_Alarm_Config(APP_Display_MsgTypeDef *msg_struct)
{
 80035c4:	b500      	push	{lr}
 80035c6:	b085      	sub	sp, #20
 80035c8:	9001      	str	r0, [sp, #4]
  Clock_Events_TypeDef  Internal_Event;
  AlarmSet = (~AlarmSet) & 0x01;
 80035ca:	4b2c      	ldr	r3, [pc, #176]	; (800367c <Clock_Alarm_Config+0xb8>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	001a      	movs	r2, r3
 80035d0:	2301      	movs	r3, #1
 80035d2:	4013      	ands	r3, r2
 80035d4:	425a      	negs	r2, r3
 80035d6:	4153      	adcs	r3, r2
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	001a      	movs	r2, r3
 80035dc:	4b27      	ldr	r3, [pc, #156]	; (800367c <Clock_Alarm_Config+0xb8>)
 80035de:	701a      	strb	r2, [r3, #0]
  msg_struct->Alarm_set = AlarmSet;
 80035e0:	4b26      	ldr	r3, [pc, #152]	; (800367c <Clock_Alarm_Config+0xb8>)
 80035e2:	7819      	ldrb	r1, [r3, #0]
 80035e4:	9b01      	ldr	r3, [sp, #4]
 80035e6:	2250      	movs	r2, #80	; 0x50
 80035e8:	5499      	strb	r1, [r3, r2]
  msg_struct->sAlarm.AlarmTime.Hours    = msg_struct->tm.tm_hour;
 80035ea:	9b01      	ldr	r3, [sp, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	b2d9      	uxtb	r1, r3
 80035f0:	9b01      	ldr	r3, [sp, #4]
 80035f2:	2228      	movs	r2, #40	; 0x28
 80035f4:	5499      	strb	r1, [r3, r2]
  msg_struct->sAlarm.AlarmTime.Minutes  = msg_struct->tm.tm_min;
 80035f6:	9b01      	ldr	r3, [sp, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	b2d9      	uxtb	r1, r3
 80035fc:	9b01      	ldr	r3, [sp, #4]
 80035fe:	2229      	movs	r2, #41	; 0x29
 8003600:	5499      	strb	r1, [r3, r2]
  msg_struct->sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT_24;
 8003602:	9b01      	ldr	r3, [sp, #4]
 8003604:	222b      	movs	r2, #43	; 0x2b
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]
  msg_struct->sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800360a:	9b01      	ldr	r3, [sp, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	635a      	str	r2, [r3, #52]	; 0x34
  msg_struct->sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003610:	9b01      	ldr	r3, [sp, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	639a      	str	r2, [r3, #56]	; 0x38
  msg_struct->sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS | RTC_ALARMMASK_DATEWEEKDAY;
 8003616:	9b01      	ldr	r3, [sp, #4]
 8003618:	4a19      	ldr	r2, [pc, #100]	; (8003680 <Clock_Alarm_Config+0xbc>)
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c
  msg_struct->sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800361c:	9b01      	ldr	r3, [sp, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
  msg_struct->sAlarm.AlarmDateWeekDay = 1;
 8003622:	9b01      	ldr	r3, [sp, #4]
 8003624:	2248      	movs	r2, #72	; 0x48
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]
  msg_struct->sAlarm.Alarm = RTC_ALARM_A;
 800362a:	9b01      	ldr	r3, [sp, #4]
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	0052      	lsls	r2, r2, #1
 8003630:	64da      	str	r2, [r3, #76]	; 0x4c
  if( AlarmSet == TRUE )
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <Clock_Alarm_Config+0xb8>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d108      	bne.n	800364c <Clock_Alarm_Config+0x88>
  {
    HAL_RTC_SetAlarm_IT(&hrtc,&(msg_struct->sAlarm), FORMAT_BIN);
 800363a:	9b01      	ldr	r3, [sp, #4]
 800363c:	3328      	adds	r3, #40	; 0x28
 800363e:	0019      	movs	r1, r3
 8003640:	4b10      	ldr	r3, [pc, #64]	; (8003684 <Clock_Alarm_Config+0xc0>)
 8003642:	2200      	movs	r2, #0
 8003644:	0018      	movs	r0, r3
 8003646:	f000 fb4f 	bl	8003ce8 <HAL_RTC_SetAlarm_IT>
    (void)memset(msg_struct,0,sizeof(msg_struct));
    Internal_Event = CLOCK_ALARM_DEACTIVATE;
    msg_struct->msg = Internal_Event;
    (void)HIL_QUEUE_Write(&Clock_Queue,msg_struct);
  }
}
 800364a:	e014      	b.n	8003676 <Clock_Alarm_Config+0xb2>
    (void)memset(msg_struct,0,sizeof(msg_struct));
 800364c:	9b01      	ldr	r3, [sp, #4]
 800364e:	2204      	movs	r2, #4
 8003650:	2100      	movs	r1, #0
 8003652:	0018      	movs	r0, r3
 8003654:	f002 fe0c 	bl	8006270 <memset>
    Internal_Event = CLOCK_ALARM_DEACTIVATE;
 8003658:	230f      	movs	r3, #15
 800365a:	446b      	add	r3, sp
 800365c:	2206      	movs	r2, #6
 800365e:	701a      	strb	r2, [r3, #0]
    msg_struct->msg = Internal_Event;
 8003660:	9b01      	ldr	r3, [sp, #4]
 8003662:	220f      	movs	r2, #15
 8003664:	446a      	add	r2, sp
 8003666:	7812      	ldrb	r2, [r2, #0]
 8003668:	701a      	strb	r2, [r3, #0]
    (void)HIL_QUEUE_Write(&Clock_Queue,msg_struct);
 800366a:	9a01      	ldr	r2, [sp, #4]
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <Clock_Alarm_Config+0xc4>)
 800366e:	0011      	movs	r1, r2
 8003670:	0018      	movs	r0, r3
 8003672:	f002 fa8f 	bl	8005b94 <HIL_QUEUE_Write>
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	b005      	add	sp, #20
 800367a:	bd00      	pop	{pc}
 800367c:	20000238 	.word	0x20000238
 8003680:	80000080 	.word	0x80000080
 8003684:	2000023c 	.word	0x2000023c
 8003688:	20001460 	.word	0x20001460

0800368c <Clock_Alarm_Deactive>:
static void Clock_Alarm_Deactive (APP_Display_MsgTypeDef *msg_struct )
{
 800368c:	b500      	push	{lr}
 800368e:	b083      	sub	sp, #12
 8003690:	9001      	str	r0, [sp, #4]
  (void)msg_struct;
  AlarmActive = 0;
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <Clock_Alarm_Deactive+0x34>)
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
  AlarmSet    = 0;
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <Clock_Alarm_Deactive+0x38>)
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB,BUZZER,RESET);
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	01db      	lsls	r3, r3, #7
 80036a2:	4809      	ldr	r0, [pc, #36]	; (80036c8 <Clock_Alarm_Deactive+0x3c>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	0019      	movs	r1, r3
 80036a8:	f7fe f948 	bl	800193c <HAL_GPIO_WritePin>
  HAL_RTC_DeactivateAlarm(&hrtc,RTC_ALARM_A);
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	005a      	lsls	r2, r3, #1
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <Clock_Alarm_Deactive+0x40>)
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 fc55 	bl	8003f64 <HAL_RTC_DeactivateAlarm>
}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	b003      	add	sp, #12
 80036be:	bd00      	pop	{pc}
 80036c0:	20000239 	.word	0x20000239
 80036c4:	20000238 	.word	0x20000238
 80036c8:	50000400 	.word	0x50000400
 80036cc:	2000023c 	.word	0x2000023c

080036d0 <Clock_Alarm_Active>:

static void Clock_Alarm_Active (APP_Display_MsgTypeDef *msg_struct)
{
 80036d0:	b500      	push	{lr}
 80036d2:	b085      	sub	sp, #20
 80036d4:	9001      	str	r0, [sp, #4]
  App_Display_Events event;
  RunAlarm();
 80036d6:	f7ff fd65 	bl	80031a4 <RunAlarm>
  (void)memset(msg_struct,0,sizeof(msg_struct));
 80036da:	9b01      	ldr	r3, [sp, #4]
 80036dc:	2204      	movs	r2, #4
 80036de:	2100      	movs	r1, #0
 80036e0:	0018      	movs	r0, r3
 80036e2:	f002 fdc5 	bl	8006270 <memset>
  event = DISPLAY_ALARM_ACTIVE;
 80036e6:	230f      	movs	r3, #15
 80036e8:	446b      	add	r3, sp
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
  msg_struct->msg = event;
 80036ee:	9b01      	ldr	r3, [sp, #4]
 80036f0:	220f      	movs	r2, #15
 80036f2:	446a      	add	r2, sp
 80036f4:	7812      	ldrb	r2, [r2, #0]
 80036f6:	701a      	strb	r2, [r3, #0]
  (void)HIL_QUEUE_Write(&Display_Queue,msg_struct);
 80036f8:	9a01      	ldr	r2, [sp, #4]
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <Clock_Alarm_Active+0x3c>)
 80036fc:	0011      	movs	r1, r2
 80036fe:	0018      	movs	r0, r3
 8003700:	f002 fa48 	bl	8005b94 <HIL_QUEUE_Write>
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	b005      	add	sp, #20
 8003708:	bd00      	pop	{pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	200060cc 	.word	0x200060cc

08003710 <Clock_Init>:
*         we set the RTC in 24 hours time format and set the correct prescaler parameters to get 1 hz in the RTC form the LSE clock. This parameters can be obtain from the table in the Data Sheet.
* @param
*         None. 
*/
void Clock_Init( void )
{
 8003710:	b510      	push	{r4, lr}
  /*configuration*/
  hrtc.Instance             = RTC;
 8003712:	4b14      	ldr	r3, [pc, #80]	; (8003764 <Clock_Init+0x54>)
 8003714:	4a14      	ldr	r2, [pc, #80]	; (8003768 <Clock_Init+0x58>)
 8003716:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat      = RTC_HOURFORMAT_24;
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <Clock_Init+0x54>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv    = 127;
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <Clock_Init+0x54>)
 8003720:	227f      	movs	r2, #127	; 0x7f
 8003722:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv     = 255;
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <Clock_Init+0x54>)
 8003726:	22ff      	movs	r2, #255	; 0xff
 8003728:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut          = RTC_OUTPUT_DISABLE;
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <Clock_Init+0x54>)
 800372c:	2200      	movs	r2, #0
 800372e:	615a      	str	r2, [r3, #20]
  /* initialize the RTC with 24 hour format and no output signal enable */
  HAL_RTC_Init( &hrtc );
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <Clock_Init+0x54>)
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f856 	bl	80037e4 <HAL_RTC_Init>
  Display_Queue.Buffer = (void*)Display_Buffer; // indicamos el buffer que usara la cola como espacio de memoria
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <Clock_Init+0x5c>)
 800373a:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <Clock_Init+0x60>)
 800373c:	601a      	str	r2, [r3, #0]
  Display_Queue.Elements = 230u;         // indicamos el numero de elementos maximo que podra alamcenar
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <Clock_Init+0x5c>)
 8003740:	22e6      	movs	r2, #230	; 0xe6
 8003742:	605a      	str	r2, [r3, #4]
  Display_Queue.Size = sizeof( APP_Display_MsgTypeDef ) + 1u; // indicamos el tama;o en bytes del tipo de elemntos a manejar
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <Clock_Init+0x5c>)
 8003746:	2255      	movs	r2, #85	; 0x55
 8003748:	721a      	strb	r2, [r3, #8]
  HIL_QUEUE_Init(&Display_Queue);
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <Clock_Init+0x5c>)
 800374c:	0018      	movs	r0, r3
 800374e:	f002 f9ff 	bl	8005b50 <HIL_QUEUE_Init>
  (void)HIL_SCHEDULER_StartTimer(&Sche,TimerId);
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <Clock_Init+0x64>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <Clock_Init+0x68>)
 8003758:	0011      	movs	r1, r2
 800375a:	0018      	movs	r0, r3
 800375c:	f002 fb30 	bl	8005dc0 <HIL_SCHEDULER_StartTimer>
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	bd10      	pop	{r4, pc}
 8003764:	2000023c 	.word	0x2000023c
 8003768:	40002800 	.word	0x40002800
 800376c:	200060cc 	.word	0x200060cc
 8003770:	20001554 	.word	0x20001554
 8003774:	20000044 	.word	0x20000044
 8003778:	20000028 	.word	0x20000028

0800377c <Clock_Task>:
*           CLOCK_DISPLAY   Fill  the message passing structure with the data get from the RTC to be displayed for the Display state machine
* @param 
*           None.
*/
void Clock_Task( void )
{
 800377c:	b500      	push	{lr}
 800377e:	b097      	sub	sp, #92	; 0x5c
    {CLOCK_DISPLAY,Clock_Display_Func},
    {CLOCK_ALARM_ACTIVATE,Clock_Alarm_Active},
    {CLOCK_ALARM_DEACTIVATE,Clock_Alarm_Deactive},
    {CLOCK_ALARM_DISPLAY,Clock_DisplayAlarm}
  };
  APP_Display_MsgTypeDef  msg_struct  = {0};
 8003780:	466b      	mov	r3, sp
 8003782:	0018      	movs	r0, r3
 8003784:	2354      	movs	r3, #84	; 0x54
 8003786:	001a      	movs	r2, r3
 8003788:	2100      	movs	r1, #0
 800378a:	f002 fd71 	bl	8006270 <memset>
  Clock_Events_TypeDef    Event;    
  /* get systick to display the date and time every second */
 
  while(!HIL_QUEUE_IsEmptyISR(&Clock_Queue,0xff))
 800378e:	e01a      	b.n	80037c6 <Clock_Task+0x4a>
  {
    (void)HIL_QUEUE_Read(&Clock_Queue,&msg_struct);
 8003790:	466a      	mov	r2, sp
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <Clock_Task+0x60>)
 8003794:	0011      	movs	r1, r2
 8003796:	0018      	movs	r0, r3
 8003798:	f002 fa46 	bl	8005c28 <HIL_QUEUE_Read>
    Event = msg_struct.msg;
 800379c:	2357      	movs	r3, #87	; 0x57
 800379e:	446b      	add	r3, sp
 80037a0:	466a      	mov	r2, sp
 80037a2:	7812      	ldrb	r2, [r2, #0]
 80037a4:	701a      	strb	r2, [r3, #0]
    if(Event < CLOCK_LAST)
 80037a6:	2357      	movs	r3, #87	; 0x57
 80037a8:	446b      	add	r3, sp
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b07      	cmp	r3, #7
 80037ae:	d80a      	bhi.n	80037c6 <Clock_Task+0x4a>
    {
      (*Clock_EventsMachine[Event].func)(&msg_struct);
 80037b0:	2357      	movs	r3, #87	; 0x57
 80037b2:	446b      	add	r3, sp
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <Clock_Task+0x64>)
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	18d3      	adds	r3, r2, r3
 80037bc:	3304      	adds	r3, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	466a      	mov	r2, sp
 80037c2:	0010      	movs	r0, r2
 80037c4:	4798      	blx	r3
  while(!HIL_QUEUE_IsEmptyISR(&Clock_Queue,0xff))
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <Clock_Task+0x60>)
 80037c8:	21ff      	movs	r1, #255	; 0xff
 80037ca:	0018      	movs	r0, r3
 80037cc:	f002 fa9f 	bl	8005d0e <HIL_QUEUE_IsEmptyISR>
 80037d0:	1e03      	subs	r3, r0, #0
 80037d2:	d0dd      	beq.n	8003790 <Clock_Task+0x14>
    }
  } 

}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	b017      	add	sp, #92	; 0x5c
 80037da:	bd00      	pop	{pc}
 80037dc:	20001460 	.word	0x20001460
 80037e0:	080064ac 	.word	0x080064ac

080037e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037e4:	b510      	push	{r4, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037ea:	230f      	movs	r3, #15
 80037ec:	446b      	add	r3, sp
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80037f2:	9b01      	ldr	r3, [sp, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d100      	bne.n	80037fa <HAL_RTC_Init+0x16>
 80037f8:	e08d      	b.n	8003916 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80037fa:	9b01      	ldr	r3, [sp, #4]
 80037fc:	2229      	movs	r2, #41	; 0x29
 80037fe:	5c9b      	ldrb	r3, [r3, r2]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003806:	9b01      	ldr	r3, [sp, #4]
 8003808:	2228      	movs	r2, #40	; 0x28
 800380a:	2100      	movs	r1, #0
 800380c:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800380e:	9b01      	ldr	r3, [sp, #4]
 8003810:	2288      	movs	r2, #136	; 0x88
 8003812:	0212      	lsls	r2, r2, #8
 8003814:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003816:	9b01      	ldr	r3, [sp, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f7fc ff23 	bl	8000664 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800381e:	9b01      	ldr	r3, [sp, #4]
 8003820:	2229      	movs	r2, #41	; 0x29
 8003822:	2102      	movs	r1, #2
 8003824:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003826:	9b01      	ldr	r3, [sp, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2210      	movs	r2, #16
 800382e:	4013      	ands	r3, r2
 8003830:	2b10      	cmp	r3, #16
 8003832:	d063      	beq.n	80038fc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003834:	9b01      	ldr	r3, [sp, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	22ca      	movs	r2, #202	; 0xca
 800383a:	625a      	str	r2, [r3, #36]	; 0x24
 800383c:	9b01      	ldr	r3, [sp, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2253      	movs	r2, #83	; 0x53
 8003842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003844:	240f      	movs	r4, #15
 8003846:	446c      	add	r4, sp
 8003848:	9b01      	ldr	r3, [sp, #4]
 800384a:	0018      	movs	r0, r3
 800384c:	f000 fd4d 	bl	80042ea <RTC_EnterInitMode>
 8003850:	0003      	movs	r3, r0
 8003852:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8003854:	230f      	movs	r3, #15
 8003856:	446b      	add	r3, sp
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d12d      	bne.n	80038ba <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800385e:	9b01      	ldr	r3, [sp, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	9b01      	ldr	r3, [sp, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	492e      	ldr	r1, [pc, #184]	; (8003924 <HAL_RTC_Init+0x140>)
 800386a:	400a      	ands	r2, r1
 800386c:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800386e:	9b01      	ldr	r3, [sp, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6999      	ldr	r1, [r3, #24]
 8003874:	9b01      	ldr	r3, [sp, #4]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	9b01      	ldr	r3, [sp, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	431a      	orrs	r2, r3
 800387e:	9b01      	ldr	r3, [sp, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	431a      	orrs	r2, r3
 8003884:	9b01      	ldr	r3, [sp, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800388c:	9b01      	ldr	r3, [sp, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	9a01      	ldr	r2, [sp, #4]
 8003892:	6912      	ldr	r2, [r2, #16]
 8003894:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003896:	9b01      	ldr	r3, [sp, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6919      	ldr	r1, [r3, #16]
 800389c:	9b01      	ldr	r3, [sp, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	9b01      	ldr	r3, [sp, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80038aa:	240f      	movs	r4, #15
 80038ac:	446c      	add	r4, sp
 80038ae:	9b01      	ldr	r3, [sp, #4]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 fd5d 	bl	8004370 <RTC_ExitInitMode>
 80038b6:	0003      	movs	r3, r0
 80038b8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80038ba:	230f      	movs	r3, #15
 80038bc:	446b      	add	r3, sp
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d116      	bne.n	80038f2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80038c4:	9b01      	ldr	r3, [sp, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	9b01      	ldr	r3, [sp, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	00d2      	lsls	r2, r2, #3
 80038d0:	08d2      	lsrs	r2, r2, #3
 80038d2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038d4:	9b01      	ldr	r3, [sp, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6999      	ldr	r1, [r3, #24]
 80038da:	9b01      	ldr	r3, [sp, #4]
 80038dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038de:	9b01      	ldr	r3, [sp, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	9b01      	ldr	r3, [sp, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	9b01      	ldr	r3, [sp, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038f2:	9b01      	ldr	r3, [sp, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	22ff      	movs	r2, #255	; 0xff
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
 80038fa:	e003      	b.n	8003904 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80038fc:	230f      	movs	r3, #15
 80038fe:	446b      	add	r3, sp
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8003904:	230f      	movs	r3, #15
 8003906:	446b      	add	r3, sp
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800390e:	9b01      	ldr	r3, [sp, #4]
 8003910:	2229      	movs	r2, #41	; 0x29
 8003912:	2101      	movs	r1, #1
 8003914:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003916:	230f      	movs	r3, #15
 8003918:	446b      	add	r3, sp
 800391a:	781b      	ldrb	r3, [r3, #0]
}
 800391c:	0018      	movs	r0, r3
 800391e:	b004      	add	sp, #16
 8003920:	bd10      	pop	{r4, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	fb8fffbf 	.word	0xfb8fffbf

08003928 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003928:	b510      	push	{r4, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	9003      	str	r0, [sp, #12]
 800392e:	9102      	str	r1, [sp, #8]
 8003930:	9201      	str	r2, [sp, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003932:	9b03      	ldr	r3, [sp, #12]
 8003934:	2228      	movs	r2, #40	; 0x28
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_RTC_SetTime+0x18>
 800393c:	2302      	movs	r3, #2
 800393e:	e093      	b.n	8003a68 <HAL_RTC_SetTime+0x140>
 8003940:	9b03      	ldr	r3, [sp, #12]
 8003942:	2228      	movs	r2, #40	; 0x28
 8003944:	2101      	movs	r1, #1
 8003946:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003948:	9b03      	ldr	r3, [sp, #12]
 800394a:	2229      	movs	r2, #41	; 0x29
 800394c:	2102      	movs	r1, #2
 800394e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003950:	9b03      	ldr	r3, [sp, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	22ca      	movs	r2, #202	; 0xca
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
 8003958:	9b03      	ldr	r3, [sp, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2253      	movs	r2, #83	; 0x53
 800395e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003960:	2413      	movs	r4, #19
 8003962:	446c      	add	r4, sp
 8003964:	9b03      	ldr	r3, [sp, #12]
 8003966:	0018      	movs	r0, r3
 8003968:	f000 fcbf 	bl	80042ea <RTC_EnterInitMode>
 800396c:	0003      	movs	r3, r0
 800396e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003970:	2313      	movs	r3, #19
 8003972:	446b      	add	r3, sp
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d162      	bne.n	8003a40 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800397a:	9b01      	ldr	r3, [sp, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d125      	bne.n	80039cc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003980:	9b03      	ldr	r3, [sp, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2240      	movs	r2, #64	; 0x40
 8003988:	4013      	ands	r3, r2
 800398a:	d102      	bne.n	8003992 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800398c:	9b02      	ldr	r3, [sp, #8]
 800398e:	2200      	movs	r2, #0
 8003990:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003992:	9b02      	ldr	r3, [sp, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	0018      	movs	r0, r3
 8003998:	f000 fd2e 	bl	80043f8 <RTC_ByteToBcd2>
 800399c:	0003      	movs	r3, r0
 800399e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039a0:	9b02      	ldr	r3, [sp, #8]
 80039a2:	785b      	ldrb	r3, [r3, #1]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 fd27 	bl	80043f8 <RTC_ByteToBcd2>
 80039aa:	0003      	movs	r3, r0
 80039ac:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039ae:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80039b0:	9b02      	ldr	r3, [sp, #8]
 80039b2:	789b      	ldrb	r3, [r3, #2]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f000 fd1f 	bl	80043f8 <RTC_ByteToBcd2>
 80039ba:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039bc:	0022      	movs	r2, r4
 80039be:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80039c0:	9b02      	ldr	r3, [sp, #8]
 80039c2:	78db      	ldrb	r3, [r3, #3]
 80039c4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039c6:	4313      	orrs	r3, r2
 80039c8:	9305      	str	r3, [sp, #20]
 80039ca:	e017      	b.n	80039fc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2240      	movs	r2, #64	; 0x40
 80039d4:	4013      	ands	r3, r2
 80039d6:	d102      	bne.n	80039de <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80039d8:	9b02      	ldr	r3, [sp, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039de:	9b02      	ldr	r3, [sp, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039e4:	9b02      	ldr	r3, [sp, #8]
 80039e6:	785b      	ldrb	r3, [r3, #1]
 80039e8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039ea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80039ec:	9a02      	ldr	r2, [sp, #8]
 80039ee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039f0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80039f2:	9b02      	ldr	r3, [sp, #8]
 80039f4:	78db      	ldrb	r3, [r3, #3]
 80039f6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039f8:	4313      	orrs	r3, r2
 80039fa:	9305      	str	r3, [sp, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80039fc:	9b03      	ldr	r3, [sp, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	9a05      	ldr	r2, [sp, #20]
 8003a02:	491b      	ldr	r1, [pc, #108]	; (8003a70 <HAL_RTC_SetTime+0x148>)
 8003a04:	400a      	ands	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003a08:	9b03      	ldr	r3, [sp, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	9b03      	ldr	r3, [sp, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4918      	ldr	r1, [pc, #96]	; (8003a74 <HAL_RTC_SetTime+0x14c>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a18:	9b03      	ldr	r3, [sp, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6999      	ldr	r1, [r3, #24]
 8003a1e:	9b02      	ldr	r3, [sp, #8]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	9b02      	ldr	r3, [sp, #8]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	9b03      	ldr	r3, [sp, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a30:	2413      	movs	r4, #19
 8003a32:	446c      	add	r4, sp
 8003a34:	9b03      	ldr	r3, [sp, #12]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 fc9a 	bl	8004370 <RTC_ExitInitMode>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a40:	9b03      	ldr	r3, [sp, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	22ff      	movs	r2, #255	; 0xff
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003a48:	2313      	movs	r3, #19
 8003a4a:	446b      	add	r3, sp
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003a52:	9b03      	ldr	r3, [sp, #12]
 8003a54:	2229      	movs	r2, #41	; 0x29
 8003a56:	2101      	movs	r1, #1
 8003a58:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a5a:	9b03      	ldr	r3, [sp, #12]
 8003a5c:	2228      	movs	r2, #40	; 0x28
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]

  return status;
 8003a62:	2313      	movs	r3, #19
 8003a64:	446b      	add	r3, sp
 8003a66:	781b      	ldrb	r3, [r3, #0]
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	b006      	add	sp, #24
 8003a6c:	bd10      	pop	{r4, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	007f7f7f 	.word	0x007f7f7f
 8003a74:	fffbffff 	.word	0xfffbffff

08003a78 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a78:	b500      	push	{lr}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	9003      	str	r0, [sp, #12]
 8003a7e:	9102      	str	r1, [sp, #8]
 8003a80:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003a82:	9b03      	ldr	r3, [sp, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	9b02      	ldr	r3, [sp, #8]
 8003a8a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	045b      	lsls	r3, r3, #17
 8003a94:	0c5a      	lsrs	r2, r3, #17
 8003a96:	9b02      	ldr	r3, [sp, #8]
 8003a98:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <HAL_RTC_GetTime+0xb0>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	9305      	str	r3, [sp, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003aa6:	9b05      	ldr	r3, [sp, #20]
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	223f      	movs	r2, #63	; 0x3f
 8003aae:	4013      	ands	r3, r2
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	9b02      	ldr	r3, [sp, #8]
 8003ab4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003ab6:	9b05      	ldr	r3, [sp, #20]
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	227f      	movs	r2, #127	; 0x7f
 8003abe:	4013      	ands	r3, r2
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	9b02      	ldr	r3, [sp, #8]
 8003ac4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003ac6:	9b05      	ldr	r3, [sp, #20]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	227f      	movs	r2, #127	; 0x7f
 8003acc:	4013      	ands	r3, r2
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	9b02      	ldr	r3, [sp, #8]
 8003ad2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003ad4:	9b05      	ldr	r3, [sp, #20]
 8003ad6:	0d9b      	lsrs	r3, r3, #22
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2201      	movs	r2, #1
 8003adc:	4013      	ands	r3, r2
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	9b02      	ldr	r3, [sp, #8]
 8003ae2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003ae4:	9b01      	ldr	r3, [sp, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d11a      	bne.n	8003b20 <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003aea:	9b02      	ldr	r3, [sp, #8]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 fcab 	bl	800444a <RTC_Bcd2ToByte>
 8003af4:	0003      	movs	r3, r0
 8003af6:	001a      	movs	r2, r3
 8003af8:	9b02      	ldr	r3, [sp, #8]
 8003afa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003afc:	9b02      	ldr	r3, [sp, #8]
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 fca2 	bl	800444a <RTC_Bcd2ToByte>
 8003b06:	0003      	movs	r3, r0
 8003b08:	001a      	movs	r2, r3
 8003b0a:	9b02      	ldr	r3, [sp, #8]
 8003b0c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b0e:	9b02      	ldr	r3, [sp, #8]
 8003b10:	789b      	ldrb	r3, [r3, #2]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 fc99 	bl	800444a <RTC_Bcd2ToByte>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	9b02      	ldr	r3, [sp, #8]
 8003b1e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	b007      	add	sp, #28
 8003b26:	bd00      	pop	{pc}
 8003b28:	007f7f7f 	.word	0x007f7f7f

08003b2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	9003      	str	r0, [sp, #12]
 8003b32:	9102      	str	r1, [sp, #8]
 8003b34:	9201      	str	r2, [sp, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003b36:	9b03      	ldr	r3, [sp, #12]
 8003b38:	2228      	movs	r2, #40	; 0x28
 8003b3a:	5c9b      	ldrb	r3, [r3, r2]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_RTC_SetDate+0x18>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e07f      	b.n	8003c44 <HAL_RTC_SetDate+0x118>
 8003b44:	9b03      	ldr	r3, [sp, #12]
 8003b46:	2228      	movs	r2, #40	; 0x28
 8003b48:	2101      	movs	r1, #1
 8003b4a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b4c:	9b03      	ldr	r3, [sp, #12]
 8003b4e:	2229      	movs	r2, #41	; 0x29
 8003b50:	2102      	movs	r1, #2
 8003b52:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b54:	9b01      	ldr	r3, [sp, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10e      	bne.n	8003b78 <HAL_RTC_SetDate+0x4c>
 8003b5a:	9b02      	ldr	r3, [sp, #8]
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	001a      	movs	r2, r3
 8003b60:	2310      	movs	r3, #16
 8003b62:	4013      	ands	r3, r2
 8003b64:	d008      	beq.n	8003b78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b66:	9b02      	ldr	r3, [sp, #8]
 8003b68:	785b      	ldrb	r3, [r3, #1]
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	4393      	bics	r3, r2
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	330a      	adds	r3, #10
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	9b02      	ldr	r3, [sp, #8]
 8003b76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003b78:	9b01      	ldr	r3, [sp, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d11c      	bne.n	8003bb8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003b7e:	9b02      	ldr	r3, [sp, #8]
 8003b80:	78db      	ldrb	r3, [r3, #3]
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 fc38 	bl	80043f8 <RTC_ByteToBcd2>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003b8c:	9b02      	ldr	r3, [sp, #8]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 fc31 	bl	80043f8 <RTC_ByteToBcd2>
 8003b96:	0003      	movs	r3, r0
 8003b98:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003b9a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003b9c:	9b02      	ldr	r3, [sp, #8]
 8003b9e:	789b      	ldrb	r3, [r3, #2]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f000 fc29 	bl	80043f8 <RTC_ByteToBcd2>
 8003ba6:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ba8:	0022      	movs	r2, r4
 8003baa:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003bac:	9b02      	ldr	r3, [sp, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	9305      	str	r3, [sp, #20]
 8003bb6:	e00e      	b.n	8003bd6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003bb8:	9b02      	ldr	r3, [sp, #8]
 8003bba:	78db      	ldrb	r3, [r3, #3]
 8003bbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003bbe:	9b02      	ldr	r3, [sp, #8]
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003bc4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003bc6:	9a02      	ldr	r2, [sp, #8]
 8003bc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003bca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003bcc:	9b02      	ldr	r3, [sp, #8]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	9305      	str	r3, [sp, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bd6:	9b03      	ldr	r3, [sp, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	22ca      	movs	r2, #202	; 0xca
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24
 8003bde:	9b03      	ldr	r3, [sp, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2253      	movs	r2, #83	; 0x53
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003be6:	2413      	movs	r4, #19
 8003be8:	446c      	add	r4, sp
 8003bea:	9b03      	ldr	r3, [sp, #12]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 fb7c 	bl	80042ea <RTC_EnterInitMode>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003bf6:	2313      	movs	r3, #19
 8003bf8:	446b      	add	r3, sp
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c00:	9b03      	ldr	r3, [sp, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	9a05      	ldr	r2, [sp, #20]
 8003c06:	4911      	ldr	r1, [pc, #68]	; (8003c4c <HAL_RTC_SetDate+0x120>)
 8003c08:	400a      	ands	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c0c:	2413      	movs	r4, #19
 8003c0e:	446c      	add	r4, sp
 8003c10:	9b03      	ldr	r3, [sp, #12]
 8003c12:	0018      	movs	r0, r3
 8003c14:	f000 fbac 	bl	8004370 <RTC_ExitInitMode>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c1c:	9b03      	ldr	r3, [sp, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003c24:	2313      	movs	r3, #19
 8003c26:	446b      	add	r3, sp
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c2e:	9b03      	ldr	r3, [sp, #12]
 8003c30:	2229      	movs	r2, #41	; 0x29
 8003c32:	2101      	movs	r1, #1
 8003c34:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c36:	9b03      	ldr	r3, [sp, #12]
 8003c38:	2228      	movs	r2, #40	; 0x28
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

  return status;
 8003c3e:	2313      	movs	r3, #19
 8003c40:	446b      	add	r3, sp
 8003c42:	781b      	ldrb	r3, [r3, #0]
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	b006      	add	sp, #24
 8003c48:	bd10      	pop	{r4, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	00ffff3f 	.word	0x00ffff3f

08003c50 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c50:	b500      	push	{lr}
 8003c52:	b087      	sub	sp, #28
 8003c54:	9003      	str	r0, [sp, #12]
 8003c56:	9102      	str	r1, [sp, #8]
 8003c58:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003c5a:	9b03      	ldr	r3, [sp, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <HAL_RTC_GetDate+0x94>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	9305      	str	r3, [sp, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003c66:	9b05      	ldr	r3, [sp, #20]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	9b02      	ldr	r3, [sp, #8]
 8003c6e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003c70:	9b05      	ldr	r3, [sp, #20]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	221f      	movs	r2, #31
 8003c78:	4013      	ands	r3, r2
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	9b02      	ldr	r3, [sp, #8]
 8003c7e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003c80:	9b05      	ldr	r3, [sp, #20]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	223f      	movs	r2, #63	; 0x3f
 8003c86:	4013      	ands	r3, r2
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	9b02      	ldr	r3, [sp, #8]
 8003c8c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003c8e:	9b05      	ldr	r3, [sp, #20]
 8003c90:	0b5b      	lsrs	r3, r3, #13
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2207      	movs	r2, #7
 8003c96:	4013      	ands	r3, r2
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	9b02      	ldr	r3, [sp, #8]
 8003c9c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003c9e:	9b01      	ldr	r3, [sp, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d11a      	bne.n	8003cda <HAL_RTC_GetDate+0x8a>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003ca4:	9b02      	ldr	r3, [sp, #8]
 8003ca6:	78db      	ldrb	r3, [r3, #3]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 fbce 	bl	800444a <RTC_Bcd2ToByte>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	9b02      	ldr	r3, [sp, #8]
 8003cb4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003cb6:	9b02      	ldr	r3, [sp, #8]
 8003cb8:	785b      	ldrb	r3, [r3, #1]
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f000 fbc5 	bl	800444a <RTC_Bcd2ToByte>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	9b02      	ldr	r3, [sp, #8]
 8003cc6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003cc8:	9b02      	ldr	r3, [sp, #8]
 8003cca:	789b      	ldrb	r3, [r3, #2]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f000 fbbc 	bl	800444a <RTC_Bcd2ToByte>
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	9b02      	ldr	r3, [sp, #8]
 8003cd8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	b007      	add	sp, #28
 8003ce0:	bd00      	pop	{pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	00ffff3f 	.word	0x00ffff3f

08003ce8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	9003      	str	r0, [sp, #12]
 8003cee:	9102      	str	r1, [sp, #8]
 8003cf0:	9201      	str	r2, [sp, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003cf2:	9b03      	ldr	r3, [sp, #12]
 8003cf4:	2228      	movs	r2, #40	; 0x28
 8003cf6:	5c9b      	ldrb	r3, [r3, r2]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_RTC_SetAlarm_IT+0x18>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e127      	b.n	8003f50 <HAL_RTC_SetAlarm_IT+0x268>
 8003d00:	9b03      	ldr	r3, [sp, #12]
 8003d02:	2228      	movs	r2, #40	; 0x28
 8003d04:	2101      	movs	r1, #1
 8003d06:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d08:	9b03      	ldr	r3, [sp, #12]
 8003d0a:	2229      	movs	r2, #41	; 0x29
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8003d10:	9b01      	ldr	r3, [sp, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d136      	bne.n	8003d84 <HAL_RTC_SetAlarm_IT+0x9c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d16:	9b03      	ldr	r3, [sp, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2240      	movs	r2, #64	; 0x40
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d102      	bne.n	8003d28 <HAL_RTC_SetAlarm_IT+0x40>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d22:	9b02      	ldr	r3, [sp, #8]
 8003d24:	2200      	movs	r2, #0
 8003d26:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d28:	9b02      	ldr	r3, [sp, #8]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f000 fb63 	bl	80043f8 <RTC_ByteToBcd2>
 8003d32:	0003      	movs	r3, r0
 8003d34:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d36:	9b02      	ldr	r3, [sp, #8]
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 fb5c 	bl	80043f8 <RTC_ByteToBcd2>
 8003d40:	0003      	movs	r3, r0
 8003d42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d44:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d46:	9b02      	ldr	r3, [sp, #8]
 8003d48:	789b      	ldrb	r3, [r3, #2]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 fb54 	bl	80043f8 <RTC_ByteToBcd2>
 8003d50:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d52:	0022      	movs	r2, r4
 8003d54:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d56:	9b02      	ldr	r3, [sp, #8]
 8003d58:	78db      	ldrb	r3, [r3, #3]
 8003d5a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d60:	9b02      	ldr	r3, [sp, #8]
 8003d62:	2220      	movs	r2, #32
 8003d64:	5c9b      	ldrb	r3, [r3, r2]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 fb46 	bl	80043f8 <RTC_ByteToBcd2>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d70:	0022      	movs	r2, r4
 8003d72:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003d74:	9b02      	ldr	r3, [sp, #8]
 8003d76:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d78:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003d7a:	9b02      	ldr	r3, [sp, #8]
 8003d7c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	9307      	str	r3, [sp, #28]
 8003d82:	e022      	b.n	8003dca <HAL_RTC_SetAlarm_IT+0xe2>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d84:	9b03      	ldr	r3, [sp, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2240      	movs	r2, #64	; 0x40
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d102      	bne.n	8003d96 <HAL_RTC_SetAlarm_IT+0xae>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d90:	9b02      	ldr	r3, [sp, #8]
 8003d92:	2200      	movs	r2, #0
 8003d94:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d96:	9b02      	ldr	r3, [sp, #8]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d9c:	9b02      	ldr	r3, [sp, #8]
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003da2:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003da4:	9a02      	ldr	r2, [sp, #8]
 8003da6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003da8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003daa:	9b02      	ldr	r3, [sp, #8]
 8003dac:	78db      	ldrb	r3, [r3, #3]
 8003dae:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003db0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003db2:	9b02      	ldr	r3, [sp, #8]
 8003db4:	2120      	movs	r1, #32
 8003db6:	5c5b      	ldrb	r3, [r3, r1]
 8003db8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003dba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003dbc:	9b02      	ldr	r3, [sp, #8]
 8003dbe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003dc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003dc2:	9b02      	ldr	r3, [sp, #8]
 8003dc4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	9307      	str	r3, [sp, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003dca:	9b02      	ldr	r3, [sp, #8]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	9b02      	ldr	r3, [sp, #8]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	9306      	str	r3, [sp, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dd6:	9b03      	ldr	r3, [sp, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	22ca      	movs	r2, #202	; 0xca
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8003dde:	9b03      	ldr	r3, [sp, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2253      	movs	r2, #83	; 0x53
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003de6:	9b02      	ldr	r3, [sp, #8]
 8003de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d14c      	bne.n	8003e8c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003df2:	9b03      	ldr	r3, [sp, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	9b03      	ldr	r3, [sp, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4956      	ldr	r1, [pc, #344]	; (8003f58 <HAL_RTC_SetAlarm_IT+0x270>)
 8003dfe:	400a      	ands	r2, r1
 8003e00:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003e02:	9b03      	ldr	r3, [sp, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003e12:	f7fc fe09 	bl	8000a28 <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	9305      	str	r3, [sp, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003e1a:	e016      	b.n	8003e4a <HAL_RTC_SetAlarm_IT+0x162>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e1c:	f7fc fe04 	bl	8000a28 <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	9b05      	ldr	r3, [sp, #20]
 8003e24:	1ad2      	subs	r2, r2, r3
 8003e26:	23fa      	movs	r3, #250	; 0xfa
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d90d      	bls.n	8003e4a <HAL_RTC_SetAlarm_IT+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e2e:	9b03      	ldr	r3, [sp, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	22ff      	movs	r2, #255	; 0xff
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	2229      	movs	r2, #41	; 0x29
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e3e:	9b03      	ldr	r3, [sp, #12]
 8003e40:	2228      	movs	r2, #40	; 0x28
 8003e42:	2100      	movs	r1, #0
 8003e44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e082      	b.n	8003f50 <HAL_RTC_SetAlarm_IT+0x268>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003e4a:	9b03      	ldr	r3, [sp, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	4013      	ands	r3, r2
 8003e54:	d0e2      	beq.n	8003e1c <HAL_RTC_SetAlarm_IT+0x134>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003e56:	9b03      	ldr	r3, [sp, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	9a07      	ldr	r2, [sp, #28]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	9a06      	ldr	r2, [sp, #24]
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003e66:	9b03      	ldr	r3, [sp, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2180      	movs	r1, #128	; 0x80
 8003e72:	0049      	lsls	r1, r1, #1
 8003e74:	430a      	orrs	r2, r1
 8003e76:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003e78:	9b03      	ldr	r3, [sp, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	9b03      	ldr	r3, [sp, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	0149      	lsls	r1, r1, #5
 8003e86:	430a      	orrs	r2, r1
 8003e88:	619a      	str	r2, [r3, #24]
 8003e8a:	e04b      	b.n	8003f24 <HAL_RTC_SetAlarm_IT+0x23c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003e8c:	9b03      	ldr	r3, [sp, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4931      	ldr	r1, [pc, #196]	; (8003f5c <HAL_RTC_SetAlarm_IT+0x274>)
 8003e98:	400a      	ands	r2, r1
 8003e9a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003e9c:	9b03      	ldr	r3, [sp, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ea2:	9b03      	ldr	r3, [sp, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003eac:	f7fc fdbc 	bl	8000a28 <HAL_GetTick>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	9305      	str	r3, [sp, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003eb4:	e016      	b.n	8003ee4 <HAL_RTC_SetAlarm_IT+0x1fc>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003eb6:	f7fc fdb7 	bl	8000a28 <HAL_GetTick>
 8003eba:	0002      	movs	r2, r0
 8003ebc:	9b05      	ldr	r3, [sp, #20]
 8003ebe:	1ad2      	subs	r2, r2, r3
 8003ec0:	23fa      	movs	r3, #250	; 0xfa
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d90d      	bls.n	8003ee4 <HAL_RTC_SetAlarm_IT+0x1fc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	22ff      	movs	r2, #255	; 0xff
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ed0:	9b03      	ldr	r3, [sp, #12]
 8003ed2:	2229      	movs	r2, #41	; 0x29
 8003ed4:	2103      	movs	r1, #3
 8003ed6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ed8:	9b03      	ldr	r3, [sp, #12]
 8003eda:	2228      	movs	r2, #40	; 0x28
 8003edc:	2100      	movs	r1, #0
 8003ede:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e035      	b.n	8003f50 <HAL_RTC_SetAlarm_IT+0x268>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003ee4:	9b03      	ldr	r3, [sp, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2202      	movs	r2, #2
 8003eec:	4013      	ands	r3, r2
 8003eee:	d0e2      	beq.n	8003eb6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	9a07      	ldr	r2, [sp, #28]
 8003ef6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	9a06      	ldr	r2, [sp, #24]
 8003efe:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003f00:	9b03      	ldr	r3, [sp, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	9b03      	ldr	r3, [sp, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2180      	movs	r1, #128	; 0x80
 8003f0c:	0089      	lsls	r1, r1, #2
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	9b03      	ldr	r3, [sp, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2180      	movs	r1, #128	; 0x80
 8003f1e:	0189      	lsls	r1, r1, #6
 8003f20:	430a      	orrs	r2, r1
 8003f22:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003f24:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <HAL_RTC_SetAlarm_IT+0x278>)
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	58d3      	ldr	r3, [r2, r3]
 8003f2a:	490d      	ldr	r1, [pc, #52]	; (8003f60 <HAL_RTC_SetAlarm_IT+0x278>)
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	0312      	lsls	r2, r2, #12
 8003f30:	4313      	orrs	r3, r2
 8003f32:	2280      	movs	r2, #128	; 0x80
 8003f34:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f36:	9b03      	ldr	r3, [sp, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	22ff      	movs	r2, #255	; 0xff
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003f3e:	9b03      	ldr	r3, [sp, #12]
 8003f40:	2229      	movs	r2, #41	; 0x29
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f46:	9b03      	ldr	r3, [sp, #12]
 8003f48:	2228      	movs	r2, #40	; 0x28
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	b008      	add	sp, #32
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	fffffeff 	.word	0xfffffeff
 8003f5c:	fffffdff 	.word	0xfffffdff
 8003f60:	40021800 	.word	0x40021800

08003f64 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003f64:	b500      	push	{lr}
 8003f66:	b085      	sub	sp, #20
 8003f68:	9001      	str	r0, [sp, #4]
 8003f6a:	9100      	str	r1, [sp, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f6c:	9b01      	ldr	r3, [sp, #4]
 8003f6e:	2228      	movs	r2, #40	; 0x28
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_RTC_DeactivateAlarm+0x16>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e086      	b.n	8004088 <HAL_RTC_DeactivateAlarm+0x124>
 8003f7a:	9b01      	ldr	r3, [sp, #4]
 8003f7c:	2228      	movs	r2, #40	; 0x28
 8003f7e:	2101      	movs	r1, #1
 8003f80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f82:	9b01      	ldr	r3, [sp, #4]
 8003f84:	2229      	movs	r2, #41	; 0x29
 8003f86:	2102      	movs	r1, #2
 8003f88:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f8a:	9b01      	ldr	r3, [sp, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	22ca      	movs	r2, #202	; 0xca
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24
 8003f92:	9b01      	ldr	r3, [sp, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2253      	movs	r2, #83	; 0x53
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8003f9a:	9a00      	ldr	r2, [sp, #0]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d132      	bne.n	800400a <HAL_RTC_DeactivateAlarm+0xa6>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003fa4:	9b01      	ldr	r3, [sp, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	9b01      	ldr	r3, [sp, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4938      	ldr	r1, [pc, #224]	; (8004090 <HAL_RTC_DeactivateAlarm+0x12c>)
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003fb4:	9b01      	ldr	r3, [sp, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	9b01      	ldr	r3, [sp, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4935      	ldr	r1, [pc, #212]	; (8004094 <HAL_RTC_DeactivateAlarm+0x130>)
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8003fc4:	f7fc fd30 	bl	8000a28 <HAL_GetTick>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	9303      	str	r3, [sp, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003fcc:	e016      	b.n	8003ffc <HAL_RTC_DeactivateAlarm+0x98>
    {
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003fce:	f7fc fd2b 	bl	8000a28 <HAL_GetTick>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	1ad2      	subs	r2, r2, r3
 8003fd8:	23fa      	movs	r3, #250	; 0xfa
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d90d      	bls.n	8003ffc <HAL_RTC_DeactivateAlarm+0x98>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fe0:	9b01      	ldr	r3, [sp, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	22ff      	movs	r2, #255	; 0xff
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fe8:	9b01      	ldr	r3, [sp, #4]
 8003fea:	2229      	movs	r2, #41	; 0x29
 8003fec:	2103      	movs	r1, #3
 8003fee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ff0:	9b01      	ldr	r3, [sp, #4]
 8003ff2:	2228      	movs	r2, #40	; 0x28
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e045      	b.n	8004088 <HAL_RTC_DeactivateAlarm+0x124>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003ffc:	9b01      	ldr	r3, [sp, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	4013      	ands	r3, r2
 8004006:	d0e2      	beq.n	8003fce <HAL_RTC_DeactivateAlarm+0x6a>
 8004008:	e031      	b.n	800406e <HAL_RTC_DeactivateAlarm+0x10a>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800400a:	9b01      	ldr	r3, [sp, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699a      	ldr	r2, [r3, #24]
 8004010:	9b01      	ldr	r3, [sp, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4920      	ldr	r1, [pc, #128]	; (8004098 <HAL_RTC_DeactivateAlarm+0x134>)
 8004016:	400a      	ands	r2, r1
 8004018:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 800401a:	9b01      	ldr	r3, [sp, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	9b01      	ldr	r3, [sp, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	491d      	ldr	r1, [pc, #116]	; (800409c <HAL_RTC_DeactivateAlarm+0x138>)
 8004026:	400a      	ands	r2, r1
 8004028:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 800402a:	f7fc fcfd 	bl	8000a28 <HAL_GetTick>
 800402e:	0003      	movs	r3, r0
 8004030:	9303      	str	r3, [sp, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004032:	e016      	b.n	8004062 <HAL_RTC_DeactivateAlarm+0xfe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004034:	f7fc fcf8 	bl	8000a28 <HAL_GetTick>
 8004038:	0002      	movs	r2, r0
 800403a:	9b03      	ldr	r3, [sp, #12]
 800403c:	1ad2      	subs	r2, r2, r3
 800403e:	23fa      	movs	r3, #250	; 0xfa
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	429a      	cmp	r2, r3
 8004044:	d90d      	bls.n	8004062 <HAL_RTC_DeactivateAlarm+0xfe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004046:	9b01      	ldr	r3, [sp, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	22ff      	movs	r2, #255	; 0xff
 800404c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800404e:	9b01      	ldr	r3, [sp, #4]
 8004050:	2229      	movs	r2, #41	; 0x29
 8004052:	2103      	movs	r1, #3
 8004054:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004056:	9b01      	ldr	r3, [sp, #4]
 8004058:	2228      	movs	r2, #40	; 0x28
 800405a:	2100      	movs	r1, #0
 800405c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e012      	b.n	8004088 <HAL_RTC_DeactivateAlarm+0x124>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004062:	9b01      	ldr	r3, [sp, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2202      	movs	r2, #2
 800406a:	4013      	ands	r3, r2
 800406c:	d0e2      	beq.n	8004034 <HAL_RTC_DeactivateAlarm+0xd0>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800406e:	9b01      	ldr	r3, [sp, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	22ff      	movs	r2, #255	; 0xff
 8004074:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004076:	9b01      	ldr	r3, [sp, #4]
 8004078:	2229      	movs	r2, #41	; 0x29
 800407a:	2101      	movs	r1, #1
 800407c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800407e:	9b01      	ldr	r3, [sp, #4]
 8004080:	2228      	movs	r2, #40	; 0x28
 8004082:	2100      	movs	r1, #0
 8004084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	0018      	movs	r0, r3
 800408a:	b005      	add	sp, #20
 800408c:	bd00      	pop	{pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	fffffeff 	.word	0xfffffeff
 8004094:	ffffefff 	.word	0xffffefff
 8004098:	fffffdff 	.word	0xfffffdff
 800409c:	ffffdfff 	.word	0xffffdfff

080040a0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80040a0:	b500      	push	{lr}
 80040a2:	b087      	sub	sp, #28
 80040a4:	9003      	str	r0, [sp, #12]
 80040a6:	9102      	str	r1, [sp, #8]
 80040a8:	9201      	str	r2, [sp, #4]
 80040aa:	9300      	str	r3, [sp, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80040ac:	9a01      	ldr	r2, [sp, #4]
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d144      	bne.n	8004140 <HAL_RTC_GetAlarm+0xa0>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80040b6:	9b02      	ldr	r3, [sp, #8]
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	0052      	lsls	r2, r2, #1
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80040be:	9b03      	ldr	r3, [sp, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	9305      	str	r3, [sp, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80040c6:	9b03      	ldr	r3, [sp, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	045b      	lsls	r3, r3, #17
 80040ce:	0c5b      	lsrs	r3, r3, #17
 80040d0:	9304      	str	r3, [sp, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80040d2:	9b05      	ldr	r3, [sp, #20]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	223f      	movs	r2, #63	; 0x3f
 80040da:	4013      	ands	r3, r2
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	9b02      	ldr	r3, [sp, #8]
 80040e0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80040e2:	9b05      	ldr	r3, [sp, #20]
 80040e4:	0a1b      	lsrs	r3, r3, #8
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	227f      	movs	r2, #127	; 0x7f
 80040ea:	4013      	ands	r3, r2
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	9b02      	ldr	r3, [sp, #8]
 80040f0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80040f2:	9b05      	ldr	r3, [sp, #20]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	227f      	movs	r2, #127	; 0x7f
 80040f8:	4013      	ands	r3, r2
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	9b02      	ldr	r3, [sp, #8]
 80040fe:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004100:	9b05      	ldr	r3, [sp, #20]
 8004102:	0d9b      	lsrs	r3, r3, #22
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2201      	movs	r2, #1
 8004108:	4013      	ands	r3, r2
 800410a:	b2da      	uxtb	r2, r3
 800410c:	9b02      	ldr	r3, [sp, #8]
 800410e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004110:	9b02      	ldr	r3, [sp, #8]
 8004112:	9a04      	ldr	r2, [sp, #16]
 8004114:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004116:	9b05      	ldr	r3, [sp, #20]
 8004118:	0e1b      	lsrs	r3, r3, #24
 800411a:	b2db      	uxtb	r3, r3
 800411c:	223f      	movs	r2, #63	; 0x3f
 800411e:	4013      	ands	r3, r2
 8004120:	b2d9      	uxtb	r1, r3
 8004122:	9b02      	ldr	r3, [sp, #8]
 8004124:	2220      	movs	r2, #32
 8004126:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004128:	9a05      	ldr	r2, [sp, #20]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	05db      	lsls	r3, r3, #23
 800412e:	401a      	ands	r2, r3
 8004130:	9b02      	ldr	r3, [sp, #8]
 8004132:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004134:	9b05      	ldr	r3, [sp, #20]
 8004136:	4a3b      	ldr	r2, [pc, #236]	; (8004224 <HAL_RTC_GetAlarm+0x184>)
 8004138:	401a      	ands	r2, r3
 800413a:	9b02      	ldr	r3, [sp, #8]
 800413c:	615a      	str	r2, [r3, #20]
 800413e:	e043      	b.n	80041c8 <HAL_RTC_GetAlarm+0x128>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004140:	9b02      	ldr	r3, [sp, #8]
 8004142:	2280      	movs	r2, #128	; 0x80
 8004144:	0092      	lsls	r2, r2, #2
 8004146:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004148:	9b03      	ldr	r3, [sp, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	9305      	str	r3, [sp, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004150:	9b03      	ldr	r3, [sp, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	045b      	lsls	r3, r3, #17
 8004158:	0c5b      	lsrs	r3, r3, #17
 800415a:	9304      	str	r3, [sp, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800415c:	9b05      	ldr	r3, [sp, #20]
 800415e:	0c1b      	lsrs	r3, r3, #16
 8004160:	b2db      	uxtb	r3, r3
 8004162:	223f      	movs	r2, #63	; 0x3f
 8004164:	4013      	ands	r3, r2
 8004166:	b2da      	uxtb	r2, r3
 8004168:	9b02      	ldr	r3, [sp, #8]
 800416a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800416c:	9b05      	ldr	r3, [sp, #20]
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	b2db      	uxtb	r3, r3
 8004172:	227f      	movs	r2, #127	; 0x7f
 8004174:	4013      	ands	r3, r2
 8004176:	b2da      	uxtb	r2, r3
 8004178:	9b02      	ldr	r3, [sp, #8]
 800417a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800417c:	9b05      	ldr	r3, [sp, #20]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	227f      	movs	r2, #127	; 0x7f
 8004182:	4013      	ands	r3, r2
 8004184:	b2da      	uxtb	r2, r3
 8004186:	9b02      	ldr	r3, [sp, #8]
 8004188:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800418a:	9b05      	ldr	r3, [sp, #20]
 800418c:	0d9b      	lsrs	r3, r3, #22
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2201      	movs	r2, #1
 8004192:	4013      	ands	r3, r2
 8004194:	b2da      	uxtb	r2, r3
 8004196:	9b02      	ldr	r3, [sp, #8]
 8004198:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800419a:	9b02      	ldr	r3, [sp, #8]
 800419c:	9a04      	ldr	r2, [sp, #16]
 800419e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80041a0:	9b05      	ldr	r3, [sp, #20]
 80041a2:	0e1b      	lsrs	r3, r3, #24
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	223f      	movs	r2, #63	; 0x3f
 80041a8:	4013      	ands	r3, r2
 80041aa:	b2d9      	uxtb	r1, r3
 80041ac:	9b02      	ldr	r3, [sp, #8]
 80041ae:	2220      	movs	r2, #32
 80041b0:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80041b2:	9a05      	ldr	r2, [sp, #20]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	05db      	lsls	r3, r3, #23
 80041b8:	401a      	ands	r2, r3
 80041ba:	9b02      	ldr	r3, [sp, #8]
 80041bc:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80041be:	9b05      	ldr	r3, [sp, #20]
 80041c0:	4a18      	ldr	r2, [pc, #96]	; (8004224 <HAL_RTC_GetAlarm+0x184>)
 80041c2:	401a      	ands	r2, r3
 80041c4:	9b02      	ldr	r3, [sp, #8]
 80041c6:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80041c8:	9b00      	ldr	r3, [sp, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d125      	bne.n	800421a <HAL_RTC_GetAlarm+0x17a>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80041ce:	9b02      	ldr	r3, [sp, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 f939 	bl	800444a <RTC_Bcd2ToByte>
 80041d8:	0003      	movs	r3, r0
 80041da:	001a      	movs	r2, r3
 80041dc:	9b02      	ldr	r3, [sp, #8]
 80041de:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80041e0:	9b02      	ldr	r3, [sp, #8]
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	0018      	movs	r0, r3
 80041e6:	f000 f930 	bl	800444a <RTC_Bcd2ToByte>
 80041ea:	0003      	movs	r3, r0
 80041ec:	001a      	movs	r2, r3
 80041ee:	9b02      	ldr	r3, [sp, #8]
 80041f0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80041f2:	9b02      	ldr	r3, [sp, #8]
 80041f4:	789b      	ldrb	r3, [r3, #2]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 f927 	bl	800444a <RTC_Bcd2ToByte>
 80041fc:	0003      	movs	r3, r0
 80041fe:	001a      	movs	r2, r3
 8004200:	9b02      	ldr	r3, [sp, #8]
 8004202:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004204:	9b02      	ldr	r3, [sp, #8]
 8004206:	2220      	movs	r2, #32
 8004208:	5c9b      	ldrb	r3, [r3, r2]
 800420a:	0018      	movs	r0, r3
 800420c:	f000 f91d 	bl	800444a <RTC_Bcd2ToByte>
 8004210:	0003      	movs	r3, r0
 8004212:	0019      	movs	r1, r3
 8004214:	9b02      	ldr	r3, [sp, #8]
 8004216:	2220      	movs	r2, #32
 8004218:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	0018      	movs	r0, r3
 800421e:	b007      	add	sp, #28
 8004220:	bd00      	pop	{pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	80808080 	.word	0x80808080

08004228 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004228:	b500      	push	{lr}
 800422a:	b083      	sub	sp, #12
 800422c:	9001      	str	r0, [sp, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800422e:	9b01      	ldr	r3, [sp, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	015b      	lsls	r3, r3, #5
 8004238:	4013      	ands	r3, r2
 800423a:	d011      	beq.n	8004260 <HAL_RTC_AlarmIRQHandler+0x38>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800423c:	9b01      	ldr	r3, [sp, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004242:	2201      	movs	r2, #1
 8004244:	4013      	ands	r3, r2
 8004246:	d00b      	beq.n	8004260 <HAL_RTC_AlarmIRQHandler+0x38>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004248:	9b01      	ldr	r3, [sp, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2101      	movs	r1, #1
 8004254:	430a      	orrs	r2, r1
 8004256:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004258:	9b01      	ldr	r3, [sp, #4]
 800425a:	0018      	movs	r0, r3
 800425c:	f7fe ff46 	bl	80030ec <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004260:	9b01      	ldr	r3, [sp, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	019b      	lsls	r3, r3, #6
 800426a:	4013      	ands	r3, r2
 800426c:	d011      	beq.n	8004292 <HAL_RTC_AlarmIRQHandler+0x6a>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800426e:	9b01      	ldr	r3, [sp, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	2202      	movs	r2, #2
 8004276:	4013      	ands	r3, r2
 8004278:	d00b      	beq.n	8004292 <HAL_RTC_AlarmIRQHandler+0x6a>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800427a:	9b01      	ldr	r3, [sp, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004280:	9b01      	ldr	r3, [sp, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2102      	movs	r1, #2
 8004286:	430a      	orrs	r2, r1
 8004288:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800428a:	9b01      	ldr	r3, [sp, #4]
 800428c:	0018      	movs	r0, r3
 800428e:	f001 ff9d 	bl	80061cc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004292:	9b01      	ldr	r3, [sp, #4]
 8004294:	2229      	movs	r2, #41	; 0x29
 8004296:	2101      	movs	r1, #1
 8004298:	5499      	strb	r1, [r3, r2]
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	b003      	add	sp, #12
 800429e:	bd00      	pop	{pc}

080042a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80042a0:	b500      	push	{lr}
 80042a2:	b085      	sub	sp, #20
 80042a4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80042a6:	9b01      	ldr	r3, [sp, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	9b01      	ldr	r3, [sp, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	21a0      	movs	r1, #160	; 0xa0
 80042b2:	438a      	bics	r2, r1
 80042b4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80042b6:	f7fc fbb7 	bl	8000a28 <HAL_GetTick>
 80042ba:	0003      	movs	r3, r0
 80042bc:	9303      	str	r3, [sp, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80042be:	e00a      	b.n	80042d6 <HAL_RTC_WaitForSynchro+0x36>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80042c0:	f7fc fbb2 	bl	8000a28 <HAL_GetTick>
 80042c4:	0002      	movs	r2, r0
 80042c6:	9b03      	ldr	r3, [sp, #12]
 80042c8:	1ad2      	subs	r2, r2, r3
 80042ca:	23fa      	movs	r3, #250	; 0xfa
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d901      	bls.n	80042d6 <HAL_RTC_WaitForSynchro+0x36>
    {
      return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e006      	b.n	80042e4 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80042d6:	9b01      	ldr	r3, [sp, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	4013      	ands	r3, r2
 80042e0:	d0ee      	beq.n	80042c0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	b005      	add	sp, #20
 80042e8:	bd00      	pop	{pc}

080042ea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80042ea:	b500      	push	{lr}
 80042ec:	b085      	sub	sp, #20
 80042ee:	9001      	str	r0, [sp, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80042f0:	230f      	movs	r3, #15
 80042f2:	446b      	add	r3, sp
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80042f8:	9b01      	ldr	r3, [sp, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2240      	movs	r2, #64	; 0x40
 8004300:	4013      	ands	r3, r2
 8004302:	d12e      	bne.n	8004362 <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004304:	9b01      	ldr	r3, [sp, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	9b01      	ldr	r3, [sp, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	430a      	orrs	r2, r1
 8004312:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004314:	f7fc fb88 	bl	8000a28 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	9302      	str	r3, [sp, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800431c:	e016      	b.n	800434c <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800431e:	f7fc fb83 	bl	8000a28 <HAL_GetTick>
 8004322:	0002      	movs	r2, r0
 8004324:	9b02      	ldr	r3, [sp, #8]
 8004326:	1ad2      	subs	r2, r2, r3
 8004328:	230f      	movs	r3, #15
 800432a:	446b      	add	r3, sp
 800432c:	210f      	movs	r1, #15
 800432e:	4469      	add	r1, sp
 8004330:	7809      	ldrb	r1, [r1, #0]
 8004332:	7019      	strb	r1, [r3, #0]
 8004334:	23fa      	movs	r3, #250	; 0xfa
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	429a      	cmp	r2, r3
 800433a:	d907      	bls.n	800434c <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 800433c:	230f      	movs	r3, #15
 800433e:	446b      	add	r3, sp
 8004340:	2203      	movs	r2, #3
 8004342:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004344:	9b01      	ldr	r3, [sp, #4]
 8004346:	2229      	movs	r2, #41	; 0x29
 8004348:	2103      	movs	r1, #3
 800434a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800434c:	9b01      	ldr	r3, [sp, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2240      	movs	r2, #64	; 0x40
 8004354:	4013      	ands	r3, r2
 8004356:	d104      	bne.n	8004362 <RTC_EnterInitMode+0x78>
 8004358:	230f      	movs	r3, #15
 800435a:	446b      	add	r3, sp
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b03      	cmp	r3, #3
 8004360:	d1dd      	bne.n	800431e <RTC_EnterInitMode+0x34>
      }
    }
  }

  return status;
 8004362:	230f      	movs	r3, #15
 8004364:	446b      	add	r3, sp
 8004366:	781b      	ldrb	r3, [r3, #0]
}
 8004368:	0018      	movs	r0, r3
 800436a:	b005      	add	sp, #20
 800436c:	bd00      	pop	{pc}
	...

08004370 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004370:	b500      	push	{lr}
 8004372:	b085      	sub	sp, #20
 8004374:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	230f      	movs	r3, #15
 8004378:	446b      	add	r3, sp
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800437e:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <RTC_ExitInitMode+0x84>)
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <RTC_ExitInitMode+0x84>)
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	438a      	bics	r2, r1
 8004388:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800438a:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <RTC_ExitInitMode+0x84>)
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2220      	movs	r2, #32
 8004390:	4013      	ands	r3, r2
 8004392:	d10e      	bne.n	80043b2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004394:	9b01      	ldr	r3, [sp, #4]
 8004396:	0018      	movs	r0, r3
 8004398:	f7ff ff82 	bl	80042a0 <HAL_RTC_WaitForSynchro>
 800439c:	1e03      	subs	r3, r0, #0
 800439e:	d022      	beq.n	80043e6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043a0:	9b01      	ldr	r3, [sp, #4]
 80043a2:	2229      	movs	r2, #41	; 0x29
 80043a4:	2103      	movs	r1, #3
 80043a6:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80043a8:	230f      	movs	r3, #15
 80043aa:	446b      	add	r3, sp
 80043ac:	2203      	movs	r2, #3
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	e019      	b.n	80043e6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <RTC_ExitInitMode+0x84>)
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <RTC_ExitInitMode+0x84>)
 80043b8:	2120      	movs	r1, #32
 80043ba:	438a      	bics	r2, r1
 80043bc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043be:	9b01      	ldr	r3, [sp, #4]
 80043c0:	0018      	movs	r0, r3
 80043c2:	f7ff ff6d 	bl	80042a0 <HAL_RTC_WaitForSynchro>
 80043c6:	1e03      	subs	r3, r0, #0
 80043c8:	d007      	beq.n	80043da <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043ca:	9b01      	ldr	r3, [sp, #4]
 80043cc:	2229      	movs	r2, #41	; 0x29
 80043ce:	2103      	movs	r1, #3
 80043d0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80043d2:	230f      	movs	r3, #15
 80043d4:	446b      	add	r3, sp
 80043d6:	2203      	movs	r2, #3
 80043d8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <RTC_ExitInitMode+0x84>)
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <RTC_ExitInitMode+0x84>)
 80043e0:	2120      	movs	r1, #32
 80043e2:	430a      	orrs	r2, r1
 80043e4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80043e6:	230f      	movs	r3, #15
 80043e8:	446b      	add	r3, sp
 80043ea:	781b      	ldrb	r3, [r3, #0]
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	b005      	add	sp, #20
 80043f0:	bd00      	pop	{pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	40002800 	.word	0x40002800

080043f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043f8:	b084      	sub	sp, #16
 80043fa:	0002      	movs	r2, r0
 80043fc:	466b      	mov	r3, sp
 80043fe:	3307      	adds	r3, #7
 8004400:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	9303      	str	r3, [sp, #12]
  uint8_t Param = Value;
 8004406:	230b      	movs	r3, #11
 8004408:	446b      	add	r3, sp
 800440a:	466a      	mov	r2, sp
 800440c:	3207      	adds	r2, #7
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004412:	e009      	b.n	8004428 <RTC_ByteToBcd2+0x30>
  {
    bcdhigh++;
 8004414:	9b03      	ldr	r3, [sp, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	9303      	str	r3, [sp, #12]
    Param -= 10U;
 800441a:	230b      	movs	r3, #11
 800441c:	446b      	add	r3, sp
 800441e:	220b      	movs	r2, #11
 8004420:	446a      	add	r2, sp
 8004422:	7812      	ldrb	r2, [r2, #0]
 8004424:	3a0a      	subs	r2, #10
 8004426:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004428:	230b      	movs	r3, #11
 800442a:	446b      	add	r3, sp
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b09      	cmp	r3, #9
 8004430:	d8f0      	bhi.n	8004414 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004432:	9b03      	ldr	r3, [sp, #12]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	b2da      	uxtb	r2, r3
 800443a:	230b      	movs	r3, #11
 800443c:	446b      	add	r3, sp
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	b2db      	uxtb	r3, r3
}
 8004444:	0018      	movs	r0, r3
 8004446:	b004      	add	sp, #16
 8004448:	4770      	bx	lr

0800444a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800444a:	b084      	sub	sp, #16
 800444c:	0002      	movs	r2, r0
 800444e:	466b      	mov	r3, sp
 8004450:	3307      	adds	r3, #7
 8004452:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004454:	466b      	mov	r3, sp
 8004456:	3307      	adds	r3, #7
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	b2db      	uxtb	r3, r3
 800445e:	001a      	movs	r2, r3
 8004460:	0013      	movs	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	189b      	adds	r3, r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	9303      	str	r3, [sp, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800446a:	9b03      	ldr	r3, [sp, #12]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	466b      	mov	r3, sp
 8004470:	3307      	adds	r3, #7
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	210f      	movs	r1, #15
 8004476:	400b      	ands	r3, r1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	18d3      	adds	r3, r2, r3
 800447c:	b2db      	uxtb	r3, r3
}
 800447e:	0018      	movs	r0, r3
 8004480:	b004      	add	sp, #16
 8004482:	4770      	bx	lr

08004484 <HAL_PWR_EnableBkUpAccess>:
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_PWR_EnableBkUpAccess+0x14>)
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	0049      	lsls	r1, r1, #1
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	4770      	bx	lr
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	40007000 	.word	0x40007000

0800449c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800449c:	b500      	push	{lr}
 800449e:	b085      	sub	sp, #20
 80044a0:	9001      	str	r0, [sp, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80044a2:	4b19      	ldr	r3, [pc, #100]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a19      	ldr	r2, [pc, #100]	; (800450c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	0019      	movs	r1, r3
 80044ac:	4b16      	ldr	r3, [pc, #88]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 80044ae:	9a01      	ldr	r2, [sp, #4]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044b4:	9a01      	ldr	r2, [sp, #4]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d11f      	bne.n	80044fe <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80044be:	4b14      	ldr	r3, [pc, #80]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	0013      	movs	r3, r2
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	189b      	adds	r3, r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	4912      	ldr	r1, [pc, #72]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7fb fdf5 	bl	80000bc <__udivsi3>
 80044d2:	0003      	movs	r3, r0
 80044d4:	3301      	adds	r3, #1
 80044d6:	9303      	str	r3, [sp, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044d8:	e008      	b.n	80044ec <HAL_PWREx_ControlVoltageScaling+0x50>
    {
      if (wait_loop_index != 0U)
 80044da:	9b03      	ldr	r3, [sp, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044e0:	9b03      	ldr	r3, [sp, #12]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	9303      	str	r3, [sp, #12]
 80044e6:	e001      	b.n	80044ec <HAL_PWREx_ControlVoltageScaling+0x50>
      }
      else
      {
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e009      	b.n	8004500 <HAL_PWREx_ControlVoltageScaling+0x64>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	401a      	ands	r2, r3
 80044f6:	2380      	movs	r3, #128	; 0x80
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d0ed      	beq.n	80044da <HAL_PWREx_ControlVoltageScaling+0x3e>
      }
    }
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	0018      	movs	r0, r3
 8004502:	b005      	add	sp, #20
 8004504:	bd00      	pop	{pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	40007000 	.word	0x40007000
 800450c:	fffff9ff 	.word	0xfffff9ff
 8004510:	20000000 	.word	0x20000000
 8004514:	000f4240 	.word	0x000f4240

08004518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004518:	b500      	push	{lr}
 800451a:	b087      	sub	sp, #28
 800451c:	9001      	str	r0, [sp, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800451e:	2313      	movs	r3, #19
 8004520:	446b      	add	r3, sp
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004526:	2312      	movs	r3, #18
 8004528:	446b      	add	r3, sp
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800452e:	9b01      	ldr	r3, [sp, #4]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	029b      	lsls	r3, r3, #10
 8004536:	4013      	ands	r3, r2
 8004538:	d100      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x24>
 800453a:	e0ae      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800453c:	2311      	movs	r3, #17
 800453e:	446b      	add	r3, sp
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004544:	4b47      	ldr	r3, [pc, #284]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	055b      	lsls	r3, r3, #21
 800454c:	4013      	ands	r3, r2
 800454e:	d111      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004550:	4b44      	ldr	r3, [pc, #272]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004554:	4b43      	ldr	r3, [pc, #268]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	0549      	lsls	r1, r1, #21
 800455a:	430a      	orrs	r2, r1
 800455c:	63da      	str	r2, [r3, #60]	; 0x3c
 800455e:	4b41      	ldr	r3, [pc, #260]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	055b      	lsls	r3, r3, #21
 8004566:	4013      	ands	r3, r2
 8004568:	9302      	str	r3, [sp, #8]
 800456a:	9b02      	ldr	r3, [sp, #8]
      pwrclkchanged = SET;
 800456c:	2311      	movs	r3, #17
 800456e:	446b      	add	r3, sp
 8004570:	2201      	movs	r2, #1
 8004572:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004574:	4b3c      	ldr	r3, [pc, #240]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	0049      	lsls	r1, r1, #1
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004582:	f7fc fa51 	bl	8000a28 <HAL_GetTick>
 8004586:	0003      	movs	r3, r0
 8004588:	9303      	str	r3, [sp, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800458a:	e00b      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458c:	f7fc fa4c 	bl	8000a28 <HAL_GetTick>
 8004590:	0002      	movs	r2, r0
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d904      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800459a:	2313      	movs	r3, #19
 800459c:	446b      	add	r3, sp
 800459e:	2203      	movs	r2, #3
 80045a0:	701a      	strb	r2, [r3, #0]
        break;
 80045a2:	e005      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045a4:	4b30      	ldr	r3, [pc, #192]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4013      	ands	r3, r2
 80045ae:	d0ed      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80045b0:	2313      	movs	r3, #19
 80045b2:	446b      	add	r3, sp
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d15e      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ba:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045be:	23c0      	movs	r3, #192	; 0xc0
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4013      	ands	r3, r2
 80045c4:	9305      	str	r3, [sp, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045c6:	9b05      	ldr	r3, [sp, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d019      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80045cc:	9b01      	ldr	r3, [sp, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	9a05      	ldr	r2, [sp, #20]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d014      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045da:	4a24      	ldr	r2, [pc, #144]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80045dc:	4013      	ands	r3, r2
 80045de:	9305      	str	r3, [sp, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045e0:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045e4:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045e6:	2180      	movs	r1, #128	; 0x80
 80045e8:	0249      	lsls	r1, r1, #9
 80045ea:	430a      	orrs	r2, r1
 80045ec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045f2:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045f4:	491e      	ldr	r1, [pc, #120]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80045f6:	400a      	ands	r2, r1
 80045f8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045fc:	9a05      	ldr	r2, [sp, #20]
 80045fe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004600:	9b05      	ldr	r3, [sp, #20]
 8004602:	2201      	movs	r2, #1
 8004604:	4013      	ands	r3, r2
 8004606:	d016      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fc fa0e 	bl	8000a28 <HAL_GetTick>
 800460c:	0003      	movs	r3, r0
 800460e:	9303      	str	r3, [sp, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004610:	e00c      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fc fa09 	bl	8000a28 <HAL_GetTick>
 8004616:	0002      	movs	r2, r0
 8004618:	9b03      	ldr	r3, [sp, #12]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	4a15      	ldr	r2, [pc, #84]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d904      	bls.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004622:	2313      	movs	r3, #19
 8004624:	446b      	add	r3, sp
 8004626:	2203      	movs	r2, #3
 8004628:	701a      	strb	r2, [r3, #0]
            break;
 800462a:	e004      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800462e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004630:	2202      	movs	r2, #2
 8004632:	4013      	ands	r3, r2
 8004634:	d0ed      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004636:	2313      	movs	r3, #19
 8004638:	446b      	add	r3, sp
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004640:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004644:	4a09      	ldr	r2, [pc, #36]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004646:	4013      	ands	r3, r2
 8004648:	0019      	movs	r1, r3
 800464a:	9b01      	ldr	r3, [sp, #4]
 800464c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004650:	430a      	orrs	r2, r1
 8004652:	65da      	str	r2, [r3, #92]	; 0x5c
 8004654:	e016      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004656:	2312      	movs	r3, #18
 8004658:	446b      	add	r3, sp
 800465a:	2213      	movs	r2, #19
 800465c:	446a      	add	r2, sp
 800465e:	7812      	ldrb	r2, [r2, #0]
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	e00f      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004664:	40021000 	.word	0x40021000
 8004668:	40007000 	.word	0x40007000
 800466c:	fffffcff 	.word	0xfffffcff
 8004670:	fffeffff 	.word	0xfffeffff
 8004674:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	2312      	movs	r3, #18
 800467a:	446b      	add	r3, sp
 800467c:	2213      	movs	r2, #19
 800467e:	446a      	add	r2, sp
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004684:	2311      	movs	r3, #17
 8004686:	446b      	add	r3, sp
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d105      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468e:	4bb6      	ldr	r3, [pc, #728]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004692:	4bb5      	ldr	r3, [pc, #724]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004694:	49b5      	ldr	r1, [pc, #724]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004696:	400a      	ands	r2, r1
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800469a:	9b01      	ldr	r3, [sp, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2201      	movs	r2, #1
 80046a0:	4013      	ands	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046a4:	4bb0      	ldr	r3, [pc, #704]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a8:	2203      	movs	r2, #3
 80046aa:	4393      	bics	r3, r2
 80046ac:	0019      	movs	r1, r3
 80046ae:	9b01      	ldr	r3, [sp, #4]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4bad      	ldr	r3, [pc, #692]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046b4:	430a      	orrs	r2, r1
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b8:	9b01      	ldr	r3, [sp, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2202      	movs	r2, #2
 80046be:	4013      	ands	r3, r2
 80046c0:	d009      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046c2:	4ba9      	ldr	r3, [pc, #676]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	220c      	movs	r2, #12
 80046c8:	4393      	bics	r3, r2
 80046ca:	0019      	movs	r1, r3
 80046cc:	9b01      	ldr	r3, [sp, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	4ba5      	ldr	r3, [pc, #660]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046d2:	430a      	orrs	r2, r1
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2204      	movs	r2, #4
 80046dc:	4013      	ands	r3, r2
 80046de:	d009      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046e0:	4ba1      	ldr	r3, [pc, #644]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e4:	2230      	movs	r2, #48	; 0x30
 80046e6:	4393      	bics	r3, r2
 80046e8:	0019      	movs	r1, r3
 80046ea:	9b01      	ldr	r3, [sp, #4]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	4b9e      	ldr	r3, [pc, #632]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046f0:	430a      	orrs	r2, r1
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2210      	movs	r2, #16
 80046fa:	4013      	ands	r3, r2
 80046fc:	d009      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046fe:	4b9a      	ldr	r3, [pc, #616]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	4a9b      	ldr	r2, [pc, #620]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004704:	4013      	ands	r3, r2
 8004706:	0019      	movs	r1, r3
 8004708:	9b01      	ldr	r3, [sp, #4]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	4b96      	ldr	r3, [pc, #600]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800470e:	430a      	orrs	r2, r1
 8004710:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004712:	9b01      	ldr	r3, [sp, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	2380      	movs	r3, #128	; 0x80
 8004718:	015b      	lsls	r3, r3, #5
 800471a:	4013      	ands	r3, r2
 800471c:	d009      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800471e:	4b92      	ldr	r3, [pc, #584]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	4a94      	ldr	r2, [pc, #592]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004724:	4013      	ands	r3, r2
 8004726:	0019      	movs	r1, r3
 8004728:	9b01      	ldr	r3, [sp, #4]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	4b8e      	ldr	r3, [pc, #568]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800472e:	430a      	orrs	r2, r1
 8004730:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004732:	9b01      	ldr	r3, [sp, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4013      	ands	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800473e:	4b8a      	ldr	r3, [pc, #552]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004742:	4a8d      	ldr	r2, [pc, #564]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004744:	4013      	ands	r3, r2
 8004746:	0019      	movs	r1, r3
 8004748:	9b01      	ldr	r3, [sp, #4]
 800474a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474c:	4b86      	ldr	r3, [pc, #536]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800474e:	430a      	orrs	r2, r1
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004752:	9b01      	ldr	r3, [sp, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4013      	ands	r3, r2
 800475c:	d009      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800475e:	4b82      	ldr	r3, [pc, #520]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	4a86      	ldr	r2, [pc, #536]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004764:	4013      	ands	r3, r2
 8004766:	0019      	movs	r1, r3
 8004768:	9b01      	ldr	r3, [sp, #4]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	4b7e      	ldr	r3, [pc, #504]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800476e:	430a      	orrs	r2, r1
 8004770:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004772:	9b01      	ldr	r3, [sp, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2220      	movs	r2, #32
 8004778:	4013      	ands	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800477c:	4b7a      	ldr	r3, [pc, #488]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800477e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004780:	4a7f      	ldr	r2, [pc, #508]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004782:	4013      	ands	r3, r2
 8004784:	0019      	movs	r1, r3
 8004786:	9b01      	ldr	r3, [sp, #4]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	4b77      	ldr	r3, [pc, #476]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800478c:	430a      	orrs	r2, r1
 800478e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004790:	9b01      	ldr	r3, [sp, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2240      	movs	r2, #64	; 0x40
 8004796:	4013      	ands	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800479a:	4b73      	ldr	r3, [pc, #460]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	4a79      	ldr	r2, [pc, #484]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	0019      	movs	r1, r3
 80047a4:	9b01      	ldr	r3, [sp, #4]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	4b6f      	ldr	r3, [pc, #444]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047aa:	430a      	orrs	r2, r1
 80047ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	01db      	lsls	r3, r3, #7
 80047b6:	4013      	ands	r3, r2
 80047b8:	d015      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047ba:	4b6b      	ldr	r3, [pc, #428]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	0899      	lsrs	r1, r3, #2
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c6:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047c8:	430a      	orrs	r2, r1
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80047cc:	9b01      	ldr	r3, [sp, #4]
 80047ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	05db      	lsls	r3, r3, #23
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d106      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047d8:	4b63      	ldr	r3, [pc, #396]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	4b62      	ldr	r3, [pc, #392]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047de:	2180      	movs	r1, #128	; 0x80
 80047e0:	0249      	lsls	r1, r1, #9
 80047e2:	430a      	orrs	r2, r1
 80047e4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047e6:	9b01      	ldr	r3, [sp, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	031b      	lsls	r3, r3, #12
 80047ee:	4013      	ands	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047f2:	4b5d      	ldr	r3, [pc, #372]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	4393      	bics	r3, r2
 80047fa:	0019      	movs	r1, r3
 80047fc:	9b01      	ldr	r3, [sp, #4]
 80047fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004802:	430a      	orrs	r2, r1
 8004804:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004806:	9b01      	ldr	r3, [sp, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	039b      	lsls	r3, r3, #14
 800480e:	4013      	ands	r3, r2
 8004810:	d016      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004812:	4b55      	ldr	r3, [pc, #340]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	4a5c      	ldr	r2, [pc, #368]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004818:	4013      	ands	r3, r2
 800481a:	0019      	movs	r1, r3
 800481c:	9b01      	ldr	r3, [sp, #4]
 800481e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004820:	4b51      	ldr	r3, [pc, #324]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004822:	430a      	orrs	r2, r1
 8004824:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004826:	9b01      	ldr	r3, [sp, #4]
 8004828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	03db      	lsls	r3, r3, #15
 800482e:	429a      	cmp	r2, r3
 8004830:	d106      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004832:	4b4d      	ldr	r3, [pc, #308]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	4b4c      	ldr	r3, [pc, #304]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	0449      	lsls	r1, r1, #17
 800483c:	430a      	orrs	r2, r1
 800483e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004840:	9b01      	ldr	r3, [sp, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	03db      	lsls	r3, r3, #15
 8004848:	4013      	ands	r3, r2
 800484a:	d016      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800484c:	4b46      	ldr	r3, [pc, #280]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	4a4e      	ldr	r2, [pc, #312]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004852:	4013      	ands	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	9b01      	ldr	r3, [sp, #4]
 8004858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800485a:	4b43      	ldr	r3, [pc, #268]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800485c:	430a      	orrs	r2, r1
 800485e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004860:	9b01      	ldr	r3, [sp, #4]
 8004862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	045b      	lsls	r3, r3, #17
 8004868:	429a      	cmp	r2, r3
 800486a:	d106      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800486c:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	4b3d      	ldr	r3, [pc, #244]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	0449      	lsls	r1, r1, #17
 8004876:	430a      	orrs	r2, r1
 8004878:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800487a:	9b01      	ldr	r3, [sp, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	4013      	ands	r3, r2
 8004884:	d014      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004886:	4b38      	ldr	r3, [pc, #224]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	2203      	movs	r2, #3
 800488c:	4393      	bics	r3, r2
 800488e:	0019      	movs	r1, r3
 8004890:	9b01      	ldr	r3, [sp, #4]
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	4b34      	ldr	r3, [pc, #208]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004896:	430a      	orrs	r2, r1
 8004898:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800489a:	9b01      	ldr	r3, [sp, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d106      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048a2:	4b31      	ldr	r3, [pc, #196]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	0249      	lsls	r1, r1, #9
 80048ac:	430a      	orrs	r2, r1
 80048ae:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80048b0:	9b01      	ldr	r3, [sp, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	019b      	lsls	r3, r3, #6
 80048b8:	4013      	ands	r3, r2
 80048ba:	d014      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80048bc:	4b2a      	ldr	r3, [pc, #168]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	220c      	movs	r2, #12
 80048c2:	4393      	bics	r3, r2
 80048c4:	0019      	movs	r1, r3
 80048c6:	9b01      	ldr	r3, [sp, #4]
 80048c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ca:	4b27      	ldr	r3, [pc, #156]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048cc:	430a      	orrs	r2, r1
 80048ce:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80048d0:	9b01      	ldr	r3, [sp, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d106      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048d8:	4b23      	ldr	r3, [pc, #140]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	0249      	lsls	r1, r1, #9
 80048e2:	430a      	orrs	r2, r1
 80048e4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048e6:	9b01      	ldr	r3, [sp, #4]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	045b      	lsls	r3, r3, #17
 80048ee:	4013      	ands	r3, r2
 80048f0:	d016      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	4a22      	ldr	r2, [pc, #136]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	0019      	movs	r1, r3
 80048fc:	9b01      	ldr	r3, [sp, #4]
 80048fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004902:	430a      	orrs	r2, r1
 8004904:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004906:	9b01      	ldr	r3, [sp, #4]
 8004908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	019b      	lsls	r3, r3, #6
 800490e:	429a      	cmp	r2, r3
 8004910:	d106      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	0449      	lsls	r1, r1, #17
 800491c:	430a      	orrs	r2, r1
 800491e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004920:	9b01      	ldr	r3, [sp, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	2380      	movs	r3, #128	; 0x80
 8004926:	049b      	lsls	r3, r3, #18
 8004928:	4013      	ands	r3, r2
 800492a:	d016      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	4a10      	ldr	r2, [pc, #64]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004932:	4013      	ands	r3, r2
 8004934:	0019      	movs	r1, r3
 8004936:	9b01      	ldr	r3, [sp, #4]
 8004938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800493a:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800493c:	430a      	orrs	r2, r1
 800493e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004940:	9b01      	ldr	r3, [sp, #4]
 8004942:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	429a      	cmp	r2, r3
 800494a:	d106      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	0449      	lsls	r1, r1, #17
 8004956:	430a      	orrs	r2, r1
 8004958:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800495a:	2312      	movs	r3, #18
 800495c:	446b      	add	r3, sp
 800495e:	781b      	ldrb	r3, [r3, #0]
}
 8004960:	0018      	movs	r0, r3
 8004962:	b007      	add	sp, #28
 8004964:	bd00      	pop	{pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	40021000 	.word	0x40021000
 800496c:	efffffff 	.word	0xefffffff
 8004970:	fffff3ff 	.word	0xfffff3ff
 8004974:	fffffcff 	.word	0xfffffcff
 8004978:	fff3ffff 	.word	0xfff3ffff
 800497c:	ffcfffff 	.word	0xffcfffff
 8004980:	ffffcfff 	.word	0xffffcfff
 8004984:	ffff3fff 	.word	0xffff3fff
 8004988:	ffbfffff 	.word	0xffbfffff
 800498c:	feffffff 	.word	0xfeffffff

08004990 <HEL_LCD_Init>:
* @param    hlcd This is a pointer to a structure of the type LCD_HandleTypeDef, this structure contains all the lcd GPIO information for initialization.
* 
* @return   void
*/
void HEL_LCD_Init( LCD_HandleTypeDef *hlcd )
{
 8004990:	b500      	push	{lr}
 8004992:	b083      	sub	sp, #12
 8004994:	9001      	str	r0, [sp, #4]
  HEL_LCD_MspInit(hlcd);  
 8004996:	9b01      	ldr	r3, [sp, #4]
 8004998:	0018      	movs	r0, r3
 800499a:	f7fb ff1f 	bl	80007dc <HEL_LCD_MspInit>
  HAL_GPIO_WritePin(hlcd->BklPort, hlcd->BklPin, SET); /* Turn on the backlight */
 800499e:	9b01      	ldr	r3, [sp, #4]
 80049a0:	69d8      	ldr	r0, [r3, #28]
 80049a2:	9b01      	ldr	r3, [sp, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2201      	movs	r2, #1
 80049aa:	0019      	movs	r1, r3
 80049ac:	f7fc ffc6 	bl	800193c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(hlcd->CsPort, hlcd->CsPin, SET);   
 80049b0:	9b01      	ldr	r3, [sp, #4]
 80049b2:	6958      	ldr	r0, [r3, #20]
 80049b4:	9b01      	ldr	r3, [sp, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2201      	movs	r2, #1
 80049bc:	0019      	movs	r1, r3
 80049be:	f7fc ffbd 	bl	800193c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(hlcd->RstPort, hlcd->RstPin,RESET);
 80049c2:	9b01      	ldr	r3, [sp, #4]
 80049c4:	6858      	ldr	r0, [r3, #4]
 80049c6:	9b01      	ldr	r3, [sp, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2200      	movs	r2, #0
 80049ce:	0019      	movs	r1, r3
 80049d0:	f7fc ffb4 	bl	800193c <HAL_GPIO_WritePin>
  HAL_Delay( 2 );
 80049d4:	2002      	movs	r0, #2
 80049d6:	f7fc f82d 	bl	8000a34 <HAL_Delay>
  HAL_GPIO_WritePin(hlcd->RstPort, hlcd->RstPin, SET);
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	6858      	ldr	r0, [r3, #4]
 80049de:	9b01      	ldr	r3, [sp, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2201      	movs	r2, #1
 80049e6:	0019      	movs	r1, r3
 80049e8:	f7fc ffa8 	bl	800193c <HAL_GPIO_WritePin>
  HAL_Delay( 20 );
 80049ec:	2014      	movs	r0, #20
 80049ee:	f7fc f821 	bl	8000a34 <HAL_Delay>
  HEL_LCD_Command(hlcd, LCD_FUNCTIONSET_ | LCD_8BITMODE_);                                           /* LCD Wake Up*/
 80049f2:	9b01      	ldr	r3, [sp, #4]
 80049f4:	2130      	movs	r1, #48	; 0x30
 80049f6:	0018      	movs	r0, r3
 80049f8:	f000 f83e 	bl	8004a78 <HEL_LCD_Command>
  HAL_Delay(2);
 80049fc:	2002      	movs	r0, #2
 80049fe:	f7fc f819 	bl	8000a34 <HAL_Delay>
  HEL_LCD_Command(hlcd,LCD_FUNCTIONSET_ | LCD_8BITMODE_);                                            /* LCD Wake Up*/
 8004a02:	9b01      	ldr	r3, [sp, #4]
 8004a04:	2130      	movs	r1, #48	; 0x30
 8004a06:	0018      	movs	r0, r3
 8004a08:	f000 f836 	bl	8004a78 <HEL_LCD_Command>
  HEL_LCD_Command(hlcd,LCD_FUNCTIONSET_ | LCD_8BITMODE_);                                            /* LCD Wake Up*/
 8004a0c:	9b01      	ldr	r3, [sp, #4]
 8004a0e:	2130      	movs	r1, #48	; 0x30
 8004a10:	0018      	movs	r0, r3
 8004a12:	f000 f831 	bl	8004a78 <HEL_LCD_Command>
  HEL_LCD_Command(hlcd,LCD_FUNCTIONSET_ | LCD_8BITMODE_ | LCD_2LINE_ | LCD_INSTRUCTIONTABLE_1_);     /* Lcd in 8 bit mode and 2*16 lines */
 8004a16:	9b01      	ldr	r3, [sp, #4]
 8004a18:	2139      	movs	r1, #57	; 0x39
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 f82c 	bl	8004a78 <HEL_LCD_Command>
  HEL_LCD_Command(hlcd,LCD_BIASINTOSCSET_ | LCD_BIAS_1_5_ | LCD_OSC_347HZ_);                         /* Set the lcd to work with the internal oscillator at 347hz*/ 
 8004a20:	9b01      	ldr	r3, [sp, #4]
 8004a22:	2117      	movs	r1, #23
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 f827 	bl	8004a78 <HEL_LCD_Command>
  HEL_LCD_Command(hlcd,LCD_POWICONCONTRASTHSET_ | LCD_BOOST_ON_ | LCD_CONTRAST_C5_ON_);              
 8004a2a:	9b01      	ldr	r3, [sp, #4]
 8004a2c:	2156      	movs	r1, #86	; 0x56
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 f822 	bl	8004a78 <HEL_LCD_Command>
  HEL_LCD_Command(hlcd,LCD_FOLLOWERCONTROLSET_ | LCD_FOLLOWER_ON_ | LCD_RAB_2_50_);                   
 8004a34:	9b01      	ldr	r3, [sp, #4]
 8004a36:	216d      	movs	r1, #109	; 0x6d
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f000 f81d 	bl	8004a78 <HEL_LCD_Command>
  HAL_Delay(200);
 8004a3e:	20c8      	movs	r0, #200	; 0xc8
 8004a40:	f7fb fff8 	bl	8000a34 <HAL_Delay>
  HEL_LCD_Command(hlcd,LCD_CONTRASTSET_);                                                            /* Set lcd contrast */
 8004a44:	9b01      	ldr	r3, [sp, #4]
 8004a46:	2170      	movs	r1, #112	; 0x70
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f000 f815 	bl	8004a78 <HEL_LCD_Command>
  HEL_LCD_Command(hlcd,LCD_DISPLAYCONTROLSET_ | LCD_DISPLAYON_ | LCD_CURSORON_| LCD_BLINKOFF_);      /* Lcd display on, Cursor on, Blink off*/
 8004a4e:	9b01      	ldr	r3, [sp, #4]
 8004a50:	210e      	movs	r1, #14
 8004a52:	0018      	movs	r0, r3
 8004a54:	f000 f810 	bl	8004a78 <HEL_LCD_Command>
  HEL_LCD_Command(hlcd,LCD_ENTRYMODESET_ | LCD_ENTRYLEFT_ | LCD_ENTRYSHIFTDECREMENT_);               /* Lcd shit from left to right */
 8004a58:	9b01      	ldr	r3, [sp, #4]
 8004a5a:	2106      	movs	r1, #6
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f000 f80b 	bl	8004a78 <HEL_LCD_Command>
  HEL_LCD_Command(hlcd,LCD_CLEARDISPLAY_);                                                           /* Clear the display */
 8004a62:	9b01      	ldr	r3, [sp, #4]
 8004a64:	2101      	movs	r1, #1
 8004a66:	0018      	movs	r0, r3
 8004a68:	f000 f806 	bl	8004a78 <HEL_LCD_Command>
  HAL_Delay( 1 );
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f7fb ffe1 	bl	8000a34 <HAL_Delay>
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	b003      	add	sp, #12
 8004a76:	bd00      	pop	{pc}

08004a78 <HEL_LCD_Command>:
* @param    hlcd This is a pointer to a structure of the type LCD_HandleTypeDef, this structure contains the spi instance to use and the gpio configuration of the lcd.
* @param    cmd  This is the command to send to the lcd 
* @return   void
*/
void HEL_LCD_Command( LCD_HandleTypeDef *hlcd, uint8_t cmd )
{
 8004a78:	b500      	push	{lr}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	9001      	str	r0, [sp, #4]
 8004a7e:	000a      	movs	r2, r1
 8004a80:	466b      	mov	r3, sp
 8004a82:	3303      	adds	r3, #3
 8004a84:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(hlcd->RsPort, hlcd->RsPin, RESET);  /*HEL_LCD_Command mode*/
 8004a86:	9b01      	ldr	r3, [sp, #4]
 8004a88:	68d8      	ldr	r0, [r3, #12]
 8004a8a:	9b01      	ldr	r3, [sp, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2200      	movs	r2, #0
 8004a92:	0019      	movs	r1, r3
 8004a94:	f7fc ff52 	bl	800193c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(hlcd->CsPort, hlcd->CsPin, RESET);  /*chip select on*/
 8004a98:	9b01      	ldr	r3, [sp, #4]
 8004a9a:	6958      	ldr	r0, [r3, #20]
 8004a9c:	9b01      	ldr	r3, [sp, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	f7fc ff49 	bl	800193c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hlcd->SpiHandler, &cmd, 1, 1000 );   /*Send the command thought the SPI interface */
 8004aaa:	9b01      	ldr	r3, [sp, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	23fa      	movs	r3, #250	; 0xfa
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	466a      	mov	r2, sp
 8004ab4:	1cd1      	adds	r1, r2, #3
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f000 f9c4 	bl	8004e44 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(hlcd->CsPort, hlcd->CsPin, SET);    /*chip select off*/
 8004abc:	9b01      	ldr	r3, [sp, #4]
 8004abe:	6958      	ldr	r0, [r3, #20]
 8004ac0:	9b01      	ldr	r3, [sp, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	0019      	movs	r1, r3
 8004aca:	f7fc ff37 	bl	800193c <HAL_GPIO_WritePin>
  Delay_us(30);
 8004ace:	201e      	movs	r0, #30
 8004ad0:	f000 f8e2 	bl	8004c98 <Delay_us>
}
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	b003      	add	sp, #12
 8004ad8:	bd00      	pop	{pc}

08004ada <HEL_LCD_Data>:
* @param    hlcd This is a pointer to a structure of the type LCD_HandleTypeDef, this structure contains the spi instance to use and the gpio configuration of the lcd.
* @param    data  This is the character to send to the lcd 
* @return   void
*/
void HEL_LCD_Data( LCD_HandleTypeDef *hlcd, uint8_t data ) /* cppcheck-suppress misra-c2012-8.7; Bug with weekly linked fuctions this is a false/positive */
{
 8004ada:	b500      	push	{lr}
 8004adc:	b083      	sub	sp, #12
 8004ade:	9001      	str	r0, [sp, #4]
 8004ae0:	000a      	movs	r2, r1
 8004ae2:	466b      	mov	r3, sp
 8004ae4:	3303      	adds	r3, #3
 8004ae6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(hlcd->RsPort, hlcd->RsPin, SET);    /* data mode*/
 8004ae8:	9b01      	ldr	r3, [sp, #4]
 8004aea:	68d8      	ldr	r0, [r3, #12]
 8004aec:	9b01      	ldr	r3, [sp, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2201      	movs	r2, #1
 8004af4:	0019      	movs	r1, r3
 8004af6:	f7fc ff21 	bl	800193c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hlcd->CsPort, hlcd->CsPin, RESET);  /* chip select on*/
 8004afa:	9b01      	ldr	r3, [sp, #4]
 8004afc:	6958      	ldr	r0, [r3, #20]
 8004afe:	9b01      	ldr	r3, [sp, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2200      	movs	r2, #0
 8004b06:	0019      	movs	r1, r3
 8004b08:	f7fc ff18 	bl	800193c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hlcd->SpiHandler, &data, 1, 1000 );  /* send the character trough the spi interface */
 8004b0c:	9b01      	ldr	r3, [sp, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	23fa      	movs	r3, #250	; 0xfa
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	466a      	mov	r2, sp
 8004b16:	1cd1      	adds	r1, r2, #3
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f000 f993 	bl	8004e44 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(hlcd->CsPort, hlcd->CsPin, SET);    /*chip select off*/
 8004b1e:	9b01      	ldr	r3, [sp, #4]
 8004b20:	6958      	ldr	r0, [r3, #20]
 8004b22:	9b01      	ldr	r3, [sp, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2201      	movs	r2, #1
 8004b2a:	0019      	movs	r1, r3
 8004b2c:	f7fc ff06 	bl	800193c <HAL_GPIO_WritePin>
    Delay_us( 30 );
 8004b30:	201e      	movs	r0, #30
 8004b32:	f000 f8b1 	bl	8004c98 <Delay_us>
}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	b003      	add	sp, #12
 8004b3a:	bd00      	pop	{pc}

08004b3c <HEL_LCD_String>:
* @param    hlcd  This is a pointer to a structure of the type LCD_HandleTypeDef, this structure contains the spi instance to use and the gpio configuration of the lcd.
* @param    str   This is a pointer to a string to send to the lcd. 
* @return   void
*/ 
void HEL_LCD_String( LCD_HandleTypeDef *hlcd, const char *str )
{
 8004b3c:	b500      	push	{lr}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	9001      	str	r0, [sp, #4]
 8004b42:	9100      	str	r1, [sp, #0]
  for (int i=0; i < (int)strlen(str); i++ )       /* We send character by character until the counter reach the length of the string */
 8004b44:	2300      	movs	r3, #0
 8004b46:	9303      	str	r3, [sp, #12]
 8004b48:	e00d      	b.n	8004b66 <HEL_LCD_String+0x2a>
  {
    HEL_LCD_Data(hlcd,str[i]);                    /* Send the character to the lcd */
 8004b4a:	9b03      	ldr	r3, [sp, #12]
 8004b4c:	9a00      	ldr	r2, [sp, #0]
 8004b4e:	18d3      	adds	r3, r2, r3
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	b25b      	sxtb	r3, r3
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	9b01      	ldr	r3, [sp, #4]
 8004b58:	0011      	movs	r1, r2
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7ff ffbd 	bl	8004ada <HEL_LCD_Data>
  for (int i=0; i < (int)strlen(str); i++ )       /* We send character by character until the counter reach the length of the string */
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	9303      	str	r3, [sp, #12]
 8004b66:	9b00      	ldr	r3, [sp, #0]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fb fb43 	bl	80001f4 <strlen>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	001a      	movs	r2, r3
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	4293      	cmp	r3, r2
 8004b76:	dbe8      	blt.n	8004b4a <HEL_LCD_String+0xe>
  }
}
 8004b78:	46c0      	nop			; (mov r8, r8)
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	b005      	add	sp, #20
 8004b7e:	bd00      	pop	{pc}

08004b80 <HEL_LCD_SetCursor>:
* @param    row   This is position of the row to set the cursor.
* @param    col   This is the position of the col to set the cursor. 
* @return   void
*/ 
 void HEL_LCD_SetCursor( LCD_HandleTypeDef *hlcd, uint8_t row, uint8_t col )
{
 8004b80:	b500      	push	{lr}
 8004b82:	b085      	sub	sp, #20
 8004b84:	9001      	str	r0, [sp, #4]
 8004b86:	0008      	movs	r0, r1
 8004b88:	0011      	movs	r1, r2
 8004b8a:	466b      	mov	r3, sp
 8004b8c:	3303      	adds	r3, #3
 8004b8e:	1c02      	adds	r2, r0, #0
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	466b      	mov	r3, sp
 8004b94:	3302      	adds	r3, #2
 8004b96:	1c0a      	adds	r2, r1, #0
 8004b98:	701a      	strb	r2, [r3, #0]
  uint8_t mrow; /* Define this variables to avoid misra rule parameter should not be modified */
  uint8_t mcol; /* Define this variables to avoid misra rule parameter should not be modified */
  if( row != 0u )
 8004b9a:	466b      	mov	r3, sp
 8004b9c:	3303      	adds	r3, #3
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <HEL_LCD_SetCursor+0x2e>
  {
    mrow = 0x40; /* Set DDRAM address to the second line */
 8004ba4:	230f      	movs	r3, #15
 8004ba6:	446b      	add	r3, sp
 8004ba8:	2240      	movs	r2, #64	; 0x40
 8004baa:	701a      	strb	r2, [r3, #0]
 8004bac:	e003      	b.n	8004bb6 <HEL_LCD_SetCursor+0x36>
  }
  else
  {
    mrow = 0u;
 8004bae:	230f      	movs	r3, #15
 8004bb0:	446b      	add	r3, sp
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
  }
  if( ( col < 0u ) || ( col > 15u ) ) /* Validate the column is in a valid range if not set to position 0*/
 8004bb6:	466b      	mov	r3, sp
 8004bb8:	3302      	adds	r3, #2
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b0f      	cmp	r3, #15
 8004bbe:	d904      	bls.n	8004bca <HEL_LCD_SetCursor+0x4a>
  {
    mcol = 0u;
 8004bc0:	230e      	movs	r3, #14
 8004bc2:	446b      	add	r3, sp
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e005      	b.n	8004bd6 <HEL_LCD_SetCursor+0x56>
  }
  else
  {
    mcol = col;
 8004bca:	230e      	movs	r3, #14
 8004bcc:	446b      	add	r3, sp
 8004bce:	466a      	mov	r2, sp
 8004bd0:	3202      	adds	r2, #2
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	701a      	strb	r2, [r3, #0]
  }
    HEL_LCD_Command(hlcd, (uint8_t)LCD_SETDDRAM_ADDR_ | (mrow + mcol)); /* Send the command to set the cursor */
 8004bd6:	220f      	movs	r2, #15
 8004bd8:	446a      	add	r2, sp
 8004bda:	230e      	movs	r3, #14
 8004bdc:	446b      	add	r3, sp
 8004bde:	7812      	ldrb	r2, [r2, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	18d3      	adds	r3, r2, r3
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	b25b      	sxtb	r3, r3
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	4252      	negs	r2, r2
 8004bec:	4313      	orrs	r3, r2
 8004bee:	b25b      	sxtb	r3, r3
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	9b01      	ldr	r3, [sp, #4]
 8004bf4:	0011      	movs	r1, r2
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7ff ff3e 	bl	8004a78 <HEL_LCD_Command>
}
 8004bfc:	46c0      	nop			; (mov r8, r8)
 8004bfe:	b005      	add	sp, #20
 8004c00:	bd00      	pop	{pc}

08004c02 <HEL_LCD_Backlight>:
* @param    hlcd  This is a pointer to a structure of the type LCD_HandleTypeDef, this structure contains the spi instance to use and the gpio configuration of the lcd.
* @param    state This parameter defines the state of the backlight (1 on, 0 off).
* @return   void
*/ 
void HEL_LCD_Backlight( LCD_HandleTypeDef *hlcd, uint8_t state )
{
 8004c02:	b500      	push	{lr}
 8004c04:	b083      	sub	sp, #12
 8004c06:	9001      	str	r0, [sp, #4]
 8004c08:	000a      	movs	r2, r1
 8004c0a:	466b      	mov	r3, sp
 8004c0c:	3303      	adds	r3, #3
 8004c0e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(hlcd->BklPort, hlcd->BklPin, state); /* Write the state to the corresponding GPIO */
 8004c10:	9b01      	ldr	r3, [sp, #4]
 8004c12:	69d8      	ldr	r0, [r3, #28]
 8004c14:	9b01      	ldr	r3, [sp, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	b299      	uxth	r1, r3
 8004c1a:	466b      	mov	r3, sp
 8004c1c:	3303      	adds	r3, #3
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	001a      	movs	r2, r3
 8004c22:	f7fc fe8b 	bl	800193c <HAL_GPIO_WritePin>
}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	b003      	add	sp, #12
 8004c2a:	bd00      	pop	{pc}

08004c2c <HEL_LCD_Clear>:
*
* @param    hlcd      This is a pointer to a structure of the type LCD_HandleTypeDef, this structure contains the spi instance to use and the gpio configuration of the lcd.
* @return   void
*/ 
void HEL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8004c2c:	b500      	push	{lr}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	9001      	str	r0, [sp, #4]
  HEL_LCD_Command(hlcd, LCD_CLEARDISPLAY_);
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	2101      	movs	r1, #1
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7ff ff1e 	bl	8004a78 <HEL_LCD_Command>
  HAL_Delay(2);
 8004c3c:	2002      	movs	r0, #2
 8004c3e:	f7fb fef9 	bl	8000a34 <HAL_Delay>
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	b003      	add	sp, #12
 8004c46:	bd00      	pop	{pc}

08004c48 <Delay_us_Init>:
#include "app_bsp.h"

void Delay_us_Init(void)
{
 8004c48:	b500      	push	{lr}
 8004c4a:	b083      	sub	sp, #12
  __TIM6_CLK_ENABLE();
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <Delay_us_Init+0x44>)
 8004c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c50:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <Delay_us_Init+0x44>)
 8004c52:	2110      	movs	r1, #16
 8004c54:	430a      	orrs	r2, r1
 8004c56:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <Delay_us_Init+0x44>)
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	4013      	ands	r3, r2
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	9b01      	ldr	r3, [sp, #4]
  TIM6_Handler.Instance = TIM6;
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <Delay_us_Init+0x48>)
 8004c66:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <Delay_us_Init+0x4c>)
 8004c68:	601a      	str	r2, [r3, #0]
  TIM6_Handler.Init.Prescaler = 64;
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <Delay_us_Init+0x48>)
 8004c6c:	2240      	movs	r2, #64	; 0x40
 8004c6e:	605a      	str	r2, [r3, #4]
  TIM6_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <Delay_us_Init+0x48>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
  TIM6_Handler.Init.Period = 1000;
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <Delay_us_Init+0x48>)
 8004c78:	22fa      	movs	r2, #250	; 0xfa
 8004c7a:	0092      	lsls	r2, r2, #2
 8004c7c:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init( &TIM6_Handler );
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <Delay_us_Init+0x48>)
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7fd fd17 	bl	80026b4 <HAL_TIM_Base_Init>
}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	b003      	add	sp, #12
 8004c8a:	bd00      	pop	{pc}
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	200014a4 	.word	0x200014a4
 8004c94:	40001000 	.word	0x40001000

08004c98 <Delay_us>:
void Delay_us(uint16_t delay)
{
 8004c98:	b500      	push	{lr}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	0002      	movs	r2, r0
 8004c9e:	466b      	mov	r3, sp
 8004ca0:	3306      	adds	r3, #6
 8004ca2:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start(&TIM6_Handler);
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <Delay_us+0x3c>)
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f7fd fd60 	bl	800276c <HAL_TIM_Base_Start>
  while( __HAL_TIM_GetCounter(&TIM6_Handler) < delay )
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <Delay_us+0x3c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cb4:	466b      	mov	r3, sp
 8004cb6:	3306      	adds	r3, #6
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3f7      	bcc.n	8004cae <Delay_us+0x16>
  {
    
  }
  __HAL_TIM_SET_COUNTER(&TIM6_Handler,0);
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <Delay_us+0x3c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Stop(&TIM6_Handler);
 8004cc6:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <Delay_us+0x3c>)
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f7fd fda7 	bl	800281c <HAL_TIM_Base_Stop>
}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	b003      	add	sp, #12
 8004cd2:	bd00      	pop	{pc}
 8004cd4:	200014a4 	.word	0x200014a4

08004cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cd8:	b500      	push	{lr}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	9001      	str	r0, [sp, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cde:	9b01      	ldr	r3, [sp, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_SPI_Init+0x10>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0a8      	b.n	8004e3a <HAL_SPI_Init+0x162>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ce8:	9b01      	ldr	r3, [sp, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf0:	9b01      	ldr	r3, [sp, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	2382      	movs	r3, #130	; 0x82
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d009      	beq.n	8004d10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cfc:	9b01      	ldr	r3, [sp, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	61da      	str	r2, [r3, #28]
 8004d02:	e005      	b.n	8004d10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d04:	9b01      	ldr	r3, [sp, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d0a:	9b01      	ldr	r3, [sp, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d10:	9b01      	ldr	r3, [sp, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d16:	9b01      	ldr	r3, [sp, #4]
 8004d18:	225d      	movs	r2, #93	; 0x5d
 8004d1a:	5c9b      	ldrb	r3, [r3, r2]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d107      	bne.n	8004d32 <HAL_SPI_Init+0x5a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d22:	9b01      	ldr	r3, [sp, #4]
 8004d24:	225c      	movs	r2, #92	; 0x5c
 8004d26:	2100      	movs	r1, #0
 8004d28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d2a:	9b01      	ldr	r3, [sp, #4]
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7fb fd1b 	bl	8000768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d32:	9b01      	ldr	r3, [sp, #4]
 8004d34:	225d      	movs	r2, #93	; 0x5d
 8004d36:	2102      	movs	r1, #2
 8004d38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d3a:	9b01      	ldr	r3, [sp, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	9b01      	ldr	r3, [sp, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2140      	movs	r1, #64	; 0x40
 8004d46:	438a      	bics	r2, r1
 8004d48:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d4a:	9b01      	ldr	r3, [sp, #4]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	23e0      	movs	r3, #224	; 0xe0
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d902      	bls.n	8004d5c <HAL_SPI_Init+0x84>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d56:	2300      	movs	r3, #0
 8004d58:	9303      	str	r3, [sp, #12]
 8004d5a:	e002      	b.n	8004d62 <HAL_SPI_Init+0x8a>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	015b      	lsls	r3, r3, #5
 8004d60:	9303      	str	r3, [sp, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d62:	9b01      	ldr	r3, [sp, #4]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	23f0      	movs	r3, #240	; 0xf0
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d008      	beq.n	8004d80 <HAL_SPI_Init+0xa8>
 8004d6e:	9b01      	ldr	r3, [sp, #4]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	23e0      	movs	r3, #224	; 0xe0
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Init+0xa8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d7a:	9b01      	ldr	r3, [sp, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d80:	9b01      	ldr	r3, [sp, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	2382      	movs	r3, #130	; 0x82
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	401a      	ands	r2, r3
 8004d8a:	9b01      	ldr	r3, [sp, #4]
 8004d8c:	6899      	ldr	r1, [r3, #8]
 8004d8e:	2384      	movs	r3, #132	; 0x84
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	400b      	ands	r3, r1
 8004d94:	431a      	orrs	r2, r3
 8004d96:	9b01      	ldr	r3, [sp, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2102      	movs	r1, #2
 8004d9c:	400b      	ands	r3, r1
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	9b01      	ldr	r3, [sp, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	2101      	movs	r1, #1
 8004da6:	400b      	ands	r3, r1
 8004da8:	431a      	orrs	r2, r3
 8004daa:	9b01      	ldr	r3, [sp, #4]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	400b      	ands	r3, r1
 8004db4:	431a      	orrs	r2, r3
 8004db6:	9b01      	ldr	r3, [sp, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	2138      	movs	r1, #56	; 0x38
 8004dbc:	400b      	ands	r3, r1
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	9b01      	ldr	r3, [sp, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	2180      	movs	r1, #128	; 0x80
 8004dc6:	400b      	ands	r3, r1
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	0011      	movs	r1, r2
 8004dcc:	9b01      	ldr	r3, [sp, #4]
 8004dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	019b      	lsls	r3, r3, #6
 8004dd4:	401a      	ands	r2, r3
 8004dd6:	9b01      	ldr	r3, [sp, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dde:	9b01      	ldr	r3, [sp, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	0c1b      	lsrs	r3, r3, #16
 8004de4:	2204      	movs	r2, #4
 8004de6:	401a      	ands	r2, r3
 8004de8:	9b01      	ldr	r3, [sp, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	2110      	movs	r1, #16
 8004dee:	400b      	ands	r3, r1
 8004df0:	431a      	orrs	r2, r3
 8004df2:	9b01      	ldr	r3, [sp, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	2108      	movs	r1, #8
 8004df8:	400b      	ands	r3, r1
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	9b01      	ldr	r3, [sp, #4]
 8004dfe:	68d9      	ldr	r1, [r3, #12]
 8004e00:	23f0      	movs	r3, #240	; 0xf0
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	400b      	ands	r3, r1
 8004e06:	431a      	orrs	r2, r3
 8004e08:	0011      	movs	r1, r2
 8004e0a:	9a03      	ldr	r2, [sp, #12]
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	015b      	lsls	r3, r3, #5
 8004e10:	401a      	ands	r2, r3
 8004e12:	9b01      	ldr	r3, [sp, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e1a:	9b01      	ldr	r3, [sp, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	9b01      	ldr	r3, [sp, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4906      	ldr	r1, [pc, #24]	; (8004e40 <HAL_SPI_Init+0x168>)
 8004e26:	400a      	ands	r2, r1
 8004e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e2a:	9b01      	ldr	r3, [sp, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e30:	9b01      	ldr	r3, [sp, #4]
 8004e32:	225d      	movs	r2, #93	; 0x5d
 8004e34:	2101      	movs	r1, #1
 8004e36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	b005      	add	sp, #20
 8004e3e:	bd00      	pop	{pc}
 8004e40:	fffff7ff 	.word	0xfffff7ff

08004e44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e44:	b500      	push	{lr}
 8004e46:	b089      	sub	sp, #36	; 0x24
 8004e48:	9003      	str	r0, [sp, #12]
 8004e4a:	9102      	str	r1, [sp, #8]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	466b      	mov	r3, sp
 8004e50:	3306      	adds	r3, #6
 8004e52:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e54:	231f      	movs	r3, #31
 8004e56:	446b      	add	r3, sp
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e5c:	9b03      	ldr	r3, [sp, #12]
 8004e5e:	225c      	movs	r2, #92	; 0x5c
 8004e60:	5c9b      	ldrb	r3, [r3, r2]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_SPI_Transmit+0x26>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e144      	b.n	80050f4 <HAL_SPI_Transmit+0x2b0>
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	225c      	movs	r2, #92	; 0x5c
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e72:	f7fb fdd9 	bl	8000a28 <HAL_GetTick>
 8004e76:	0003      	movs	r3, r0
 8004e78:	9306      	str	r3, [sp, #24]
  initial_TxXferCount = Size;
 8004e7a:	2316      	movs	r3, #22
 8004e7c:	446b      	add	r3, sp
 8004e7e:	466a      	mov	r2, sp
 8004e80:	3206      	adds	r2, #6
 8004e82:	8812      	ldrh	r2, [r2, #0]
 8004e84:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e86:	9b03      	ldr	r3, [sp, #12]
 8004e88:	225d      	movs	r2, #93	; 0x5d
 8004e8a:	5c9b      	ldrb	r3, [r3, r2]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d004      	beq.n	8004e9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_BUSY;
 8004e92:	231f      	movs	r3, #31
 8004e94:	446b      	add	r3, sp
 8004e96:	2202      	movs	r2, #2
 8004e98:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e9a:	e120      	b.n	80050de <HAL_SPI_Transmit+0x29a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e9c:	9b02      	ldr	r3, [sp, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <HAL_SPI_Transmit+0x68>
 8004ea2:	466b      	mov	r3, sp
 8004ea4:	3306      	adds	r3, #6
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <HAL_SPI_Transmit+0x72>
  {
    errorcode = HAL_ERROR;
 8004eac:	231f      	movs	r3, #31
 8004eae:	446b      	add	r3, sp
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
    goto error;
 8004eb4:	e113      	b.n	80050de <HAL_SPI_Transmit+0x29a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eb6:	9b03      	ldr	r3, [sp, #12]
 8004eb8:	225d      	movs	r2, #93	; 0x5d
 8004eba:	2103      	movs	r1, #3
 8004ebc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ec4:	9b03      	ldr	r3, [sp, #12]
 8004ec6:	9a02      	ldr	r2, [sp, #8]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004eca:	9b03      	ldr	r3, [sp, #12]
 8004ecc:	466a      	mov	r2, sp
 8004ece:	3206      	adds	r2, #6
 8004ed0:	8812      	ldrh	r2, [r2, #0]
 8004ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ed4:	9b03      	ldr	r3, [sp, #12]
 8004ed6:	466a      	mov	r2, sp
 8004ed8:	3206      	adds	r2, #6
 8004eda:	8812      	ldrh	r2, [r2, #0]
 8004edc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	2244      	movs	r2, #68	; 0x44
 8004ee8:	2100      	movs	r1, #0
 8004eea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004eec:	9b03      	ldr	r3, [sp, #12]
 8004eee:	2246      	movs	r2, #70	; 0x46
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004ef4:	9b03      	ldr	r3, [sp, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f00:	9b03      	ldr	r3, [sp, #12]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d110      	bne.n	8004f2e <HAL_SPI_Transmit+0xea>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f0c:	9b03      	ldr	r3, [sp, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	9b03      	ldr	r3, [sp, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2140      	movs	r1, #64	; 0x40
 8004f18:	438a      	bics	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f1c:	9b03      	ldr	r3, [sp, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	9b03      	ldr	r3, [sp, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2180      	movs	r1, #128	; 0x80
 8004f28:	01c9      	lsls	r1, r1, #7
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2e:	9b03      	ldr	r3, [sp, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2240      	movs	r2, #64	; 0x40
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d007      	beq.n	8004f4c <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	9b03      	ldr	r3, [sp, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2140      	movs	r1, #64	; 0x40
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f4c:	9b03      	ldr	r3, [sp, #12]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	23e0      	movs	r3, #224	; 0xe0
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d94e      	bls.n	8004ff6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <HAL_SPI_Transmit+0x126>
 8004f60:	2316      	movs	r3, #22
 8004f62:	446b      	add	r3, sp
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d13f      	bne.n	8004fea <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f76:	9b03      	ldr	r3, [sp, #12]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f80:	9b03      	ldr	r3, [sp, #12]
 8004f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f8e:	e02c      	b.n	8004fea <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f90:	9b03      	ldr	r3, [sp, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2202      	movs	r2, #2
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d112      	bne.n	8004fc4 <HAL_SPI_Transmit+0x180>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f9e:	9b03      	ldr	r3, [sp, #12]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	881a      	ldrh	r2, [r3, #0]
 8004fa4:	9b03      	ldr	r3, [sp, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004faa:	9b03      	ldr	r3, [sp, #12]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	1c9a      	adds	r2, r3, #2
 8004fb0:	9b03      	ldr	r3, [sp, #12]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	9b03      	ldr	r3, [sp, #12]
 8004fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fc2:	e012      	b.n	8004fea <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fc4:	f7fb fd30 	bl	8000a28 <HAL_GetTick>
 8004fc8:	0002      	movs	r2, r0
 8004fca:	9b06      	ldr	r3, [sp, #24]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	9a00      	ldr	r2, [sp, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d802      	bhi.n	8004fda <HAL_SPI_Transmit+0x196>
 8004fd4:	9b00      	ldr	r3, [sp, #0]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	d102      	bne.n	8004fe0 <HAL_SPI_Transmit+0x19c>
 8004fda:	9b00      	ldr	r3, [sp, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004fe0:	231f      	movs	r3, #31
 8004fe2:	446b      	add	r3, sp
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	701a      	strb	r2, [r3, #0]
          goto error;
 8004fe8:	e079      	b.n	80050de <HAL_SPI_Transmit+0x29a>
    while (hspi->TxXferCount > 0U)
 8004fea:	9b03      	ldr	r3, [sp, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1cd      	bne.n	8004f90 <HAL_SPI_Transmit+0x14c>
 8004ff4:	e04f      	b.n	8005096 <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff6:	9b03      	ldr	r3, [sp, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <HAL_SPI_Transmit+0x1c4>
 8004ffe:	2316      	movs	r3, #22
 8005000:	446b      	add	r3, sp
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d141      	bne.n	800508c <HAL_SPI_Transmit+0x248>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	7812      	ldrb	r2, [r2, #0]
 8005014:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005016:	9b03      	ldr	r3, [sp, #12]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005020:	9b03      	ldr	r3, [sp, #12]
 8005022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800502e:	e02d      	b.n	800508c <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2202      	movs	r2, #2
 8005038:	4013      	ands	r3, r2
 800503a:	2b02      	cmp	r3, #2
 800503c:	d113      	bne.n	8005066 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800504c:	9b03      	ldr	r3, [sp, #12]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005056:	9b03      	ldr	r3, [sp, #12]
 8005058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	9b03      	ldr	r3, [sp, #12]
 8005062:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005064:	e012      	b.n	800508c <HAL_SPI_Transmit+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005066:	f7fb fcdf 	bl	8000a28 <HAL_GetTick>
 800506a:	0002      	movs	r2, r0
 800506c:	9b06      	ldr	r3, [sp, #24]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	9a00      	ldr	r2, [sp, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d802      	bhi.n	800507c <HAL_SPI_Transmit+0x238>
 8005076:	9b00      	ldr	r3, [sp, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	d102      	bne.n	8005082 <HAL_SPI_Transmit+0x23e>
 800507c:	9b00      	ldr	r3, [sp, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d104      	bne.n	800508c <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8005082:	231f      	movs	r3, #31
 8005084:	446b      	add	r3, sp
 8005086:	2203      	movs	r2, #3
 8005088:	701a      	strb	r2, [r3, #0]
          goto error;
 800508a:	e028      	b.n	80050de <HAL_SPI_Transmit+0x29a>
    while (hspi->TxXferCount > 0U)
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1cc      	bne.n	8005030 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005096:	9a06      	ldr	r2, [sp, #24]
 8005098:	9900      	ldr	r1, [sp, #0]
 800509a:	9b03      	ldr	r3, [sp, #12]
 800509c:	0018      	movs	r0, r3
 800509e:	f000 f95b 	bl	8005358 <SPI_EndRxTxTransaction>
 80050a2:	1e03      	subs	r3, r0, #0
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050a6:	9b03      	ldr	r3, [sp, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050ac:	9b03      	ldr	r3, [sp, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050b4:	2300      	movs	r3, #0
 80050b6:	9304      	str	r3, [sp, #16]
 80050b8:	9b03      	ldr	r3, [sp, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	9304      	str	r3, [sp, #16]
 80050c0:	9b03      	ldr	r3, [sp, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	9304      	str	r3, [sp, #16]
 80050c8:	9b04      	ldr	r3, [sp, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d004      	beq.n	80050dc <HAL_SPI_Transmit+0x298>
  {
    errorcode = HAL_ERROR;
 80050d2:	231f      	movs	r3, #31
 80050d4:	446b      	add	r3, sp
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e000      	b.n	80050de <HAL_SPI_Transmit+0x29a>
  }

error:
 80050dc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	225d      	movs	r2, #93	; 0x5d
 80050e2:	2101      	movs	r1, #1
 80050e4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050e6:	9b03      	ldr	r3, [sp, #12]
 80050e8:	225c      	movs	r2, #92	; 0x5c
 80050ea:	2100      	movs	r1, #0
 80050ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80050ee:	231f      	movs	r3, #31
 80050f0:	446b      	add	r3, sp
 80050f2:	781b      	ldrb	r3, [r3, #0]
}
 80050f4:	0018      	movs	r0, r3
 80050f6:	b009      	add	sp, #36	; 0x24
 80050f8:	bd00      	pop	{pc}
	...

080050fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b500      	push	{lr}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	9003      	str	r0, [sp, #12]
 8005102:	9102      	str	r1, [sp, #8]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	466b      	mov	r3, sp
 8005108:	3307      	adds	r3, #7
 800510a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800510c:	f7fb fc8c 	bl	8000a28 <HAL_GetTick>
 8005110:	0002      	movs	r2, r0
 8005112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	9a00      	ldr	r2, [sp, #0]
 8005118:	18d3      	adds	r3, r2, r3
 800511a:	9307      	str	r3, [sp, #28]
  tmp_tickstart = HAL_GetTick();
 800511c:	f7fb fc84 	bl	8000a28 <HAL_GetTick>
 8005120:	0003      	movs	r3, r0
 8005122:	9306      	str	r3, [sp, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005124:	4b3a      	ldr	r3, [pc, #232]	; (8005210 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	015b      	lsls	r3, r3, #5
 800512a:	0d1b      	lsrs	r3, r3, #20
 800512c:	9a07      	ldr	r2, [sp, #28]
 800512e:	4353      	muls	r3, r2
 8005130:	9305      	str	r3, [sp, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005132:	e058      	b.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005134:	9b00      	ldr	r3, [sp, #0]
 8005136:	3301      	adds	r3, #1
 8005138:	d055      	beq.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800513a:	f7fb fc75 	bl	8000a28 <HAL_GetTick>
 800513e:	0002      	movs	r2, r0
 8005140:	9b06      	ldr	r3, [sp, #24]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	9a07      	ldr	r2, [sp, #28]
 8005146:	429a      	cmp	r2, r3
 8005148:	d902      	bls.n	8005150 <SPI_WaitFlagStateUntilTimeout+0x54>
 800514a:	9b07      	ldr	r3, [sp, #28]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d142      	bne.n	80051d6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	9b03      	ldr	r3, [sp, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	21e0      	movs	r1, #224	; 0xe0
 800515c:	438a      	bics	r2, r1
 800515e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005160:	9b03      	ldr	r3, [sp, #12]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	2382      	movs	r3, #130	; 0x82
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	429a      	cmp	r2, r3
 800516a:	d113      	bne.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x98>
 800516c:	9b03      	ldr	r3, [sp, #12]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	429a      	cmp	r2, r3
 8005176:	d005      	beq.n	8005184 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	429a      	cmp	r2, r3
 8005182:	d107      	bne.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005184:	9b03      	ldr	r3, [sp, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	9b03      	ldr	r3, [sp, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2140      	movs	r1, #64	; 0x40
 8005190:	438a      	bics	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005194:	9b03      	ldr	r3, [sp, #12]
 8005196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	019b      	lsls	r3, r3, #6
 800519c:	429a      	cmp	r2, r3
 800519e:	d110      	bne.n	80051c2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	9b03      	ldr	r3, [sp, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	491a      	ldr	r1, [pc, #104]	; (8005214 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80051ac:	400a      	ands	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	9b03      	ldr	r3, [sp, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2180      	movs	r1, #128	; 0x80
 80051bc:	0189      	lsls	r1, r1, #6
 80051be:	430a      	orrs	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	225d      	movs	r2, #93	; 0x5d
 80051c6:	2101      	movs	r1, #1
 80051c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	225c      	movs	r2, #92	; 0x5c
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e018      	b.n	8005208 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051d6:	9b05      	ldr	r3, [sp, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	9307      	str	r3, [sp, #28]
      }
      count--;
 80051e0:	9b05      	ldr	r3, [sp, #20]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	9305      	str	r3, [sp, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051e6:	9b03      	ldr	r3, [sp, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	9a02      	ldr	r2, [sp, #8]
 80051ee:	4013      	ands	r3, r2
 80051f0:	9a02      	ldr	r2, [sp, #8]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	425a      	negs	r2, r3
 80051f6:	4153      	adcs	r3, r2
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	001a      	movs	r2, r3
 80051fc:	466b      	mov	r3, sp
 80051fe:	3307      	adds	r3, #7
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d196      	bne.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	0018      	movs	r0, r3
 800520a:	b009      	add	sp, #36	; 0x24
 800520c:	bd00      	pop	{pc}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	20000000 	.word	0x20000000
 8005214:	ffffdfff 	.word	0xffffdfff

08005218 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005218:	b500      	push	{lr}
 800521a:	b08b      	sub	sp, #44	; 0x2c
 800521c:	9003      	str	r0, [sp, #12]
 800521e:	9102      	str	r1, [sp, #8]
 8005220:	9201      	str	r2, [sp, #4]
 8005222:	9300      	str	r3, [sp, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005224:	2317      	movs	r3, #23
 8005226:	446b      	add	r3, sp
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800522c:	f7fb fbfc 	bl	8000a28 <HAL_GetTick>
 8005230:	0002      	movs	r2, r0
 8005232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	9a00      	ldr	r2, [sp, #0]
 8005238:	18d3      	adds	r3, r2, r3
 800523a:	9309      	str	r3, [sp, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800523c:	f7fb fbf4 	bl	8000a28 <HAL_GetTick>
 8005240:	0003      	movs	r3, r0
 8005242:	9308      	str	r3, [sp, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	9307      	str	r3, [sp, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800524c:	4b40      	ldr	r3, [pc, #256]	; (8005350 <SPI_WaitFifoStateUntilTimeout+0x138>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	0013      	movs	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	189b      	adds	r3, r3, r2
 8005256:	00da      	lsls	r2, r3, #3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	0d1b      	lsrs	r3, r3, #20
 800525c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800525e:	4353      	muls	r3, r2
 8005260:	9306      	str	r3, [sp, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005262:	e069      	b.n	8005338 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005264:	9a02      	ldr	r2, [sp, #8]
 8005266:	23c0      	movs	r3, #192	; 0xc0
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	429a      	cmp	r2, r3
 800526c:	d10b      	bne.n	8005286 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800526e:	9b01      	ldr	r3, [sp, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d108      	bne.n	8005286 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005274:	9b07      	ldr	r3, [sp, #28]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	2317      	movs	r3, #23
 800527c:	446b      	add	r3, sp
 800527e:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005280:	2317      	movs	r3, #23
 8005282:	446b      	add	r3, sp
 8005284:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005286:	9b00      	ldr	r3, [sp, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	d055      	beq.n	8005338 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800528c:	f7fb fbcc 	bl	8000a28 <HAL_GetTick>
 8005290:	0002      	movs	r2, r0
 8005292:	9b08      	ldr	r3, [sp, #32]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005298:	429a      	cmp	r2, r3
 800529a:	d902      	bls.n	80052a2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800529c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d142      	bne.n	8005328 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a2:	9b03      	ldr	r3, [sp, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	21e0      	movs	r1, #224	; 0xe0
 80052ae:	438a      	bics	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b2:	9b03      	ldr	r3, [sp, #12]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	2382      	movs	r3, #130	; 0x82
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d113      	bne.n	80052e6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80052be:	9b03      	ldr	r3, [sp, #12]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d005      	beq.n	80052d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052ca:	9b03      	ldr	r3, [sp, #12]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d107      	bne.n	80052e6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052d6:	9b03      	ldr	r3, [sp, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	9b03      	ldr	r3, [sp, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2140      	movs	r1, #64	; 0x40
 80052e2:	438a      	bics	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052e6:	9b03      	ldr	r3, [sp, #12]
 80052e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	019b      	lsls	r3, r3, #6
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d110      	bne.n	8005314 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80052f2:	9b03      	ldr	r3, [sp, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	9b03      	ldr	r3, [sp, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4915      	ldr	r1, [pc, #84]	; (8005354 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80052fe:	400a      	ands	r2, r1
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	9b03      	ldr	r3, [sp, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	0189      	lsls	r1, r1, #6
 8005310:	430a      	orrs	r2, r1
 8005312:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	225d      	movs	r2, #93	; 0x5d
 8005318:	2101      	movs	r1, #1
 800531a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800531c:	9b03      	ldr	r3, [sp, #12]
 800531e:	225c      	movs	r2, #92	; 0x5c
 8005320:	2100      	movs	r1, #0
 8005322:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e010      	b.n	800534a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005328:	9b06      	ldr	r3, [sp, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	9309      	str	r3, [sp, #36]	; 0x24
      }
      count--;
 8005332:	9b06      	ldr	r3, [sp, #24]
 8005334:	3b01      	subs	r3, #1
 8005336:	9306      	str	r3, [sp, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	9a02      	ldr	r2, [sp, #8]
 8005340:	4013      	ands	r3, r2
 8005342:	9a01      	ldr	r2, [sp, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	d18d      	bne.n	8005264 <SPI_WaitFifoStateUntilTimeout+0x4c>
    }
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	0018      	movs	r0, r3
 800534c:	b00b      	add	sp, #44	; 0x2c
 800534e:	bd00      	pop	{pc}
 8005350:	20000000 	.word	0x20000000
 8005354:	ffffdfff 	.word	0xffffdfff

08005358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b500      	push	{lr}
 800535a:	b087      	sub	sp, #28
 800535c:	9005      	str	r0, [sp, #20]
 800535e:	9104      	str	r1, [sp, #16]
 8005360:	9203      	str	r2, [sp, #12]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005362:	9a04      	ldr	r2, [sp, #16]
 8005364:	23c0      	movs	r3, #192	; 0xc0
 8005366:	0159      	lsls	r1, r3, #5
 8005368:	9805      	ldr	r0, [sp, #20]
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	0013      	movs	r3, r2
 8005370:	2200      	movs	r2, #0
 8005372:	f7ff ff51 	bl	8005218 <SPI_WaitFifoStateUntilTimeout>
 8005376:	1e03      	subs	r3, r0, #0
 8005378:	d007      	beq.n	800538a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537e:	2220      	movs	r2, #32
 8005380:	431a      	orrs	r2, r3
 8005382:	9b05      	ldr	r3, [sp, #20]
 8005384:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e027      	b.n	80053da <SPI_EndRxTxTransaction+0x82>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800538a:	9a04      	ldr	r2, [sp, #16]
 800538c:	9805      	ldr	r0, [sp, #20]
 800538e:	9b03      	ldr	r3, [sp, #12]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	0013      	movs	r3, r2
 8005394:	2200      	movs	r2, #0
 8005396:	2180      	movs	r1, #128	; 0x80
 8005398:	f7ff feb0 	bl	80050fc <SPI_WaitFlagStateUntilTimeout>
 800539c:	1e03      	subs	r3, r0, #0
 800539e:	d007      	beq.n	80053b0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053a0:	9b05      	ldr	r3, [sp, #20]
 80053a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a4:	2220      	movs	r2, #32
 80053a6:	431a      	orrs	r2, r3
 80053a8:	9b05      	ldr	r3, [sp, #20]
 80053aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e014      	b.n	80053da <SPI_EndRxTxTransaction+0x82>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053b0:	9a04      	ldr	r2, [sp, #16]
 80053b2:	23c0      	movs	r3, #192	; 0xc0
 80053b4:	00d9      	lsls	r1, r3, #3
 80053b6:	9805      	ldr	r0, [sp, #20]
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	0013      	movs	r3, r2
 80053be:	2200      	movs	r2, #0
 80053c0:	f7ff ff2a 	bl	8005218 <SPI_WaitFifoStateUntilTimeout>
 80053c4:	1e03      	subs	r3, r0, #0
 80053c6:	d007      	beq.n	80053d8 <SPI_EndRxTxTransaction+0x80>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c8:	9b05      	ldr	r3, [sp, #20]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053cc:	2220      	movs	r2, #32
 80053ce:	431a      	orrs	r2, r3
 80053d0:	9b05      	ldr	r3, [sp, #20]
 80053d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e000      	b.n	80053da <SPI_EndRxTxTransaction+0x82>
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	0018      	movs	r0, r3
 80053dc:	b007      	add	sp, #28
 80053de:	bd00      	pop	{pc}

080053e0 <AlarmFormat>:
static char       DateStr[16];



static void AlarmFormat(char *str,RTC_AlarmTypeDef  *Alarm)
{
 80053e0:	b500      	push	{lr}
 80053e2:	b087      	sub	sp, #28
 80053e4:	9001      	str	r0, [sp, #4]
 80053e6:	9100      	str	r1, [sp, #0]
  char minutes  [3]   = {0};
 80053e8:	ab04      	add	r3, sp, #16
 80053ea:	4a2d      	ldr	r2, [pc, #180]	; (80054a0 <AlarmFormat+0xc0>)
 80053ec:	8812      	ldrh	r2, [r2, #0]
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	2202      	movs	r2, #2
 80053f2:	2100      	movs	r1, #0
 80053f4:	5499      	strb	r1, [r3, r2]
  char hours    [3]   = {0};
 80053f6:	ab03      	add	r3, sp, #12
 80053f8:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <AlarmFormat+0xc0>)
 80053fa:	8812      	ldrh	r2, [r2, #0]
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	2202      	movs	r2, #2
 8005400:	2100      	movs	r1, #0
 8005402:	5499      	strb	r1, [r3, r2]
  __itoa(Alarm->AlarmTime.Minutes,minutes,10); 
 8005404:	9b00      	ldr	r3, [sp, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	0018      	movs	r0, r3
 800540a:	ab04      	add	r3, sp, #16
 800540c:	220a      	movs	r2, #10
 800540e:	0019      	movs	r1, r3
 8005410:	f000 fee1 	bl	80061d6 <__itoa>
  if( Alarm->AlarmTime.Minutes < 10u ) 
 8005414:	9b00      	ldr	r3, [sp, #0]
 8005416:	785b      	ldrb	r3, [r3, #1]
 8005418:	2b09      	cmp	r3, #9
 800541a:	d80f      	bhi.n	800543c <AlarmFormat+0x5c>
  {
    char swap;
    swap = minutes[0];
 800541c:	2317      	movs	r3, #23
 800541e:	446b      	add	r3, sp
 8005420:	aa04      	add	r2, sp, #16
 8005422:	7812      	ldrb	r2, [r2, #0]
 8005424:	701a      	strb	r2, [r3, #0]
    minutes[0] = '0';
 8005426:	ab04      	add	r3, sp, #16
 8005428:	2230      	movs	r2, #48	; 0x30
 800542a:	701a      	strb	r2, [r3, #0]
    minutes[1] = swap;
 800542c:	ab04      	add	r3, sp, #16
 800542e:	2217      	movs	r2, #23
 8005430:	446a      	add	r2, sp
 8005432:	7812      	ldrb	r2, [r2, #0]
 8005434:	705a      	strb	r2, [r3, #1]
    minutes[2] = '\0';
 8005436:	ab04      	add	r3, sp, #16
 8005438:	2200      	movs	r2, #0
 800543a:	709a      	strb	r2, [r3, #2]
  }
  __itoa(Alarm->AlarmTime.Hours,hours,10); 
 800543c:	9b00      	ldr	r3, [sp, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	0018      	movs	r0, r3
 8005442:	ab03      	add	r3, sp, #12
 8005444:	220a      	movs	r2, #10
 8005446:	0019      	movs	r1, r3
 8005448:	f000 fec5 	bl	80061d6 <__itoa>
  if( Alarm->AlarmTime.Hours < 10u ) 
 800544c:	9b00      	ldr	r3, [sp, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b09      	cmp	r3, #9
 8005452:	d80f      	bhi.n	8005474 <AlarmFormat+0x94>
  {
    char swap;
    swap = hours[0];
 8005454:	2316      	movs	r3, #22
 8005456:	446b      	add	r3, sp
 8005458:	aa03      	add	r2, sp, #12
 800545a:	7812      	ldrb	r2, [r2, #0]
 800545c:	701a      	strb	r2, [r3, #0]
    hours[0] = '0';
 800545e:	ab03      	add	r3, sp, #12
 8005460:	2230      	movs	r2, #48	; 0x30
 8005462:	701a      	strb	r2, [r3, #0]
    hours[1] = swap;
 8005464:	ab03      	add	r3, sp, #12
 8005466:	2216      	movs	r2, #22
 8005468:	446a      	add	r2, sp
 800546a:	7812      	ldrb	r2, [r2, #0]
 800546c:	705a      	strb	r2, [r3, #1]
    hours[2] = '\0';
 800546e:	ab03      	add	r3, sp, #12
 8005470:	2200      	movs	r2, #0
 8005472:	709a      	strb	r2, [r3, #2]
  }
  (void)strcat(str,hours);
 8005474:	aa03      	add	r2, sp, #12
 8005476:	9b01      	ldr	r3, [sp, #4]
 8005478:	0011      	movs	r1, r2
 800547a:	0018      	movs	r0, r3
 800547c:	f000 ff00 	bl	8006280 <strcat>
  (void)strcat(str,":");
 8005480:	4a08      	ldr	r2, [pc, #32]	; (80054a4 <AlarmFormat+0xc4>)
 8005482:	9b01      	ldr	r3, [sp, #4]
 8005484:	0011      	movs	r1, r2
 8005486:	0018      	movs	r0, r3
 8005488:	f000 fefa 	bl	8006280 <strcat>
  (void)strcat(str,minutes);
 800548c:	aa04      	add	r2, sp, #16
 800548e:	9b01      	ldr	r3, [sp, #4]
 8005490:	0011      	movs	r1, r2
 8005492:	0018      	movs	r0, r3
 8005494:	f000 fef4 	bl	8006280 <strcat>
}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	b007      	add	sp, #28
 800549c:	bd00      	pop	{pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	08006330 	.word	0x08006330
 80054a4:	0800632c 	.word	0x0800632c

080054a8 <TimeFormat>:


static void TimeFormat(char *str,APP_Display_MsgTypeDef *msg_struct)
{
 80054a8:	b500      	push	{lr}
 80054aa:	b087      	sub	sp, #28
 80054ac:	9001      	str	r0, [sp, #4]
 80054ae:	9100      	str	r1, [sp, #0]
  char seconds  [3]   = {0};
 80054b0:	ab04      	add	r3, sp, #16
 80054b2:	4a44      	ldr	r2, [pc, #272]	; (80055c4 <TimeFormat+0x11c>)
 80054b4:	8812      	ldrh	r2, [r2, #0]
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	2202      	movs	r2, #2
 80054ba:	2100      	movs	r1, #0
 80054bc:	5499      	strb	r1, [r3, r2]
  char minutes  [3]   = {0};
 80054be:	ab03      	add	r3, sp, #12
 80054c0:	4a40      	ldr	r2, [pc, #256]	; (80055c4 <TimeFormat+0x11c>)
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	2202      	movs	r2, #2
 80054c8:	2100      	movs	r1, #0
 80054ca:	5499      	strb	r1, [r3, r2]
  char hours    [3]   = {0};
 80054cc:	ab02      	add	r3, sp, #8
 80054ce:	4a3d      	ldr	r2, [pc, #244]	; (80055c4 <TimeFormat+0x11c>)
 80054d0:	8812      	ldrh	r2, [r2, #0]
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	2202      	movs	r2, #2
 80054d6:	2100      	movs	r1, #0
 80054d8:	5499      	strb	r1, [r3, r2]
  __itoa(msg_struct->tm.tm_sec,seconds,10); 
 80054da:	9b00      	ldr	r3, [sp, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	0018      	movs	r0, r3
 80054e0:	ab04      	add	r3, sp, #16
 80054e2:	220a      	movs	r2, #10
 80054e4:	0019      	movs	r1, r3
 80054e6:	f000 fe76 	bl	80061d6 <__itoa>
  if( msg_struct->tm.tm_sec < 10u ) 
 80054ea:	9b00      	ldr	r3, [sp, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b09      	cmp	r3, #9
 80054f0:	d80f      	bhi.n	8005512 <TimeFormat+0x6a>
  {
    char swap;
    swap = seconds[0];
 80054f2:	2317      	movs	r3, #23
 80054f4:	446b      	add	r3, sp
 80054f6:	aa04      	add	r2, sp, #16
 80054f8:	7812      	ldrb	r2, [r2, #0]
 80054fa:	701a      	strb	r2, [r3, #0]
    seconds[0] = '0';
 80054fc:	ab04      	add	r3, sp, #16
 80054fe:	2230      	movs	r2, #48	; 0x30
 8005500:	701a      	strb	r2, [r3, #0]
    seconds[1] = swap;
 8005502:	ab04      	add	r3, sp, #16
 8005504:	2217      	movs	r2, #23
 8005506:	446a      	add	r2, sp
 8005508:	7812      	ldrb	r2, [r2, #0]
 800550a:	705a      	strb	r2, [r3, #1]
    seconds[2] = '\0';
 800550c:	ab04      	add	r3, sp, #16
 800550e:	2200      	movs	r2, #0
 8005510:	709a      	strb	r2, [r3, #2]
  }
  __itoa(msg_struct->tm.tm_min,minutes,10); 
 8005512:	9b00      	ldr	r3, [sp, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	0018      	movs	r0, r3
 8005518:	ab03      	add	r3, sp, #12
 800551a:	220a      	movs	r2, #10
 800551c:	0019      	movs	r1, r3
 800551e:	f000 fe5a 	bl	80061d6 <__itoa>
  if( msg_struct->tm.tm_min < 10u ) 
 8005522:	9b00      	ldr	r3, [sp, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b09      	cmp	r3, #9
 8005528:	d80f      	bhi.n	800554a <TimeFormat+0xa2>
  {
    char swap;
    swap = minutes[0];
 800552a:	2316      	movs	r3, #22
 800552c:	446b      	add	r3, sp
 800552e:	aa03      	add	r2, sp, #12
 8005530:	7812      	ldrb	r2, [r2, #0]
 8005532:	701a      	strb	r2, [r3, #0]
    minutes[0] = '0';
 8005534:	ab03      	add	r3, sp, #12
 8005536:	2230      	movs	r2, #48	; 0x30
 8005538:	701a      	strb	r2, [r3, #0]
    minutes[1] = swap;
 800553a:	ab03      	add	r3, sp, #12
 800553c:	2216      	movs	r2, #22
 800553e:	446a      	add	r2, sp
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	705a      	strb	r2, [r3, #1]
    minutes[2] = '\0';
 8005544:	ab03      	add	r3, sp, #12
 8005546:	2200      	movs	r2, #0
 8005548:	709a      	strb	r2, [r3, #2]
  }
  __itoa(msg_struct->tm.tm_hour,hours,10); 
 800554a:	9b00      	ldr	r3, [sp, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	0018      	movs	r0, r3
 8005550:	ab02      	add	r3, sp, #8
 8005552:	220a      	movs	r2, #10
 8005554:	0019      	movs	r1, r3
 8005556:	f000 fe3e 	bl	80061d6 <__itoa>
  if( msg_struct->tm.tm_hour < 10u ) 
 800555a:	9b00      	ldr	r3, [sp, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2b09      	cmp	r3, #9
 8005560:	d80f      	bhi.n	8005582 <TimeFormat+0xda>
  {
    char swap;
    swap = hours[0];
 8005562:	2315      	movs	r3, #21
 8005564:	446b      	add	r3, sp
 8005566:	aa02      	add	r2, sp, #8
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	701a      	strb	r2, [r3, #0]
    hours[0] = '0';
 800556c:	ab02      	add	r3, sp, #8
 800556e:	2230      	movs	r2, #48	; 0x30
 8005570:	701a      	strb	r2, [r3, #0]
    hours[1] = swap;
 8005572:	ab02      	add	r3, sp, #8
 8005574:	2215      	movs	r2, #21
 8005576:	446a      	add	r2, sp
 8005578:	7812      	ldrb	r2, [r2, #0]
 800557a:	705a      	strb	r2, [r3, #1]
    hours[2] = '\0';
 800557c:	ab02      	add	r3, sp, #8
 800557e:	2200      	movs	r2, #0
 8005580:	709a      	strb	r2, [r3, #2]
  }
  (void)strcat(str,hours);
 8005582:	aa02      	add	r2, sp, #8
 8005584:	9b01      	ldr	r3, [sp, #4]
 8005586:	0011      	movs	r1, r2
 8005588:	0018      	movs	r0, r3
 800558a:	f000 fe79 	bl	8006280 <strcat>
  (void)strcat(str,":");
 800558e:	4a0e      	ldr	r2, [pc, #56]	; (80055c8 <TimeFormat+0x120>)
 8005590:	9b01      	ldr	r3, [sp, #4]
 8005592:	0011      	movs	r1, r2
 8005594:	0018      	movs	r0, r3
 8005596:	f000 fe73 	bl	8006280 <strcat>
  (void)strcat(str,minutes);
 800559a:	aa03      	add	r2, sp, #12
 800559c:	9b01      	ldr	r3, [sp, #4]
 800559e:	0011      	movs	r1, r2
 80055a0:	0018      	movs	r0, r3
 80055a2:	f000 fe6d 	bl	8006280 <strcat>
  (void)strcat(str,":");
 80055a6:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <TimeFormat+0x120>)
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	0011      	movs	r1, r2
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 fe67 	bl	8006280 <strcat>
  (void)strcat(str,seconds);
 80055b2:	aa04      	add	r2, sp, #16
 80055b4:	9b01      	ldr	r3, [sp, #4]
 80055b6:	0011      	movs	r1, r2
 80055b8:	0018      	movs	r0, r3
 80055ba:	f000 fe61 	bl	8006280 <strcat>
}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	b007      	add	sp, #28
 80055c2:	bd00      	pop	{pc}
 80055c4:	08006330 	.word	0x08006330
 80055c8:	0800632c 	.word	0x0800632c

080055cc <DateFormat>:

static void DateFormat(char *str,APP_Display_MsgTypeDef *msg_struct)
{
 80055cc:	b510      	push	{r4, lr}
 80055ce:	b09a      	sub	sp, #104	; 0x68
 80055d0:	9001      	str	r0, [sp, #4]
 80055d2:	9100      	str	r1, [sp, #0]

  char *months  [12]  = {
 80055d4:	ab0d      	add	r3, sp, #52	; 0x34
 80055d6:	4a4e      	ldr	r2, [pc, #312]	; (8005710 <DateFormat+0x144>)
 80055d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80055da:	c313      	stmia	r3!, {r0, r1, r4}
 80055dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80055de:	c313      	stmia	r3!, {r0, r1, r4}
 80055e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80055e2:	c313      	stmia	r3!, {r0, r1, r4}
 80055e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80055e6:	c313      	stmia	r3!, {r0, r1, r4}
      "SEP,",
      "OCT,",
      "NOV,",
      "DIC," };

  char *Wdays  [7]   =  {
 80055e8:	ab06      	add	r3, sp, #24
 80055ea:	4a4a      	ldr	r2, [pc, #296]	; (8005714 <DateFormat+0x148>)
 80055ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80055ee:	c313      	stmia	r3!, {r0, r1, r4}
 80055f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80055f2:	c313      	stmia	r3!, {r0, r1, r4}
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	601a      	str	r2, [r3, #0]
      "Do"
  };    
  char day        [3];
  char year_least [3];
  char year_most  [3];
  __itoa(msg_struct->tm.tm_mday,day,10); 
 80055f8:	9b00      	ldr	r3, [sp, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	0018      	movs	r0, r3
 80055fe:	ab05      	add	r3, sp, #20
 8005600:	220a      	movs	r2, #10
 8005602:	0019      	movs	r1, r3
 8005604:	f000 fde7 	bl	80061d6 <__itoa>
  if( msg_struct->tm.tm_mday < 10u ) 
 8005608:	9b00      	ldr	r3, [sp, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b09      	cmp	r3, #9
 800560e:	d80f      	bhi.n	8005630 <DateFormat+0x64>
  {
    char swap;
    swap = day[0];
 8005610:	2367      	movs	r3, #103	; 0x67
 8005612:	446b      	add	r3, sp
 8005614:	aa05      	add	r2, sp, #20
 8005616:	7812      	ldrb	r2, [r2, #0]
 8005618:	701a      	strb	r2, [r3, #0]
    day[0] = '0';
 800561a:	ab05      	add	r3, sp, #20
 800561c:	2230      	movs	r2, #48	; 0x30
 800561e:	701a      	strb	r2, [r3, #0]
    day[1] = swap;
 8005620:	ab05      	add	r3, sp, #20
 8005622:	2267      	movs	r2, #103	; 0x67
 8005624:	446a      	add	r2, sp
 8005626:	7812      	ldrb	r2, [r2, #0]
 8005628:	705a      	strb	r2, [r3, #1]
    day[2] = '\0';
 800562a:	ab05      	add	r3, sp, #20
 800562c:	2200      	movs	r2, #0
 800562e:	709a      	strb	r2, [r3, #2]
  }

   __itoa(msg_struct->tm.tm_year,year_least,10); 
 8005630:	9b00      	ldr	r3, [sp, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	0018      	movs	r0, r3
 8005636:	ab04      	add	r3, sp, #16
 8005638:	220a      	movs	r2, #10
 800563a:	0019      	movs	r1, r3
 800563c:	f000 fdcb 	bl	80061d6 <__itoa>
  if( msg_struct->tm.tm_year < 10u ) 
 8005640:	9b00      	ldr	r3, [sp, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b09      	cmp	r3, #9
 8005646:	d80f      	bhi.n	8005668 <DateFormat+0x9c>
  {
    char swap;
    swap = year_least[0];
 8005648:	2366      	movs	r3, #102	; 0x66
 800564a:	446b      	add	r3, sp
 800564c:	aa04      	add	r2, sp, #16
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	701a      	strb	r2, [r3, #0]
    year_least[0] = '0';
 8005652:	ab04      	add	r3, sp, #16
 8005654:	2230      	movs	r2, #48	; 0x30
 8005656:	701a      	strb	r2, [r3, #0]
    year_least[1] = swap;
 8005658:	ab04      	add	r3, sp, #16
 800565a:	2266      	movs	r2, #102	; 0x66
 800565c:	446a      	add	r2, sp
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	705a      	strb	r2, [r3, #1]
    year_least[2] = '\0';
 8005662:	ab04      	add	r3, sp, #16
 8005664:	2200      	movs	r2, #0
 8005666:	709a      	strb	r2, [r3, #2]
  }
  __itoa(date_most_significative_backup,year_most,10);
 8005668:	4b2b      	ldr	r3, [pc, #172]	; (8005718 <DateFormat+0x14c>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	0018      	movs	r0, r3
 800566e:	ab03      	add	r3, sp, #12
 8005670:	220a      	movs	r2, #10
 8005672:	0019      	movs	r1, r3
 8005674:	f000 fdaf 	bl	80061d6 <__itoa>
  if( date_most_significative_backup < 10u ) 
 8005678:	4b27      	ldr	r3, [pc, #156]	; (8005718 <DateFormat+0x14c>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b09      	cmp	r3, #9
 800567e:	d80f      	bhi.n	80056a0 <DateFormat+0xd4>
  {
    char swap;
    swap = year_most[0];
 8005680:	2365      	movs	r3, #101	; 0x65
 8005682:	446b      	add	r3, sp
 8005684:	aa03      	add	r2, sp, #12
 8005686:	7812      	ldrb	r2, [r2, #0]
 8005688:	701a      	strb	r2, [r3, #0]
    year_most[0] = '0';
 800568a:	ab03      	add	r3, sp, #12
 800568c:	2230      	movs	r2, #48	; 0x30
 800568e:	701a      	strb	r2, [r3, #0]
    year_most[1] = swap;
 8005690:	ab03      	add	r3, sp, #12
 8005692:	2265      	movs	r2, #101	; 0x65
 8005694:	446a      	add	r2, sp
 8005696:	7812      	ldrb	r2, [r2, #0]
 8005698:	705a      	strb	r2, [r3, #1]
    year_most[2] = '\0';
 800569a:	ab03      	add	r3, sp, #12
 800569c:	2200      	movs	r2, #0
 800569e:	709a      	strb	r2, [r3, #2]
  }
  (void)strcat(str,months[(msg_struct->tm.tm_mon) -1u ] );
 80056a0:	9b00      	ldr	r3, [sp, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	1e5a      	subs	r2, r3, #1
 80056a6:	ab0d      	add	r3, sp, #52	; 0x34
 80056a8:	0092      	lsls	r2, r2, #2
 80056aa:	58d2      	ldr	r2, [r2, r3]
 80056ac:	9b01      	ldr	r3, [sp, #4]
 80056ae:	0011      	movs	r1, r2
 80056b0:	0018      	movs	r0, r3
 80056b2:	f000 fde5 	bl	8006280 <strcat>
  (void)strcat(str,day);
 80056b6:	aa05      	add	r2, sp, #20
 80056b8:	9b01      	ldr	r3, [sp, #4]
 80056ba:	0011      	movs	r1, r2
 80056bc:	0018      	movs	r0, r3
 80056be:	f000 fddf 	bl	8006280 <strcat>
  (void)strcat(str,"\v");
 80056c2:	4a16      	ldr	r2, [pc, #88]	; (800571c <DateFormat+0x150>)
 80056c4:	9b01      	ldr	r3, [sp, #4]
 80056c6:	0011      	movs	r1, r2
 80056c8:	0018      	movs	r0, r3
 80056ca:	f000 fdd9 	bl	8006280 <strcat>
  (void)strcat(str,year_most);
 80056ce:	aa03      	add	r2, sp, #12
 80056d0:	9b01      	ldr	r3, [sp, #4]
 80056d2:	0011      	movs	r1, r2
 80056d4:	0018      	movs	r0, r3
 80056d6:	f000 fdd3 	bl	8006280 <strcat>
  (void)strcat(str,year_least);
 80056da:	aa04      	add	r2, sp, #16
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	0011      	movs	r1, r2
 80056e0:	0018      	movs	r0, r3
 80056e2:	f000 fdcd 	bl	8006280 <strcat>
  (void)strcat(str,"\v");
 80056e6:	4a0d      	ldr	r2, [pc, #52]	; (800571c <DateFormat+0x150>)
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	0011      	movs	r1, r2
 80056ec:	0018      	movs	r0, r3
 80056ee:	f000 fdc7 	bl	8006280 <strcat>
  (void)strcat(str,Wdays[(msg_struct->tm.tm_wday) - 1u ]);
 80056f2:	9b00      	ldr	r3, [sp, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	ab06      	add	r3, sp, #24
 80056fa:	0092      	lsls	r2, r2, #2
 80056fc:	58d2      	ldr	r2, [r2, r3]
 80056fe:	9b01      	ldr	r3, [sp, #4]
 8005700:	0011      	movs	r1, r2
 8005702:	0018      	movs	r0, r3
 8005704:	f000 fdbc 	bl	8006280 <strcat>
} 
 8005708:	46c0      	nop			; (mov r8, r8)
 800570a:	b01a      	add	sp, #104	; 0x68
 800570c:	bd10      	pop	{r4, pc}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	08006398 	.word	0x08006398
 8005714:	080063e4 	.word	0x080063e4
 8005718:	2000017d 	.word	0x2000017d
 800571c:	08006334 	.word	0x08006334

08005720 <display_Init>:

void display_Init(void)
{
 8005720:	b510      	push	{r4, lr}
   
  /*Configuramos al spi en modo maestro, comunicacion full-duplex, polaridad
  del reloj en alto y fase en flanco de bajada */
  SpiHandle.Instance                  = SPI2;
 8005722:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <display_Init+0xa0>)
 8005724:	4a27      	ldr	r2, [pc, #156]	; (80057c4 <display_Init+0xa4>)
 8005726:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.Mode                 = SPI_MODE_MASTER;
 8005728:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <display_Init+0xa0>)
 800572a:	2282      	movs	r2, #130	; 0x82
 800572c:	0052      	lsls	r2, r2, #1
 800572e:	605a      	str	r2, [r3, #4]
  SpiHandle.Init.BaudRatePrescaler    = SPI_BAUDRATEPRESCALER_16;
 8005730:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <display_Init+0xa0>)
 8005732:	2218      	movs	r2, #24
 8005734:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction            = SPI_DIRECTION_2LINES;
 8005736:	4b22      	ldr	r3, [pc, #136]	; (80057c0 <display_Init+0xa0>)
 8005738:	2200      	movs	r2, #0
 800573a:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase             = SPI_PHASE_2EDGE;
 800573c:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <display_Init+0xa0>)
 800573e:	2201      	movs	r2, #1
 8005740:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity          = SPI_POLARITY_HIGH;
 8005742:	4b1f      	ldr	r3, [pc, #124]	; (80057c0 <display_Init+0xa0>)
 8005744:	2202      	movs	r2, #2
 8005746:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.DataSize             = SPI_DATASIZE_8BIT;
 8005748:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <display_Init+0xa0>)
 800574a:	22e0      	movs	r2, #224	; 0xe0
 800574c:	00d2      	lsls	r2, r2, #3
 800574e:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit             = SPI_FIRSTBIT_MSB;
 8005750:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <display_Init+0xa0>)
 8005752:	2200      	movs	r2, #0
 8005754:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS                  = SPI_NSS_SOFT;
 8005756:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <display_Init+0xa0>)
 8005758:	2280      	movs	r2, #128	; 0x80
 800575a:	0092      	lsls	r2, r2, #2
 800575c:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.CRCCalculation       = SPI_CRCCALCULATION_DISABLED;
 800575e:	4b18      	ldr	r3, [pc, #96]	; (80057c0 <display_Init+0xa0>)
 8005760:	2200      	movs	r2, #0
 8005762:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.TIMode               = SPI_TIMODE_DISABLED;
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <display_Init+0xa0>)
 8005766:	2200      	movs	r2, #0
 8005768:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_SPI_Init( &SpiHandle );
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <display_Init+0xa0>)
 800576c:	0018      	movs	r0, r3
 800576e:	f7ff fab3 	bl	8004cd8 <HAL_SPI_Init>
  LCDHandler.BklPort                  = GPIOC;
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <display_Init+0xa8>)
 8005774:	4a15      	ldr	r2, [pc, #84]	; (80057cc <display_Init+0xac>)
 8005776:	61da      	str	r2, [r3, #28]
  LCDHandler.BklPin                   = GPIO_PIN_12;
 8005778:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <display_Init+0xa8>)
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	0152      	lsls	r2, r2, #5
 800577e:	621a      	str	r2, [r3, #32]
  LCDHandler.CsPort                   = GPIOB;
 8005780:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <display_Init+0xa8>)
 8005782:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <display_Init+0xb0>)
 8005784:	615a      	str	r2, [r3, #20]
  LCDHandler.CsPin                    = GPIO_PIN_15;
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <display_Init+0xa8>)
 8005788:	2280      	movs	r2, #128	; 0x80
 800578a:	0212      	lsls	r2, r2, #8
 800578c:	619a      	str	r2, [r3, #24]
  LCDHandler.RsPort                   = GPIOC;
 800578e:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <display_Init+0xa8>)
 8005790:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <display_Init+0xac>)
 8005792:	60da      	str	r2, [r3, #12]
  LCDHandler.RsPin                    = GPIO_PIN_9;
 8005794:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <display_Init+0xa8>)
 8005796:	2280      	movs	r2, #128	; 0x80
 8005798:	0092      	lsls	r2, r2, #2
 800579a:	611a      	str	r2, [r3, #16]
  LCDHandler.RstPort                  = GPIOC;
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <display_Init+0xa8>)
 800579e:	4a0b      	ldr	r2, [pc, #44]	; (80057cc <display_Init+0xac>)
 80057a0:	605a      	str	r2, [r3, #4]
  LCDHandler.RstPin                   = GPIO_PIN_8;
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <display_Init+0xa8>)
 80057a4:	2280      	movs	r2, #128	; 0x80
 80057a6:	0052      	lsls	r2, r2, #1
 80057a8:	609a      	str	r2, [r3, #8]
  LCDHandler.SpiHandler               = &SpiHandle;
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <display_Init+0xa8>)
 80057ac:	4a04      	ldr	r2, [pc, #16]	; (80057c0 <display_Init+0xa0>)
 80057ae:	601a      	str	r2, [r3, #0]
  Delay_us_Init();
 80057b0:	f7ff fa4a 	bl	8004c48 <Delay_us_Init>
  HEL_LCD_Init(&LCDHandler);
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <display_Init+0xa8>)
 80057b6:	0018      	movs	r0, r3
 80057b8:	f7ff f8ea 	bl	8004990 <HEL_LCD_Init>
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	bd10      	pop	{r4, pc}
 80057c0:	200014f0 	.word	0x200014f0
 80057c4:	40003800 	.word	0x40003800
 80057c8:	20001480 	.word	0x20001480
 80057cc:	50000800 	.word	0x50000800
 80057d0:	50000400 	.word	0x50000400

080057d4 <Display_TimeStr_Processing>:

static void Display_TimeStr_Processing(APP_Display_MsgTypeDef *msg_struct)
{
 80057d4:	b500      	push	{lr}
 80057d6:	b083      	sub	sp, #12
 80057d8:	9001      	str	r0, [sp, #4]
  TimeFormat(TimeStr,msg_struct);
 80057da:	9a01      	ldr	r2, [sp, #4]
 80057dc:	4b08      	ldr	r3, [pc, #32]	; (8005800 <Display_TimeStr_Processing+0x2c>)
 80057de:	0011      	movs	r1, r2
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7ff fe61 	bl	80054a8 <TimeFormat>
  msg_struct->msg = DISPLAY_DATESTR_PROCESSING;
 80057e6:	9b01      	ldr	r3, [sp, #4]
 80057e8:	2205      	movs	r2, #5
 80057ea:	701a      	strb	r2, [r3, #0]
  (void)HIL_QUEUE_Write(&Display_Queue,msg_struct);
 80057ec:	9a01      	ldr	r2, [sp, #4]
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <Display_TimeStr_Processing+0x30>)
 80057f0:	0011      	movs	r1, r2
 80057f2:	0018      	movs	r0, r3
 80057f4:	f000 f9ce 	bl	8005b94 <HIL_QUEUE_Write>
}
 80057f8:	46c0      	nop			; (mov r8, r8)
 80057fa:	b003      	add	sp, #12
 80057fc:	bd00      	pop	{pc}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	200060e8 	.word	0x200060e8
 8005804:	200060cc 	.word	0x200060cc

08005808 <Display_DateStr_Processing>:

static void Display_DateStr_Processing(APP_Display_MsgTypeDef *msg_struct)
{
 8005808:	b500      	push	{lr}
 800580a:	b083      	sub	sp, #12
 800580c:	9001      	str	r0, [sp, #4]
  DateFormat(DateStr,msg_struct);
 800580e:	9a01      	ldr	r2, [sp, #4]
 8005810:	4b08      	ldr	r3, [pc, #32]	; (8005834 <Display_DateStr_Processing+0x2c>)
 8005812:	0011      	movs	r1, r2
 8005814:	0018      	movs	r0, r3
 8005816:	f7ff fed9 	bl	80055cc <DateFormat>
  msg_struct->msg = DISPLAY_LCD_WRITE;
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	2206      	movs	r2, #6
 800581e:	701a      	strb	r2, [r3, #0]
  (void)HIL_QUEUE_Write(&Display_Queue,msg_struct);
 8005820:	9a01      	ldr	r2, [sp, #4]
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <Display_DateStr_Processing+0x30>)
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f000 f9b4 	bl	8005b94 <HIL_QUEUE_Write>
}
 800582c:	46c0      	nop			; (mov r8, r8)
 800582e:	b003      	add	sp, #12
 8005830:	bd00      	pop	{pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	200060f4 	.word	0x200060f4
 8005838:	200060cc 	.word	0x200060cc

0800583c <Display_Lcd_Write>:

static void Display_Lcd_Write(APP_Display_MsgTypeDef *msg_struct)
{
 800583c:	b500      	push	{lr}
 800583e:	b083      	sub	sp, #12
 8005840:	9001      	str	r0, [sp, #4]
  
  HEL_LCD_Backlight(&LCDHandler,SET);
 8005842:	4b25      	ldr	r3, [pc, #148]	; (80058d8 <Display_Lcd_Write+0x9c>)
 8005844:	2101      	movs	r1, #1
 8005846:	0018      	movs	r0, r3
 8005848:	f7ff f9db 	bl	8004c02 <HEL_LCD_Backlight>
  HEL_LCD_Clear(&LCDHandler);
 800584c:	4b22      	ldr	r3, [pc, #136]	; (80058d8 <Display_Lcd_Write+0x9c>)
 800584e:	0018      	movs	r0, r3
 8005850:	f7ff f9ec 	bl	8004c2c <HEL_LCD_Clear>
 
  HEL_LCD_SetCursor(&LCDHandler, 0, 1);
 8005854:	4b20      	ldr	r3, [pc, #128]	; (80058d8 <Display_Lcd_Write+0x9c>)
 8005856:	2201      	movs	r2, #1
 8005858:	2100      	movs	r1, #0
 800585a:	0018      	movs	r0, r3
 800585c:	f7ff f990 	bl	8004b80 <HEL_LCD_SetCursor>
  HEL_LCD_String(&LCDHandler,DateStr);
 8005860:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <Display_Lcd_Write+0xa0>)
 8005862:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <Display_Lcd_Write+0x9c>)
 8005864:	0011      	movs	r1, r2
 8005866:	0018      	movs	r0, r3
 8005868:	f7ff f968 	bl	8004b3c <HEL_LCD_String>
  (void)strcpy(DateStr,"");
 800586c:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <Display_Lcd_Write+0xa4>)
 800586e:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <Display_Lcd_Write+0xa0>)
 8005870:	0011      	movs	r1, r2
 8005872:	0018      	movs	r0, r3
 8005874:	f000 fd36 	bl	80062e4 <strcpy>
  if(msg_struct->Alarm_set == TRUE)
 8005878:	9b01      	ldr	r3, [sp, #4]
 800587a:	2250      	movs	r2, #80	; 0x50
 800587c:	5c9b      	ldrb	r3, [r3, r2]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d10a      	bne.n	8005898 <Display_Lcd_Write+0x5c>
  {
    HEL_LCD_SetCursor(&LCDHandler, 1, 0);
 8005882:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <Display_Lcd_Write+0x9c>)
 8005884:	2200      	movs	r2, #0
 8005886:	2101      	movs	r1, #1
 8005888:	0018      	movs	r0, r3
 800588a:	f7ff f979 	bl	8004b80 <HEL_LCD_SetCursor>
    HEL_LCD_Data(&LCDHandler,'A');
 800588e:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <Display_Lcd_Write+0x9c>)
 8005890:	2141      	movs	r1, #65	; 0x41
 8005892:	0018      	movs	r0, r3
 8005894:	f7ff f921 	bl	8004ada <HEL_LCD_Data>
  }
  HEL_LCD_SetCursor(&LCDHandler, 1, 3);
 8005898:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <Display_Lcd_Write+0x9c>)
 800589a:	2203      	movs	r2, #3
 800589c:	2101      	movs	r1, #1
 800589e:	0018      	movs	r0, r3
 80058a0:	f7ff f96e 	bl	8004b80 <HEL_LCD_SetCursor>
  
  HEL_LCD_String(&LCDHandler,TimeStr);
 80058a4:	4a0f      	ldr	r2, [pc, #60]	; (80058e4 <Display_Lcd_Write+0xa8>)
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <Display_Lcd_Write+0x9c>)
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7ff f946 	bl	8004b3c <HEL_LCD_String>
  (void)strcpy(TimeStr,"");
 80058b0:	4a0b      	ldr	r2, [pc, #44]	; (80058e0 <Display_Lcd_Write+0xa4>)
 80058b2:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <Display_Lcd_Write+0xa8>)
 80058b4:	0011      	movs	r1, r2
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 fd14 	bl	80062e4 <strcpy>
  (void)memset(&msg_struct,0,sizeof msg_struct);
 80058bc:	ab01      	add	r3, sp, #4
 80058be:	2204      	movs	r2, #4
 80058c0:	2100      	movs	r1, #0
 80058c2:	0018      	movs	r0, r3
 80058c4:	f000 fcd4 	bl	8006270 <memset>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_2);
 80058c8:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <Display_Lcd_Write+0xac>)
 80058ca:	2104      	movs	r1, #4
 80058cc:	0018      	movs	r0, r3
 80058ce:	f7fc f854 	bl	800197a <HAL_GPIO_TogglePin>
}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	b003      	add	sp, #12
 80058d6:	bd00      	pop	{pc}
 80058d8:	20001480 	.word	0x20001480
 80058dc:	200060f4 	.word	0x200060f4
 80058e0:	08006400 	.word	0x08006400
 80058e4:	200060e8 	.word	0x200060e8
 80058e8:	50000800 	.word	0x50000800

080058ec <Display_Alamr_Active>:

static void Display_Alamr_Active (APP_Display_MsgTypeDef *msg_struct )
{
 80058ec:	b500      	push	{lr}
 80058ee:	b083      	sub	sp, #12
 80058f0:	9001      	str	r0, [sp, #4]
  static uint8_t    lcdBacklight_state = 0;
  (void)msg_struct;
  HEL_LCD_SetCursor(&LCDHandler,1,0);
 80058f2:	4b18      	ldr	r3, [pc, #96]	; (8005954 <Display_Alamr_Active+0x68>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	2101      	movs	r1, #1
 80058f8:	0018      	movs	r0, r3
 80058fa:	f7ff f941 	bl	8004b80 <HEL_LCD_SetCursor>
  HEL_LCD_Data(&LCDHandler,0);
 80058fe:	4b15      	ldr	r3, [pc, #84]	; (8005954 <Display_Alamr_Active+0x68>)
 8005900:	2100      	movs	r1, #0
 8005902:	0018      	movs	r0, r3
 8005904:	f7ff f8e9 	bl	8004ada <HEL_LCD_Data>
  HEL_LCD_SetCursor(&LCDHandler,1,3);
 8005908:	4b12      	ldr	r3, [pc, #72]	; (8005954 <Display_Alamr_Active+0x68>)
 800590a:	2203      	movs	r2, #3
 800590c:	2101      	movs	r1, #1
 800590e:	0018      	movs	r0, r3
 8005910:	f7ff f936 	bl	8004b80 <HEL_LCD_SetCursor>
  HEL_LCD_Data(&LCDHandler,0);
 8005914:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <Display_Alamr_Active+0x68>)
 8005916:	2100      	movs	r1, #0
 8005918:	0018      	movs	r0, r3
 800591a:	f7ff f8de 	bl	8004ada <HEL_LCD_Data>
  HEL_LCD_String(&LCDHandler,"ALARM!!!");
 800591e:	4a0e      	ldr	r2, [pc, #56]	; (8005958 <Display_Alamr_Active+0x6c>)
 8005920:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <Display_Alamr_Active+0x68>)
 8005922:	0011      	movs	r1, r2
 8005924:	0018      	movs	r0, r3
 8005926:	f7ff f909 	bl	8004b3c <HEL_LCD_String>
  lcdBacklight_state = (~lcdBacklight_state) & 0x01;
 800592a:	4b0c      	ldr	r3, [pc, #48]	; (800595c <Display_Alamr_Active+0x70>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	001a      	movs	r2, r3
 8005930:	2301      	movs	r3, #1
 8005932:	4013      	ands	r3, r2
 8005934:	425a      	negs	r2, r3
 8005936:	4153      	adcs	r3, r2
 8005938:	b2db      	uxtb	r3, r3
 800593a:	001a      	movs	r2, r3
 800593c:	4b07      	ldr	r3, [pc, #28]	; (800595c <Display_Alamr_Active+0x70>)
 800593e:	701a      	strb	r2, [r3, #0]
  HEL_LCD_Backlight(&LCDHandler,lcdBacklight_state);
 8005940:	4b06      	ldr	r3, [pc, #24]	; (800595c <Display_Alamr_Active+0x70>)
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	4b03      	ldr	r3, [pc, #12]	; (8005954 <Display_Alamr_Active+0x68>)
 8005946:	0011      	movs	r1, r2
 8005948:	0018      	movs	r0, r3
 800594a:	f7ff f95a 	bl	8004c02 <HEL_LCD_Backlight>
}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	b003      	add	sp, #12
 8005952:	bd00      	pop	{pc}
 8005954:	20001480 	.word	0x20001480
 8005958:	08006404 	.word	0x08006404
 800595c:	20006104 	.word	0x20006104

08005960 <Display_Alarm_Set>:

static void Display_Alarm_Set (APP_Display_MsgTypeDef *msg_struct)
{
 8005960:	b500      	push	{lr}
 8005962:	b089      	sub	sp, #36	; 0x24
 8005964:	9001      	str	r0, [sp, #4]
  
  char              AlarmStr[12]  = {0};
 8005966:	ab05      	add	r3, sp, #20
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	3304      	adds	r3, #4
 800596e:	2208      	movs	r2, #8
 8005970:	2100      	movs	r1, #0
 8005972:	0018      	movs	r0, r3
 8005974:	f000 fc7c 	bl	8006270 <memset>
  char              Str[6]        = {0}; 
 8005978:	ab03      	add	r3, sp, #12
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	809a      	strh	r2, [r3, #4]
  HEL_LCD_SetCursor(&LCDHandler,1,0);
 8005982:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <Display_Alarm_Set+0x94>)
 8005984:	2200      	movs	r2, #0
 8005986:	2101      	movs	r1, #1
 8005988:	0018      	movs	r0, r3
 800598a:	f7ff f8f9 	bl	8004b80 <HEL_LCD_SetCursor>
  HEL_LCD_Data(&LCDHandler,0);
 800598e:	4b19      	ldr	r3, [pc, #100]	; (80059f4 <Display_Alarm_Set+0x94>)
 8005990:	2100      	movs	r1, #0
 8005992:	0018      	movs	r0, r3
 8005994:	f7ff f8a1 	bl	8004ada <HEL_LCD_Data>
  HEL_LCD_SetCursor(&LCDHandler,1,2);
 8005998:	4b16      	ldr	r3, [pc, #88]	; (80059f4 <Display_Alarm_Set+0x94>)
 800599a:	2202      	movs	r2, #2
 800599c:	2101      	movs	r1, #1
 800599e:	0018      	movs	r0, r3
 80059a0:	f7ff f8ee 	bl	8004b80 <HEL_LCD_SetCursor>
  AlarmFormat(Str,&(msg_struct->sAlarm));
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	3328      	adds	r3, #40	; 0x28
 80059a8:	001a      	movs	r2, r3
 80059aa:	ab03      	add	r3, sp, #12
 80059ac:	0011      	movs	r1, r2
 80059ae:	0018      	movs	r0, r3
 80059b0:	f7ff fd16 	bl	80053e0 <AlarmFormat>
  (void)strcat(AlarmStr,"ALARM=");
 80059b4:	4a10      	ldr	r2, [pc, #64]	; (80059f8 <Display_Alarm_Set+0x98>)
 80059b6:	ab05      	add	r3, sp, #20
 80059b8:	0011      	movs	r1, r2
 80059ba:	0018      	movs	r0, r3
 80059bc:	f000 fc60 	bl	8006280 <strcat>
  (void)strcat(AlarmStr,Str);
 80059c0:	aa03      	add	r2, sp, #12
 80059c2:	ab05      	add	r3, sp, #20
 80059c4:	0011      	movs	r1, r2
 80059c6:	0018      	movs	r0, r3
 80059c8:	f000 fc5a 	bl	8006280 <strcat>
  HEL_LCD_String(&LCDHandler,AlarmStr);
 80059cc:	aa05      	add	r2, sp, #20
 80059ce:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <Display_Alarm_Set+0x94>)
 80059d0:	0011      	movs	r1, r2
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7ff f8b2 	bl	8004b3c <HEL_LCD_String>
  (void)memset(msg_struct,0,sizeof(msg_struct));
 80059d8:	9b01      	ldr	r3, [sp, #4]
 80059da:	2204      	movs	r2, #4
 80059dc:	2100      	movs	r1, #0
 80059de:	0018      	movs	r0, r3
 80059e0:	f000 fc46 	bl	8006270 <memset>
  (void)HIL_SCHEDULER_StopTask(&Sche,3);
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <Display_Alarm_Set+0x9c>)
 80059e6:	2103      	movs	r1, #3
 80059e8:	0018      	movs	r0, r3
 80059ea:	f000 fadb 	bl	8005fa4 <HIL_SCHEDULER_StopTask>
}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	b009      	add	sp, #36	; 0x24
 80059f2:	bd00      	pop	{pc}
 80059f4:	20001480 	.word	0x20001480
 80059f8:	08006410 	.word	0x08006410
 80059fc:	20000028 	.word	0x20000028

08005a00 <Display_Alarm_No_Set>:
static void Display_Alarm_No_Set(APP_Display_MsgTypeDef *msg_struct)
{
 8005a00:	b500      	push	{lr}
 8005a02:	b083      	sub	sp, #12
 8005a04:	9001      	str	r0, [sp, #4]
  
  HEL_LCD_SetCursor(&LCDHandler,1,0);
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <Display_Alarm_No_Set+0x68>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7ff f8b7 	bl	8004b80 <HEL_LCD_SetCursor>
  HEL_LCD_String(&LCDHandler,"ALARM");
 8005a12:	4a16      	ldr	r2, [pc, #88]	; (8005a6c <Display_Alarm_No_Set+0x6c>)
 8005a14:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <Display_Alarm_No_Set+0x68>)
 8005a16:	0011      	movs	r1, r2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f7ff f88f 	bl	8004b3c <HEL_LCD_String>
  HEL_LCD_Data(&LCDHandler,0);
 8005a1e:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <Display_Alarm_No_Set+0x68>)
 8005a20:	2100      	movs	r1, #0
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7ff f859 	bl	8004ada <HEL_LCD_Data>
  HEL_LCD_String(&LCDHandler,"NO");
 8005a28:	4a11      	ldr	r2, [pc, #68]	; (8005a70 <Display_Alarm_No_Set+0x70>)
 8005a2a:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <Display_Alarm_No_Set+0x68>)
 8005a2c:	0011      	movs	r1, r2
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f7ff f884 	bl	8004b3c <HEL_LCD_String>
  HEL_LCD_Data(&LCDHandler,0);
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <Display_Alarm_No_Set+0x68>)
 8005a36:	2100      	movs	r1, #0
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f7ff f84e 	bl	8004ada <HEL_LCD_Data>
  HEL_LCD_String(&LCDHandler,"CONFIG");
 8005a3e:	4a0d      	ldr	r2, [pc, #52]	; (8005a74 <Display_Alarm_No_Set+0x74>)
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <Display_Alarm_No_Set+0x68>)
 8005a42:	0011      	movs	r1, r2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7ff f879 	bl	8004b3c <HEL_LCD_String>
  (void)memset(msg_struct,0,sizeof(msg_struct));
 8005a4a:	9b01      	ldr	r3, [sp, #4]
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	2100      	movs	r1, #0
 8005a50:	0018      	movs	r0, r3
 8005a52:	f000 fc0d 	bl	8006270 <memset>
  (void)HIL_SCHEDULER_StopTask(&Sche,3);
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <Display_Alarm_No_Set+0x78>)
 8005a58:	2103      	movs	r1, #3
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 faa2 	bl	8005fa4 <HIL_SCHEDULER_StopTask>
}
 8005a60:	46c0      	nop			; (mov r8, r8)
 8005a62:	b003      	add	sp, #12
 8005a64:	bd00      	pop	{pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	20001480 	.word	0x20001480
 8005a6c:	08006418 	.word	0x08006418
 8005a70:	08006420 	.word	0x08006420
 8005a74:	08006424 	.word	0x08006424
 8005a78:	20000028 	.word	0x20000028

08005a7c <Display_Do_Nothing>:
static void Display_Do_Nothing (APP_Display_MsgTypeDef *msg_struct)
{
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	9001      	str	r0, [sp, #4]
  (void)msg_struct;
}
 8005a80:	46c0      	nop			; (mov r8, r8)
 8005a82:	b002      	add	sp, #8
 8005a84:	4770      	bx	lr
	...

08005a88 <display_Task>:


void display_Task(void)
{
 8005a88:	b500      	push	{lr}
 8005a8a:	b097      	sub	sp, #92	; 0x5c
  
  APP_Display_MsgTypeDef msg_struct;
  App_Display_Events event = DISPLAY_NO_MSG;
 8005a8c:	2357      	movs	r3, #87	; 0x57
 8005a8e:	446b      	add	r3, sp
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
  msg_struct.msg = event;
 8005a94:	466b      	mov	r3, sp
 8005a96:	2257      	movs	r2, #87	; 0x57
 8005a98:	446a      	add	r2, sp
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	701a      	strb	r2, [r3, #0]
    {DISPLAY_ALARM_NOSET,Display_Alarm_No_Set},
    {DISPLAY_TIMESTR_PROCESSING,Display_TimeStr_Processing},
    {DISPLAY_DATESTR_PROCESSING,Display_DateStr_Processing},
    {DISPLAY_LCD_WRITE,Display_Lcd_Write}
  };
  while(!HIL_QUEUE_IsEmpty(&Display_Queue))
 8005a9e:	e01a      	b.n	8005ad6 <display_Task+0x4e>
  {
    (void)HIL_QUEUE_Read(&Display_Queue,&msg_struct);
 8005aa0:	466a      	mov	r2, sp
 8005aa2:	4b12      	ldr	r3, [pc, #72]	; (8005aec <display_Task+0x64>)
 8005aa4:	0011      	movs	r1, r2
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f000 f8be 	bl	8005c28 <HIL_QUEUE_Read>
    event = msg_struct.msg;
 8005aac:	2357      	movs	r3, #87	; 0x57
 8005aae:	446b      	add	r3, sp
 8005ab0:	466a      	mov	r2, sp
 8005ab2:	7812      	ldrb	r2, [r2, #0]
 8005ab4:	701a      	strb	r2, [r3, #0]
    if( event < DISPLAY_LAST )
 8005ab6:	2357      	movs	r3, #87	; 0x57
 8005ab8:	446b      	add	r3, sp
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b06      	cmp	r3, #6
 8005abe:	d80a      	bhi.n	8005ad6 <display_Task+0x4e>
    {
      (*Display_EventsMachine[event].func)(&msg_struct);
 8005ac0:	2357      	movs	r3, #87	; 0x57
 8005ac2:	446b      	add	r3, sp
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	4a0a      	ldr	r2, [pc, #40]	; (8005af0 <display_Task+0x68>)
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	18d3      	adds	r3, r2, r3
 8005acc:	3304      	adds	r3, #4
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	466a      	mov	r2, sp
 8005ad2:	0010      	movs	r0, r2
 8005ad4:	4798      	blx	r3
  while(!HIL_QUEUE_IsEmpty(&Display_Queue))
 8005ad6:	4b05      	ldr	r3, [pc, #20]	; (8005aec <display_Task+0x64>)
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f000 f84d 	bl	8005b78 <HIL_QUEUE_IsEmpty>
 8005ade:	1e03      	subs	r3, r0, #0
 8005ae0:	d0de      	beq.n	8005aa0 <display_Task+0x18>
    }
   
  }
}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	46c0      	nop			; (mov r8, r8)
 8005ae6:	b017      	add	sp, #92	; 0x5c
 8005ae8:	bd00      	pop	{pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	200060cc 	.word	0x200060cc
 8005af0:	080064ec 	.word	0x080064ec

08005af4 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8005af4:	b500      	push	{lr}
 8005af6:	b083      	sub	sp, #12
 8005af8:	9001      	str	r0, [sp, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8005afa:	9b01      	ldr	r3, [sp, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_WWDG_Init+0x10>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e017      	b.n	8005b34 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8005b04:	9b01      	ldr	r3, [sp, #4]
 8005b06:	0018      	movs	r0, r3
 8005b08:	f7fa fece 	bl	80008a8 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8005b0c:	9b01      	ldr	r3, [sp, #4]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	9b01      	ldr	r3, [sp, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2180      	movs	r1, #128	; 0x80
 8005b16:	430a      	orrs	r2, r1
 8005b18:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8005b1a:	9b01      	ldr	r3, [sp, #4]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	9b01      	ldr	r3, [sp, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	0011      	movs	r1, r2
 8005b26:	9b01      	ldr	r3, [sp, #4]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	9b01      	ldr	r3, [sp, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	0018      	movs	r0, r3
 8005b36:	b003      	add	sp, #12
 8005b38:	bd00      	pop	{pc}

08005b3a <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	9001      	str	r0, [sp, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8005b3e:	9b01      	ldr	r3, [sp, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	9a01      	ldr	r2, [sp, #4]
 8005b44:	68d2      	ldr	r2, [r2, #12]
 8005b46:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	b002      	add	sp, #8
 8005b4e:	4770      	bx	lr

08005b50 <HIL_QUEUE_Init>:
#include <stdint.h>
#include <memory.h>
#include "hil_queue.h"
#include "app_bsp.h"
void HIL_QUEUE_Init( QUEUE_HandleTypeDef *hqueue ){
 8005b50:	b082      	sub	sp, #8
 8005b52:	9001      	str	r0, [sp, #4]
    
    hqueue->Head     = 0u;
 8005b54:	9b01      	ldr	r3, [sp, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	60da      	str	r2, [r3, #12]
    hqueue->Tail     = 0u;
 8005b5a:	9b01      	ldr	r3, [sp, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	611a      	str	r2, [r3, #16]
    hqueue->Counter  = 0u;
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	619a      	str	r2, [r3, #24]
    hqueue->Full     = 0u;
 8005b66:	9b01      	ldr	r3, [sp, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	755a      	strb	r2, [r3, #21]
    hqueue->Empty    = 1u;
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	751a      	strb	r2, [r3, #20]
}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	b002      	add	sp, #8
 8005b76:	4770      	bx	lr

08005b78 <HIL_QUEUE_IsEmpty>:
uint8_t HIL_QUEUE_IsEmpty(QUEUE_HandleTypeDef *hqueue)
{
 8005b78:	b082      	sub	sp, #8
 8005b7a:	9001      	str	r0, [sp, #4]
    return hqueue->Empty;
 8005b7c:	9b01      	ldr	r3, [sp, #4]
 8005b7e:	7d1b      	ldrb	r3, [r3, #20]
}
 8005b80:	0018      	movs	r0, r3
 8005b82:	b002      	add	sp, #8
 8005b84:	4770      	bx	lr

08005b86 <HIL_QUEUE_IsFull>:


uint8_t HIL_QUEUE_IsFull(QUEUE_HandleTypeDef *hqueue)
{
 8005b86:	b082      	sub	sp, #8
 8005b88:	9001      	str	r0, [sp, #4]
    return hqueue->Full;	
 8005b8a:	9b01      	ldr	r3, [sp, #4]
 8005b8c:	7d5b      	ldrb	r3, [r3, #21]
}
 8005b8e:	0018      	movs	r0, r3
 8005b90:	b002      	add	sp, #8
 8005b92:	4770      	bx	lr

08005b94 <HIL_QUEUE_Write>:

uint8_t HIL_QUEUE_Write( QUEUE_HandleTypeDef *hqueue, void *data )
{
 8005b94:	b500      	push	{lr}
 8005b96:	b085      	sub	sp, #20
 8005b98:	9001      	str	r0, [sp, #4]
 8005b9a:	9100      	str	r1, [sp, #0]
  uint8_t exit_flag = 0;
 8005b9c:	230f      	movs	r3, #15
 8005b9e:	446b      	add	r3, sp
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
   if ( !HIL_QUEUE_IsFull(hqueue) )
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f7ff ffed 	bl	8005b86 <HIL_QUEUE_IsFull>
 8005bac:	1e03      	subs	r3, r0, #0
 8005bae:	d135      	bne.n	8005c1c <HIL_QUEUE_Write+0x88>
   {
      (void) memcpy(&((uint8_t *)hqueue->Buffer)[hqueue->Tail], data, hqueue->Size); /* cppcheck-suppress misra-c2012-11.5; void pointer conversion need */
 8005bb0:	9b01      	ldr	r3, [sp, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	9b01      	ldr	r3, [sp, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	18d0      	adds	r0, r2, r3
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	7a1b      	ldrb	r3, [r3, #8]
 8005bbe:	001a      	movs	r2, r3
 8005bc0:	9b00      	ldr	r3, [sp, #0]
 8005bc2:	0019      	movs	r1, r3
 8005bc4:	f000 fb96 	bl	80062f4 <memcpy>
      hqueue->Tail += hqueue->Size;
 8005bc8:	9b01      	ldr	r3, [sp, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	9a01      	ldr	r2, [sp, #4]
 8005bce:	7a12      	ldrb	r2, [r2, #8]
 8005bd0:	189a      	adds	r2, r3, r2
 8005bd2:	9b01      	ldr	r3, [sp, #4]
 8005bd4:	611a      	str	r2, [r3, #16]
      hqueue->Tail %= (hqueue->Elements * hqueue->Size);
 8005bd6:	9b01      	ldr	r3, [sp, #4]
 8005bd8:	6918      	ldr	r0, [r3, #16]
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	9a01      	ldr	r2, [sp, #4]
 8005be0:	7a12      	ldrb	r2, [r2, #8]
 8005be2:	4353      	muls	r3, r2
 8005be4:	0019      	movs	r1, r3
 8005be6:	f7fa faa5 	bl	8000134 <__aeabi_uidivmod>
 8005bea:	000b      	movs	r3, r1
 8005bec:	001a      	movs	r2, r3
 8005bee:	9b01      	ldr	r3, [sp, #4]
 8005bf0:	611a      	str	r2, [r3, #16]
      hqueue->Counter++;
 8005bf2:	9b01      	ldr	r3, [sp, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	9b01      	ldr	r3, [sp, #4]
 8005bfa:	619a      	str	r2, [r3, #24]
      hqueue->Empty = 0u; 
 8005bfc:	9b01      	ldr	r3, [sp, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	751a      	strb	r2, [r3, #20]
      if(hqueue->Counter == hqueue->Elements)
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	9b01      	ldr	r3, [sp, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d102      	bne.n	8005c14 <HIL_QUEUE_Write+0x80>
      {
          hqueue->Full = 1u;    
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	755a      	strb	r2, [r3, #21]
      }
      exit_flag = 1;
 8005c14:	230f      	movs	r3, #15
 8005c16:	446b      	add	r3, sp
 8005c18:	2201      	movs	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
   }
  
  return exit_flag;
 8005c1c:	230f      	movs	r3, #15
 8005c1e:	446b      	add	r3, sp
 8005c20:	781b      	ldrb	r3, [r3, #0]
}
 8005c22:	0018      	movs	r0, r3
 8005c24:	b005      	add	sp, #20
 8005c26:	bd00      	pop	{pc}

08005c28 <HIL_QUEUE_Read>:

uint8_t HIL_QUEUE_Read( QUEUE_HandleTypeDef *hqueue, void *data )
{
 8005c28:	b500      	push	{lr}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	9001      	str	r0, [sp, #4]
 8005c2e:	9100      	str	r1, [sp, #0]
    uint8_t exit_flag = 0;
 8005c30:	230f      	movs	r3, #15
 8005c32:	446b      	add	r3, sp
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
    if ( !HIL_QUEUE_IsEmpty(hqueue) )
 8005c38:	9b01      	ldr	r3, [sp, #4]
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f7ff ff9c 	bl	8005b78 <HIL_QUEUE_IsEmpty>
 8005c40:	1e03      	subs	r3, r0, #0
 8005c42:	d139      	bne.n	8005cb8 <HIL_QUEUE_Read+0x90>
    {
       (void) memcpy(data,&((uint8_t *)hqueue->Buffer)[hqueue->Head], hqueue->Size);  /* cppcheck-suppress misra-c2012-11.5; void pointer conversion need */
 8005c44:	9b01      	ldr	r3, [sp, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	18d1      	adds	r1, r2, r3
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	7a1b      	ldrb	r3, [r3, #8]
 8005c52:	001a      	movs	r2, r3
 8005c54:	9b00      	ldr	r3, [sp, #0]
 8005c56:	0018      	movs	r0, r3
 8005c58:	f000 fb4c 	bl	80062f4 <memcpy>
        hqueue->Head += hqueue->Size;
 8005c5c:	9b01      	ldr	r3, [sp, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	9a01      	ldr	r2, [sp, #4]
 8005c62:	7a12      	ldrb	r2, [r2, #8]
 8005c64:	189a      	adds	r2, r3, r2
 8005c66:	9b01      	ldr	r3, [sp, #4]
 8005c68:	60da      	str	r2, [r3, #12]
        hqueue->Counter--;
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	1e5a      	subs	r2, r3, #1
 8005c70:	9b01      	ldr	r3, [sp, #4]
 8005c72:	619a      	str	r2, [r3, #24]
        hqueue->Head %= (hqueue->Elements * hqueue->Size);
 8005c74:	9b01      	ldr	r3, [sp, #4]
 8005c76:	68d8      	ldr	r0, [r3, #12]
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	9a01      	ldr	r2, [sp, #4]
 8005c7e:	7a12      	ldrb	r2, [r2, #8]
 8005c80:	4353      	muls	r3, r2
 8005c82:	0019      	movs	r1, r3
 8005c84:	f7fa fa56 	bl	8000134 <__aeabi_uidivmod>
 8005c88:	000b      	movs	r3, r1
 8005c8a:	001a      	movs	r2, r3
 8005c8c:	9b01      	ldr	r3, [sp, #4]
 8005c8e:	60da      	str	r2, [r3, #12]
        hqueue->Full = 0u;
 8005c90:	9b01      	ldr	r3, [sp, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	755a      	strb	r2, [r3, #21]
        if(hqueue->Counter == 0u)
 8005c96:	9b01      	ldr	r3, [sp, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d108      	bne.n	8005cb0 <HIL_QUEUE_Read+0x88>
            {
                hqueue->Empty = 1u;    
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	751a      	strb	r2, [r3, #20]
                hqueue->Tail  = 0u;
 8005ca4:	9b01      	ldr	r3, [sp, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
                hqueue->Head  = 0u;
 8005caa:	9b01      	ldr	r3, [sp, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	60da      	str	r2, [r3, #12]
            }  
      exit_flag = 1u;
 8005cb0:	230f      	movs	r3, #15
 8005cb2:	446b      	add	r3, sp
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]
    }
     
    return exit_flag;    
 8005cb8:	230f      	movs	r3, #15
 8005cba:	446b      	add	r3, sp
 8005cbc:	781b      	ldrb	r3, [r3, #0]
}
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	b005      	add	sp, #20
 8005cc2:	bd00      	pop	{pc}

08005cc4 <HIL_QUEUE_WriteISR>:
  (void) memset(hqueue->Buffer,0,( hqueue->Elements));
  HIL_QUEUE_Init(hqueue);
}

uint8_t HIL_QUEUE_WriteISR( QUEUE_HandleTypeDef *hqueue, void *data, uint8_t isr )
{
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	9003      	str	r0, [sp, #12]
 8005cca:	9102      	str	r1, [sp, #8]
 8005ccc:	466b      	mov	r3, sp
 8005cce:	3307      	adds	r3, #7
 8005cd0:	701a      	strb	r2, [r3, #0]
  uint8_t exit_flag;
  HAL_NVIC_DisableIRQ(isr);
 8005cd2:	466b      	mov	r3, sp
 8005cd4:	3307      	adds	r3, #7
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	b25b      	sxtb	r3, r3
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f7fa ffc4 	bl	8000c68 <HAL_NVIC_DisableIRQ>
  exit_flag = HIL_QUEUE_Write(hqueue,data);
 8005ce0:	2417      	movs	r4, #23
 8005ce2:	446c      	add	r4, sp
 8005ce4:	9a02      	ldr	r2, [sp, #8]
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	0011      	movs	r1, r2
 8005cea:	0018      	movs	r0, r3
 8005cec:	f7ff ff52 	bl	8005b94 <HIL_QUEUE_Write>
 8005cf0:	0003      	movs	r3, r0
 8005cf2:	7023      	strb	r3, [r4, #0]
  HAL_NVIC_EnableIRQ(isr);
 8005cf4:	466b      	mov	r3, sp
 8005cf6:	3307      	adds	r3, #7
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	b25b      	sxtb	r3, r3
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7fa ffa3 	bl	8000c48 <HAL_NVIC_EnableIRQ>
  return exit_flag;
 8005d02:	2317      	movs	r3, #23
 8005d04:	446b      	add	r3, sp
 8005d06:	781b      	ldrb	r3, [r3, #0]
}
 8005d08:	0018      	movs	r0, r3
 8005d0a:	b006      	add	sp, #24
 8005d0c:	bd10      	pop	{r4, pc}

08005d0e <HIL_QUEUE_IsEmptyISR>:
  HAL_NVIC_EnableIRQ(isr);
  return exit_flag;
}

uint8_t HIL_QUEUE_IsEmptyISR( QUEUE_HandleTypeDef *hqueue, uint8_t isr )
{
 8005d0e:	b510      	push	{r4, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	9001      	str	r0, [sp, #4]
 8005d14:	000a      	movs	r2, r1
 8005d16:	466b      	mov	r3, sp
 8005d18:	3303      	adds	r3, #3
 8005d1a:	701a      	strb	r2, [r3, #0]
  uint8_t exit_flag;
  HAL_NVIC_DisableIRQ(isr);
 8005d1c:	466b      	mov	r3, sp
 8005d1e:	3303      	adds	r3, #3
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	b25b      	sxtb	r3, r3
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7fa ff9f 	bl	8000c68 <HAL_NVIC_DisableIRQ>
  exit_flag = HIL_QUEUE_IsEmpty(hqueue);
 8005d2a:	240f      	movs	r4, #15
 8005d2c:	446c      	add	r4, sp
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	0018      	movs	r0, r3
 8005d32:	f7ff ff21 	bl	8005b78 <HIL_QUEUE_IsEmpty>
 8005d36:	0003      	movs	r3, r0
 8005d38:	7023      	strb	r3, [r4, #0]
  HAL_NVIC_EnableIRQ(isr);
 8005d3a:	466b      	mov	r3, sp
 8005d3c:	3303      	adds	r3, #3
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	b25b      	sxtb	r3, r3
 8005d42:	0018      	movs	r0, r3
 8005d44:	f7fa ff80 	bl	8000c48 <HAL_NVIC_EnableIRQ>
  return exit_flag;
 8005d48:	230f      	movs	r3, #15
 8005d4a:	446b      	add	r3, sp
 8005d4c:	781b      	ldrb	r3, [r3, #0]
}
 8005d4e:	0018      	movs	r0, r3
 8005d50:	b004      	add	sp, #16
 8005d52:	bd10      	pop	{r4, pc}

08005d54 <HIL_SCHEDULER_RegisterTimer>:
#include "scheduler.h"
#include "app_bsp.h"


uint8_t HIL_SCHEDULER_RegisterTimer( Scheduler_HandleTypeDef *hscheduler, uint32_t Timeout, void (*CallbackPtr)(void) )
{
 8005d54:	b500      	push	{lr}
 8005d56:	b087      	sub	sp, #28
 8005d58:	9003      	str	r0, [sp, #12]
 8005d5a:	9102      	str	r1, [sp, #8]
 8005d5c:	9201      	str	r2, [sp, #4]
  uint8_t exit_flag = 0u;
 8005d5e:	2317      	movs	r3, #23
 8005d60:	446b      	add	r3, sp
 8005d62:	2200      	movs	r2, #0
 8005d64:	701a      	strb	r2, [r3, #0]
  if( ( (Timeout % hscheduler->tick) == 0u )  && (Timeout > 0u ) )
 8005d66:	9b03      	ldr	r3, [sp, #12]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	9b02      	ldr	r3, [sp, #8]
 8005d6c:	0011      	movs	r1, r2
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f7fa f9e0 	bl	8000134 <__aeabi_uidivmod>
 8005d74:	1e0b      	subs	r3, r1, #0
 8005d76:	d11c      	bne.n	8005db2 <HIL_SCHEDULER_RegisterTimer+0x5e>
 8005d78:	9b02      	ldr	r3, [sp, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d019      	beq.n	8005db2 <HIL_SCHEDULER_RegisterTimer+0x5e>
  {
    hscheduler->timerPtr[hscheduler->TimerCount].callbackPtr = CallbackPtr;
 8005d7e:	9b03      	ldr	r3, [sp, #12]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	18d3      	adds	r3, r2, r3
 8005d8a:	9a01      	ldr	r2, [sp, #4]
 8005d8c:	60da      	str	r2, [r3, #12]
    hscheduler->timerPtr[hscheduler->TimerCount].Timeout = Timeout;
 8005d8e:	9b03      	ldr	r3, [sp, #12]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	9b03      	ldr	r3, [sp, #12]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	18d3      	adds	r3, r2, r3
 8005d9a:	9a02      	ldr	r2, [sp, #8]
 8005d9c:	601a      	str	r2, [r3, #0]
    hscheduler->TimerCount++;
 8005d9e:	9b03      	ldr	r3, [sp, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	611a      	str	r2, [r3, #16]
    exit_flag = hscheduler->TimerCount;
 8005da8:	9b03      	ldr	r3, [sp, #12]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	2317      	movs	r3, #23
 8005dae:	446b      	add	r3, sp
 8005db0:	701a      	strb	r2, [r3, #0]
  }
  return exit_flag;
 8005db2:	2317      	movs	r3, #23
 8005db4:	446b      	add	r3, sp
 8005db6:	781b      	ldrb	r3, [r3, #0]
}
 8005db8:	0018      	movs	r0, r3
 8005dba:	b007      	add	sp, #28
 8005dbc:	bd00      	pop	{pc}
	...

08005dc0 <HIL_SCHEDULER_StartTimer>:
  }
  return exit_flag;
}

uint8_t HIL_SCHEDULER_StartTimer( Scheduler_HandleTypeDef *hscheduler, uint32_t Timer )
{
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	9001      	str	r0, [sp, #4]
 8005dc4:	9100      	str	r1, [sp, #0]
  uint8_t exit_flag = 0u;
 8005dc6:	230f      	movs	r3, #15
 8005dc8:	446b      	add	r3, sp
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
  if( ( Timer > 0u ) && ( Timer <= hscheduler->TimerCount) )
 8005dce:	9b00      	ldr	r3, [sp, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d024      	beq.n	8005e1e <HIL_SCHEDULER_StartTimer+0x5e>
 8005dd4:	9b01      	ldr	r3, [sp, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	9a00      	ldr	r2, [sp, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d81f      	bhi.n	8005e1e <HIL_SCHEDULER_StartTimer+0x5e>
  {
    
    hscheduler->timerPtr[Timer - 1u].StartFlag = 1u;
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	9b00      	ldr	r3, [sp, #0]
 8005de4:	4911      	ldr	r1, [pc, #68]	; (8005e2c <HIL_SCHEDULER_StartTimer+0x6c>)
 8005de6:	468c      	mov	ip, r1
 8005de8:	4463      	add	r3, ip
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	18d3      	adds	r3, r2, r3
 8005dee:	2201      	movs	r2, #1
 8005df0:	609a      	str	r2, [r3, #8]
    hscheduler->timerPtr[Timer - 1u].Count =  hscheduler->timerPtr[Timer - 1u].Timeout ;
 8005df2:	9b01      	ldr	r3, [sp, #4]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	9b00      	ldr	r3, [sp, #0]
 8005df8:	490c      	ldr	r1, [pc, #48]	; (8005e2c <HIL_SCHEDULER_StartTimer+0x6c>)
 8005dfa:	468c      	mov	ip, r1
 8005dfc:	4463      	add	r3, ip
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	18d2      	adds	r2, r2, r3
 8005e02:	9b01      	ldr	r3, [sp, #4]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	9b00      	ldr	r3, [sp, #0]
 8005e08:	4808      	ldr	r0, [pc, #32]	; (8005e2c <HIL_SCHEDULER_StartTimer+0x6c>)
 8005e0a:	4684      	mov	ip, r0
 8005e0c:	4463      	add	r3, ip
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	18cb      	adds	r3, r1, r3
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	605a      	str	r2, [r3, #4]
    exit_flag = TRUE;
 8005e16:	230f      	movs	r3, #15
 8005e18:	446b      	add	r3, sp
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	701a      	strb	r2, [r3, #0]
  }
  return exit_flag;
 8005e1e:	230f      	movs	r3, #15
 8005e20:	446b      	add	r3, sp
 8005e22:	781b      	ldrb	r3, [r3, #0]
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	b004      	add	sp, #16
 8005e28:	4770      	bx	lr
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	0fffffff 	.word	0x0fffffff

08005e30 <HIL_SCHEDULER_Init>:
  }
  return exit_flag;
}

void HIL_SCHEDULER_Init( Scheduler_HandleTypeDef *hscheduler )
{
 8005e30:	b084      	sub	sp, #16
 8005e32:	9001      	str	r0, [sp, #4]
  hscheduler->tasksCount      = 0u;
 8005e34:	9b01      	ldr	r3, [sp, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	609a      	str	r2, [r3, #8]
  hscheduler->TimerCount      = 0u;
 8005e3a:	9b01      	ldr	r3, [sp, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	611a      	str	r2, [r3, #16]
  /* Timers initialization */
  for(uint32_t timer_index = 0u; timer_index < hscheduler->timers; timer_index++ )
 8005e40:	2300      	movs	r3, #0
 8005e42:	9303      	str	r3, [sp, #12]
 8005e44:	e01e      	b.n	8005e84 <HIL_SCHEDULER_Init+0x54>
  {
    hscheduler->timerPtr[timer_index].callbackPtr = NULL;
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	18d3      	adds	r3, r2, r3
 8005e50:	2200      	movs	r2, #0
 8005e52:	60da      	str	r2, [r3, #12]
    hscheduler->timerPtr[timer_index].Count       = 0u;
 8005e54:	9b01      	ldr	r3, [sp, #4]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	18d3      	adds	r3, r2, r3
 8005e5e:	2200      	movs	r2, #0
 8005e60:	605a      	str	r2, [r3, #4]
    hscheduler->timerPtr[timer_index].StartFlag   = 0u;
 8005e62:	9b01      	ldr	r3, [sp, #4]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	18d3      	adds	r3, r2, r3
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	609a      	str	r2, [r3, #8]
    hscheduler->timerPtr[timer_index].Timeout     = 0u; 
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	699a      	ldr	r2, [r3, #24]
 8005e74:	9b03      	ldr	r3, [sp, #12]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	18d3      	adds	r3, r2, r3
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
  for(uint32_t timer_index = 0u; timer_index < hscheduler->timers; timer_index++ )
 8005e7e:	9b03      	ldr	r3, [sp, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	9303      	str	r3, [sp, #12]
 8005e84:	9b01      	ldr	r3, [sp, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	9a03      	ldr	r2, [sp, #12]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3db      	bcc.n	8005e46 <HIL_SCHEDULER_Init+0x16>

  }

  for( uint32_t i = 0u; i < hscheduler->tasks; i++ )
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9302      	str	r3, [sp, #8]
 8005e92:	e034      	b.n	8005efe <HIL_SCHEDULER_Init+0xce>
  {
    hscheduler->taskPtr[i].initFunc = NULL;
 8005e94:	9b01      	ldr	r3, [sp, #4]
 8005e96:	68d9      	ldr	r1, [r3, #12]
 8005e98:	9a02      	ldr	r2, [sp, #8]
 8005e9a:	0013      	movs	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	189b      	adds	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	18cb      	adds	r3, r1, r3
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	609a      	str	r2, [r3, #8]
    hscheduler->taskPtr[i].taskFunc = NULL;
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	68d9      	ldr	r1, [r3, #12]
 8005eac:	9a02      	ldr	r2, [sp, #8]
 8005eae:	0013      	movs	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	189b      	adds	r3, r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	18cb      	adds	r3, r1, r3
 8005eb8:	2200      	movs	r2, #0
 8005eba:	60da      	str	r2, [r3, #12]
    hscheduler->taskPtr[i].elapsed  = 0u;
 8005ebc:	9b01      	ldr	r3, [sp, #4]
 8005ebe:	68d9      	ldr	r1, [r3, #12]
 8005ec0:	9a02      	ldr	r2, [sp, #8]
 8005ec2:	0013      	movs	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	189b      	adds	r3, r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	18cb      	adds	r3, r1, r3
 8005ecc:	2200      	movs	r2, #0
 8005ece:	605a      	str	r2, [r3, #4]
    hscheduler->taskPtr[i].period   = 0u;
 8005ed0:	9b01      	ldr	r3, [sp, #4]
 8005ed2:	68d9      	ldr	r1, [r3, #12]
 8005ed4:	9a02      	ldr	r2, [sp, #8]
 8005ed6:	0013      	movs	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	189b      	adds	r3, r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	18cb      	adds	r3, r1, r3
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
    hscheduler->taskPtr[i].Run_Flag = 1u;
 8005ee4:	9b01      	ldr	r3, [sp, #4]
 8005ee6:	68d9      	ldr	r1, [r3, #12]
 8005ee8:	9a02      	ldr	r2, [sp, #8]
 8005eea:	0013      	movs	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	189b      	adds	r3, r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	18cb      	adds	r3, r1, r3
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	741a      	strb	r2, [r3, #16]
  for( uint32_t i = 0u; i < hscheduler->tasks; i++ )
 8005ef8:	9b02      	ldr	r3, [sp, #8]
 8005efa:	3301      	adds	r3, #1
 8005efc:	9302      	str	r3, [sp, #8]
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	9a02      	ldr	r2, [sp, #8]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d3c5      	bcc.n	8005e94 <HIL_SCHEDULER_Init+0x64>
    
  }
}
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	b004      	add	sp, #16
 8005f0e:	4770      	bx	lr

08005f10 <HIL_SCHEDULER_RegisterTask>:

uint8_t HIL_SCHEDULER_RegisterTask( Scheduler_HandleTypeDef *hscheduler, void (*InitPtr)(void), void (*TaskPtr)(void), uint32_t Period )
{
 8005f10:	b500      	push	{lr}
 8005f12:	b087      	sub	sp, #28
 8005f14:	9003      	str	r0, [sp, #12]
 8005f16:	9102      	str	r1, [sp, #8]
 8005f18:	9201      	str	r2, [sp, #4]
 8005f1a:	9300      	str	r3, [sp, #0]
  uint8_t exit_flag =  0u;
 8005f1c:	2317      	movs	r3, #23
 8005f1e:	446b      	add	r3, sp
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
  if( ((Period % hscheduler->tick) == 0u)  && (Period > 0u) && (TaskPtr != NULL) ) 
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	9b00      	ldr	r3, [sp, #0]
 8005f2a:	0011      	movs	r1, r2
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f7fa f901 	bl	8000134 <__aeabi_uidivmod>
 8005f32:	1e0b      	subs	r3, r1, #0
 8005f34:	d130      	bne.n	8005f98 <HIL_SCHEDULER_RegisterTask+0x88>
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d02d      	beq.n	8005f98 <HIL_SCHEDULER_RegisterTask+0x88>
 8005f3c:	9b01      	ldr	r3, [sp, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d02a      	beq.n	8005f98 <HIL_SCHEDULER_RegisterTask+0x88>
  { 
    hscheduler->taskPtr[hscheduler->tasksCount].initFunc = InitPtr;
 8005f42:	9b03      	ldr	r3, [sp, #12]
 8005f44:	68d9      	ldr	r1, [r3, #12]
 8005f46:	9b03      	ldr	r3, [sp, #12]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	0013      	movs	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	189b      	adds	r3, r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	18cb      	adds	r3, r1, r3
 8005f54:	9a02      	ldr	r2, [sp, #8]
 8005f56:	609a      	str	r2, [r3, #8]
    hscheduler->taskPtr[hscheduler->tasksCount].taskFunc = TaskPtr;
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	68d9      	ldr	r1, [r3, #12]
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	0013      	movs	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	189b      	adds	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	18cb      	adds	r3, r1, r3
 8005f6a:	9a01      	ldr	r2, [sp, #4]
 8005f6c:	60da      	str	r2, [r3, #12]
    hscheduler->taskPtr[hscheduler->tasksCount].period   = Period;
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	68d9      	ldr	r1, [r3, #12]
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	0013      	movs	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	189b      	adds	r3, r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	18cb      	adds	r3, r1, r3
 8005f80:	9a00      	ldr	r2, [sp, #0]
 8005f82:	601a      	str	r2, [r3, #0]
    hscheduler->tasksCount++;
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	609a      	str	r2, [r3, #8]
    exit_flag = hscheduler->tasksCount;
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	2317      	movs	r3, #23
 8005f94:	446b      	add	r3, sp
 8005f96:	701a      	strb	r2, [r3, #0]
  }
  
  return exit_flag;
 8005f98:	2317      	movs	r3, #23
 8005f9a:	446b      	add	r3, sp
 8005f9c:	781b      	ldrb	r3, [r3, #0]
}
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	b007      	add	sp, #28
 8005fa2:	bd00      	pop	{pc}

08005fa4 <HIL_SCHEDULER_StopTask>:

uint8_t HIL_SCHEDULER_StopTask( Scheduler_HandleTypeDef *hscheduler, uint32_t task )
{
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	9001      	str	r0, [sp, #4]
 8005fa8:	9100      	str	r1, [sp, #0]
  uint8_t exit_flag = 0u;
 8005faa:	230f      	movs	r3, #15
 8005fac:	446b      	add	r3, sp
 8005fae:	2200      	movs	r2, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
  if(task > 0u )
 8005fb2:	9b00      	ldr	r3, [sp, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00e      	beq.n	8005fd6 <HIL_SCHEDULER_StopTask+0x32>
  {
    hscheduler->taskPtr[task - 1u].Run_Flag = 0u;  
 8005fb8:	9b01      	ldr	r3, [sp, #4]
 8005fba:	68d9      	ldr	r1, [r3, #12]
 8005fbc:	9a00      	ldr	r2, [sp, #0]
 8005fbe:	0013      	movs	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	189b      	adds	r3, r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	3b14      	subs	r3, #20
 8005fc8:	18cb      	adds	r3, r1, r3
 8005fca:	2200      	movs	r2, #0
 8005fcc:	741a      	strb	r2, [r3, #16]
    exit_flag = 1u;  
 8005fce:	230f      	movs	r3, #15
 8005fd0:	446b      	add	r3, sp
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	701a      	strb	r2, [r3, #0]
  }
  
  return exit_flag;
 8005fd6:	230f      	movs	r3, #15
 8005fd8:	446b      	add	r3, sp
 8005fda:	781b      	ldrb	r3, [r3, #0]
}
 8005fdc:	0018      	movs	r0, r3
 8005fde:	b004      	add	sp, #16
 8005fe0:	4770      	bx	lr

08005fe2 <HIL_SCHEDULER_StartTask>:
uint8_t HIL_SCHEDULER_StartTask( Scheduler_HandleTypeDef *hscheduler, uint32_t task )
{
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	9001      	str	r0, [sp, #4]
 8005fe6:	9100      	str	r1, [sp, #0]
  uint8_t exit_flag = 0u;
 8005fe8:	230f      	movs	r3, #15
 8005fea:	446b      	add	r3, sp
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
  if(task > 0u )
 8005ff0:	9b00      	ldr	r3, [sp, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <HIL_SCHEDULER_StartTask+0x32>
  {
    hscheduler->taskPtr[task - 1u].Run_Flag = 1u;  
 8005ff6:	9b01      	ldr	r3, [sp, #4]
 8005ff8:	68d9      	ldr	r1, [r3, #12]
 8005ffa:	9a00      	ldr	r2, [sp, #0]
 8005ffc:	0013      	movs	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	189b      	adds	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	3b14      	subs	r3, #20
 8006006:	18cb      	adds	r3, r1, r3
 8006008:	2201      	movs	r2, #1
 800600a:	741a      	strb	r2, [r3, #16]
    exit_flag = 1u;  
 800600c:	230f      	movs	r3, #15
 800600e:	446b      	add	r3, sp
 8006010:	2201      	movs	r2, #1
 8006012:	701a      	strb	r2, [r3, #0]
  }
  
  return exit_flag;
 8006014:	230f      	movs	r3, #15
 8006016:	446b      	add	r3, sp
 8006018:	781b      	ldrb	r3, [r3, #0]
}
 800601a:	0018      	movs	r0, r3
 800601c:	b004      	add	sp, #16
 800601e:	4770      	bx	lr

08006020 <HIL_SCHEDULER_Start>:
  return exit_flag;

}

void HIL_SCHEDULER_Start( Scheduler_HandleTypeDef *hscheduler )
{
 8006020:	b510      	push	{r4, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	9001      	str	r0, [sp, #4]
  static  uint32_t scheduler_tick;
  
  /* This runs the init fuctions */
  for(uint32_t i = 0u; i < hscheduler->tasks; i++)
 8006026:	2300      	movs	r3, #0
 8006028:	9305      	str	r3, [sp, #20]
 800602a:	e017      	b.n	800605c <HIL_SCHEDULER_Start+0x3c>
  {
    if(hscheduler->taskPtr[i].initFunc != NULL)
 800602c:	9b01      	ldr	r3, [sp, #4]
 800602e:	68d9      	ldr	r1, [r3, #12]
 8006030:	9a05      	ldr	r2, [sp, #20]
 8006032:	0013      	movs	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	189b      	adds	r3, r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	18cb      	adds	r3, r1, r3
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <HIL_SCHEDULER_Start+0x36>
    {
      hscheduler->taskPtr[i].initFunc();
 8006042:	9b01      	ldr	r3, [sp, #4]
 8006044:	68d9      	ldr	r1, [r3, #12]
 8006046:	9a05      	ldr	r2, [sp, #20]
 8006048:	0013      	movs	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	189b      	adds	r3, r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	18cb      	adds	r3, r1, r3
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4798      	blx	r3
  for(uint32_t i = 0u; i < hscheduler->tasks; i++)
 8006056:	9b05      	ldr	r3, [sp, #20]
 8006058:	3301      	adds	r3, #1
 800605a:	9305      	str	r3, [sp, #20]
 800605c:	9b01      	ldr	r3, [sp, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	9a05      	ldr	r2, [sp, #20]
 8006062:	429a      	cmp	r2, r3
 8006064:	d3e2      	bcc.n	800602c <HIL_SCHEDULER_Start+0xc>
    }
  }

  /* We get the current system tick to get our time base and compare later */
  scheduler_tick = HAL_GetTick();
 8006066:	f7fa fcdf 	bl	8000a28 <HAL_GetTick>
 800606a:	0002      	movs	r2, r0
 800606c:	4b56      	ldr	r3, [pc, #344]	; (80061c8 <HIL_SCHEDULER_Start+0x1a8>)
 800606e:	601a      	str	r2, [r3, #0]

  for(;;)
  {
    /* check if tick time has passed */
    if( ( HAL_GetTick() - scheduler_tick ) >= hscheduler->tick )
 8006070:	f7fa fcda 	bl	8000a28 <HAL_GetTick>
 8006074:	0002      	movs	r2, r0
 8006076:	4b54      	ldr	r3, [pc, #336]	; (80061c8 <HIL_SCHEDULER_Start+0x1a8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	1ad2      	subs	r2, r2, r3
 800607c:	9b01      	ldr	r3, [sp, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d3f5      	bcc.n	8006070 <HIL_SCHEDULER_Start+0x50>
    {
      scheduler_tick = HAL_GetTick();
 8006084:	f7fa fcd0 	bl	8000a28 <HAL_GetTick>
 8006088:	0002      	movs	r2, r0
 800608a:	4b4f      	ldr	r3, [pc, #316]	; (80061c8 <HIL_SCHEDULER_Start+0x1a8>)
 800608c:	601a      	str	r2, [r3, #0]

      /* Timers execution */
      for(uint32_t timer_index = 0u; timer_index < hscheduler->timers; timer_index++)
 800608e:	2300      	movs	r3, #0
 8006090:	9304      	str	r3, [sp, #16]
 8006092:	e034      	b.n	80060fe <HIL_SCHEDULER_Start+0xde>
      {
        if( hscheduler->timerPtr != NULL)
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d02d      	beq.n	80060f8 <HIL_SCHEDULER_Start+0xd8>
        {
          if(hscheduler->timerPtr[timer_index].StartFlag == 1u )
 800609c:	9b01      	ldr	r3, [sp, #4]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	9b04      	ldr	r3, [sp, #16]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	18d3      	adds	r3, r2, r3
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d107      	bne.n	80060bc <HIL_SCHEDULER_Start+0x9c>
          {
            hscheduler->timerPtr[timer_index].Count--;
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	9b04      	ldr	r3, [sp, #16]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	18d3      	adds	r3, r2, r3
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	3a01      	subs	r2, #1
 80060ba:	605a      	str	r2, [r3, #4]
          }
          if (hscheduler->timerPtr[timer_index].Count == 0u)
 80060bc:	9b01      	ldr	r3, [sp, #4]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	9b04      	ldr	r3, [sp, #16]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	18d3      	adds	r3, r2, r3
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d115      	bne.n	80060f8 <HIL_SCHEDULER_Start+0xd8>
          {
            hscheduler->timerPtr[timer_index].StartFlag = 0u;
 80060cc:	9b01      	ldr	r3, [sp, #4]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	9b04      	ldr	r3, [sp, #16]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	18d3      	adds	r3, r2, r3
 80060d6:	2200      	movs	r2, #0
 80060d8:	609a      	str	r2, [r3, #8]
            if(hscheduler->timerPtr[timer_index].callbackPtr != NULL)
 80060da:	9b01      	ldr	r3, [sp, #4]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	9b04      	ldr	r3, [sp, #16]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	18d3      	adds	r3, r2, r3
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d006      	beq.n	80060f8 <HIL_SCHEDULER_Start+0xd8>
            {
              hscheduler->timerPtr[timer_index].callbackPtr();
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	9b04      	ldr	r3, [sp, #16]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	18d3      	adds	r3, r2, r3
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	4798      	blx	r3
      for(uint32_t timer_index = 0u; timer_index < hscheduler->timers; timer_index++)
 80060f8:	9b04      	ldr	r3, [sp, #16]
 80060fa:	3301      	adds	r3, #1
 80060fc:	9304      	str	r3, [sp, #16]
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	9a04      	ldr	r2, [sp, #16]
 8006104:	429a      	cmp	r2, r3
 8006106:	d3c5      	bcc.n	8006094 <HIL_SCHEDULER_Start+0x74>
          
        }
      }

      /* Tasks execution */
      for( uint32_t task_index = 0u; ( task_index < hscheduler->tasks ); task_index++ )
 8006108:	2300      	movs	r3, #0
 800610a:	9303      	str	r3, [sp, #12]
 800610c:	e055      	b.n	80061ba <HIL_SCHEDULER_Start+0x19a>
      {
        hscheduler->taskPtr[task_index].elapsed += hscheduler->tick;
 800610e:	9b01      	ldr	r3, [sp, #4]
 8006110:	68d9      	ldr	r1, [r3, #12]
 8006112:	9a03      	ldr	r2, [sp, #12]
 8006114:	0013      	movs	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	189b      	adds	r3, r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	18cb      	adds	r3, r1, r3
 800611e:	6858      	ldr	r0, [r3, #4]
 8006120:	9b01      	ldr	r3, [sp, #4]
 8006122:	6859      	ldr	r1, [r3, #4]
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	68dc      	ldr	r4, [r3, #12]
 8006128:	9a03      	ldr	r2, [sp, #12]
 800612a:	0013      	movs	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	189b      	adds	r3, r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	18e3      	adds	r3, r4, r3
 8006134:	1842      	adds	r2, r0, r1
 8006136:	605a      	str	r2, [r3, #4]
        if( ( hscheduler->taskPtr[task_index].elapsed >= hscheduler->taskPtr[task_index].period ) )
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	68d9      	ldr	r1, [r3, #12]
 800613c:	9a03      	ldr	r2, [sp, #12]
 800613e:	0013      	movs	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	189b      	adds	r3, r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	18cb      	adds	r3, r1, r3
 8006148:	6859      	ldr	r1, [r3, #4]
 800614a:	9b01      	ldr	r3, [sp, #4]
 800614c:	68d8      	ldr	r0, [r3, #12]
 800614e:	9a03      	ldr	r2, [sp, #12]
 8006150:	0013      	movs	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	189b      	adds	r3, r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	18c3      	adds	r3, r0, r3
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4299      	cmp	r1, r3
 800615e:	d329      	bcc.n	80061b4 <HIL_SCHEDULER_Start+0x194>
        {
          if( hscheduler->taskPtr[task_index].Run_Flag == TRUE )
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	68d9      	ldr	r1, [r3, #12]
 8006164:	9a03      	ldr	r2, [sp, #12]
 8006166:	0013      	movs	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	189b      	adds	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	18cb      	adds	r3, r1, r3
 8006170:	7c1b      	ldrb	r3, [r3, #16]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d114      	bne.n	80061a0 <HIL_SCHEDULER_Start+0x180>
          {
            if(hscheduler->taskPtr[task_index].taskFunc != NULL)
 8006176:	9b01      	ldr	r3, [sp, #4]
 8006178:	68d9      	ldr	r1, [r3, #12]
 800617a:	9a03      	ldr	r2, [sp, #12]
 800617c:	0013      	movs	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	189b      	adds	r3, r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	18cb      	adds	r3, r1, r3
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d009      	beq.n	80061a0 <HIL_SCHEDULER_Start+0x180>
            {
              hscheduler->taskPtr[task_index].taskFunc();
 800618c:	9b01      	ldr	r3, [sp, #4]
 800618e:	68d9      	ldr	r1, [r3, #12]
 8006190:	9a03      	ldr	r2, [sp, #12]
 8006192:	0013      	movs	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	189b      	adds	r3, r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	18cb      	adds	r3, r1, r3
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	4798      	blx	r3
            }
          }
          hscheduler->taskPtr[task_index].elapsed = 0u;
 80061a0:	9b01      	ldr	r3, [sp, #4]
 80061a2:	68d9      	ldr	r1, [r3, #12]
 80061a4:	9a03      	ldr	r2, [sp, #12]
 80061a6:	0013      	movs	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	189b      	adds	r3, r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	18cb      	adds	r3, r1, r3
 80061b0:	2200      	movs	r2, #0
 80061b2:	605a      	str	r2, [r3, #4]
      for( uint32_t task_index = 0u; ( task_index < hscheduler->tasks ); task_index++ )
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	3301      	adds	r3, #1
 80061b8:	9303      	str	r3, [sp, #12]
 80061ba:	9b01      	ldr	r3, [sp, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	9a03      	ldr	r2, [sp, #12]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d3a4      	bcc.n	800610e <HIL_SCHEDULER_Start+0xee>
    if( ( HAL_GetTick() - scheduler_tick ) >= hscheduler->tick )
 80061c4:	e754      	b.n	8006070 <HIL_SCHEDULER_Start+0x50>
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	20006108 	.word	0x20006108

080061cc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80061cc:	b082      	sub	sp, #8
 80061ce:	9001      	str	r0, [sp, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80061d0:	46c0      	nop			; (mov r8, r8)
 80061d2:	b002      	add	sp, #8
 80061d4:	4770      	bx	lr

080061d6 <__itoa>:
 80061d6:	1e93      	subs	r3, r2, #2
 80061d8:	b510      	push	{r4, lr}
 80061da:	000c      	movs	r4, r1
 80061dc:	2b22      	cmp	r3, #34	; 0x22
 80061de:	d904      	bls.n	80061ea <__itoa+0x14>
 80061e0:	2300      	movs	r3, #0
 80061e2:	001c      	movs	r4, r3
 80061e4:	700b      	strb	r3, [r1, #0]
 80061e6:	0020      	movs	r0, r4
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	2a0a      	cmp	r2, #10
 80061ec:	d109      	bne.n	8006202 <__itoa+0x2c>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	da07      	bge.n	8006202 <__itoa+0x2c>
 80061f2:	232d      	movs	r3, #45	; 0x2d
 80061f4:	700b      	strb	r3, [r1, #0]
 80061f6:	2101      	movs	r1, #1
 80061f8:	4240      	negs	r0, r0
 80061fa:	1861      	adds	r1, r4, r1
 80061fc:	f000 f804 	bl	8006208 <__utoa>
 8006200:	e7f1      	b.n	80061e6 <__itoa+0x10>
 8006202:	2100      	movs	r1, #0
 8006204:	e7f9      	b.n	80061fa <__itoa+0x24>
	...

08006208 <__utoa>:
 8006208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620a:	000c      	movs	r4, r1
 800620c:	0016      	movs	r6, r2
 800620e:	b08d      	sub	sp, #52	; 0x34
 8006210:	2225      	movs	r2, #37	; 0x25
 8006212:	0007      	movs	r7, r0
 8006214:	4915      	ldr	r1, [pc, #84]	; (800626c <__utoa+0x64>)
 8006216:	a802      	add	r0, sp, #8
 8006218:	f000 f86c 	bl	80062f4 <memcpy>
 800621c:	1e62      	subs	r2, r4, #1
 800621e:	1eb3      	subs	r3, r6, #2
 8006220:	2500      	movs	r5, #0
 8006222:	9201      	str	r2, [sp, #4]
 8006224:	2b22      	cmp	r3, #34	; 0x22
 8006226:	d904      	bls.n	8006232 <__utoa+0x2a>
 8006228:	7025      	strb	r5, [r4, #0]
 800622a:	002c      	movs	r4, r5
 800622c:	0020      	movs	r0, r4
 800622e:	b00d      	add	sp, #52	; 0x34
 8006230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006232:	0038      	movs	r0, r7
 8006234:	0031      	movs	r1, r6
 8006236:	f7f9 ff7d 	bl	8000134 <__aeabi_uidivmod>
 800623a:	000b      	movs	r3, r1
 800623c:	aa02      	add	r2, sp, #8
 800623e:	5cd3      	ldrb	r3, [r2, r3]
 8006240:	9a01      	ldr	r2, [sp, #4]
 8006242:	0029      	movs	r1, r5
 8006244:	3501      	adds	r5, #1
 8006246:	5553      	strb	r3, [r2, r5]
 8006248:	003b      	movs	r3, r7
 800624a:	0007      	movs	r7, r0
 800624c:	429e      	cmp	r6, r3
 800624e:	d9f0      	bls.n	8006232 <__utoa+0x2a>
 8006250:	2300      	movs	r3, #0
 8006252:	0022      	movs	r2, r4
 8006254:	5563      	strb	r3, [r4, r5]
 8006256:	000b      	movs	r3, r1
 8006258:	1ac8      	subs	r0, r1, r3
 800625a:	4283      	cmp	r3, r0
 800625c:	dde6      	ble.n	800622c <__utoa+0x24>
 800625e:	7810      	ldrb	r0, [r2, #0]
 8006260:	5ce5      	ldrb	r5, [r4, r3]
 8006262:	7015      	strb	r5, [r2, #0]
 8006264:	54e0      	strb	r0, [r4, r3]
 8006266:	3201      	adds	r2, #1
 8006268:	3b01      	subs	r3, #1
 800626a:	e7f5      	b.n	8006258 <__utoa+0x50>
 800626c:	08006524 	.word	0x08006524

08006270 <memset>:
 8006270:	0003      	movs	r3, r0
 8006272:	1882      	adds	r2, r0, r2
 8006274:	4293      	cmp	r3, r2
 8006276:	d100      	bne.n	800627a <memset+0xa>
 8006278:	4770      	bx	lr
 800627a:	7019      	strb	r1, [r3, #0]
 800627c:	3301      	adds	r3, #1
 800627e:	e7f9      	b.n	8006274 <memset+0x4>

08006280 <strcat>:
 8006280:	0002      	movs	r2, r0
 8006282:	b510      	push	{r4, lr}
 8006284:	7813      	ldrb	r3, [r2, #0]
 8006286:	0014      	movs	r4, r2
 8006288:	3201      	adds	r2, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1fa      	bne.n	8006284 <strcat+0x4>
 800628e:	5cca      	ldrb	r2, [r1, r3]
 8006290:	54e2      	strb	r2, [r4, r3]
 8006292:	3301      	adds	r3, #1
 8006294:	2a00      	cmp	r2, #0
 8006296:	d1fa      	bne.n	800628e <strcat+0xe>
 8006298:	bd10      	pop	{r4, pc}
	...

0800629c <__libc_init_array>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	2600      	movs	r6, #0
 80062a0:	4c0c      	ldr	r4, [pc, #48]	; (80062d4 <__libc_init_array+0x38>)
 80062a2:	4d0d      	ldr	r5, [pc, #52]	; (80062d8 <__libc_init_array+0x3c>)
 80062a4:	1b64      	subs	r4, r4, r5
 80062a6:	10a4      	asrs	r4, r4, #2
 80062a8:	42a6      	cmp	r6, r4
 80062aa:	d109      	bne.n	80062c0 <__libc_init_array+0x24>
 80062ac:	2600      	movs	r6, #0
 80062ae:	f000 f82b 	bl	8006308 <_init>
 80062b2:	4c0a      	ldr	r4, [pc, #40]	; (80062dc <__libc_init_array+0x40>)
 80062b4:	4d0a      	ldr	r5, [pc, #40]	; (80062e0 <__libc_init_array+0x44>)
 80062b6:	1b64      	subs	r4, r4, r5
 80062b8:	10a4      	asrs	r4, r4, #2
 80062ba:	42a6      	cmp	r6, r4
 80062bc:	d105      	bne.n	80062ca <__libc_init_array+0x2e>
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	00b3      	lsls	r3, r6, #2
 80062c2:	58eb      	ldr	r3, [r5, r3]
 80062c4:	4798      	blx	r3
 80062c6:	3601      	adds	r6, #1
 80062c8:	e7ee      	b.n	80062a8 <__libc_init_array+0xc>
 80062ca:	00b3      	lsls	r3, r6, #2
 80062cc:	58eb      	ldr	r3, [r5, r3]
 80062ce:	4798      	blx	r3
 80062d0:	3601      	adds	r6, #1
 80062d2:	e7f2      	b.n	80062ba <__libc_init_array+0x1e>
 80062d4:	0800654c 	.word	0x0800654c
 80062d8:	0800654c 	.word	0x0800654c
 80062dc:	08006550 	.word	0x08006550
 80062e0:	0800654c 	.word	0x0800654c

080062e4 <strcpy>:
 80062e4:	0003      	movs	r3, r0
 80062e6:	780a      	ldrb	r2, [r1, #0]
 80062e8:	3101      	adds	r1, #1
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	3301      	adds	r3, #1
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	d1f9      	bne.n	80062e6 <strcpy+0x2>
 80062f2:	4770      	bx	lr

080062f4 <memcpy>:
 80062f4:	2300      	movs	r3, #0
 80062f6:	b510      	push	{r4, lr}
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d100      	bne.n	80062fe <memcpy+0xa>
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	5ccc      	ldrb	r4, [r1, r3]
 8006300:	54c4      	strb	r4, [r0, r3]
 8006302:	3301      	adds	r3, #1
 8006304:	e7f8      	b.n	80062f8 <memcpy+0x4>
	...

08006308 <_init>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630e:	bc08      	pop	{r3}
 8006310:	469e      	mov	lr, r3
 8006312:	4770      	bx	lr

08006314 <_fini>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631a:	bc08      	pop	{r3}
 800631c:	469e      	mov	lr, r3
 800631e:	4770      	bx	lr
